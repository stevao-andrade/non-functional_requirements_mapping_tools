@Article{LIN2013340,
  author          = {Lin, Ying-Dar and Lai, Yuan-Cheng and Chen, Chien-Hung and Tsai, Hao-Chuan},
  title           = {{Identifying android malicious repackaged applications by thread-grained system call sequences}},
  journal         = {Computers {\&} Security},
  year            = {2013},
  volume          = {39},
  pages           = {340--350},
  issn            = {0167-4048},
  abstract        = {Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97{\%} detection accuracy, i.e., 143 correct detections among 149 applications.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404813001272},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2013.08.010},
  doi             = {https://doi.org/10.1016/j.cose.2013.08.010},
  keywords        = {Android, Dynamic analysis, Longest common substring, System call,Malicious repackaged applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404813001272},
}


@Article{LIU2018402,
  author          = {Liu, Xing and Liu, Jiqiang and Wang, Wei and Zhu, Sencun},
  title           = {{Android single sign-on security: Issues, taxonomy and directions}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {89},
  pages           = {402--420},
  issn            = {0167-739X},
  abstract        = {Single Sign-On (SSO) is a mechanism that allows a user to log in to other applications using his identity registered with an identity provider. One of the most popular protocols for SSO is OAuth 2.0, which is an open standard for authorization. However, due to the lack of detailed instructions on how to implement OAuth 2.0 on Android, there are many vulnerabilities in the current Android OAuth 2.0 implementations. While much research effort has been made to exploit such vulnerabilities, there is a lack of systematical collation and summary of these researches, resulting in the appearance of common vulnerabilities in new applications. Hence, it is crucial to collate and summarize related work. Meanwhile, the rapid development of the Internet of Things (IoT) also requires an understanding of the usage of OAuth 2.0 in the IoT environment. In this work, we first describe the OAuth 2.0 authorization code grant flow and the implicit grant flow in detail and summarize the differences between the Web environment and the Android environment that affect OAuth 2.0 security. Then, we summarize the security issues in the implementations of OAuth 2.0 on Android. These security issues include: storing client{\_}secret or access token locally, using embedded WebView as user-agent, incorrect usage of authentication proof, handling redirection in mobile app improperly, lacking transmission protection and third-party app authentication. Attacks on these vulnerabilities, such as WebView hijacking, linking hijacking and phishing, as well as attack results are elaborated subsequently. Against these security issues and attacks, we summarize the related research work in terms of vulnerability analysis, defense, and protocol analysis. At last, we discuss the directions for mitigating these security issues and discuss some OAuth-based protocols for the IoT environment.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X18302358},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.06.049},
  doi             = {https://doi.org/10.1016/j.future.2018.06.049},
  keywords        = {OAuth-based SSO, Privacy, Security,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X18302358},
}
@Article{Betarte2018271,
  author          = {Betarte, G and Campo, J and Gorostiaga, F and Luna, C},
  title           = {{A certified reference validation mechanism for the permission model of android}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2018},
  volume          = {10855 LNCS},
  pages           = {271--288},
  abstract        = {Android embodies security mechanisms at both OS and application level. In this platform application security is built primarily upon a system of permissions which specify restrictions on the operations a particular process can perform. The critical role of these security mechanisms makes them a prime target for (formal) verification. We present an idealized model of a reference monitor of the novel mechanisms of Android 6 (and further), where it is possible to grant permissions at run time. Using the programming language of the proof-assistant Coq we have developed a functional implementation of the reference validation mechanism and certified its correctness with respect to the specified reference monitor. Several properties concerning the permission model of Android 6 and its security mechanisms have been formally formulated and proved. Applying the program extraction mechanism provided by Coq we have also derived a certified Haskell prototype of the reference validation mechanism. {\textcopyright} 2018, Springer International Publishing AG, part of Springer Nature.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-94460-9_16},
  doi             = {10.1007/978-3-319-94460-9_16},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050340811{\&}doi=10.1007{\%}2F978-3-319-94460-9{\_}16{\&}partnerID=40{\&}md5=b58fbefc110aeea698222f3711f45797},
}

@Article{ISI:000343508700001,
  author          = {Ham, Hyo-Sik and Kim, Hwan-Hee and Kim, Myung-Sup and Choi, Mi-Jung},
  title           = {{Linear SVM-Based Android Malware Detection for Reliable IoT Services}},
  journal         = {JOURNAL OF APPLIED MATHEMATICS},
  year            = {2014},
  issn            = {1110-757X},
  abstract        = {Current many Internet of Things (IoT) services are monitored and
controlled through smartphone applications. By combining IoT with
smartphones, many convenient IoT services have been provided to users.
However, there are adverse underlying effects in such services including
invasion of privacy and information leakage. In most cases, mobile
devices have become cluttered with important personal user information
as various services and contents are provided through them. Accordingly,
attackers are expanding the scope of their attacks beyond the existing
PC and Internet environment into mobile devices. In this paper, we apply
a linear support vector machine (SVM) to detect Android malware and
compare the malware detection performance of SVM with that of other
machine learning classifiers. Through experimental validation, we show
that the SVM outperforms other machine learning classifiers.},
  bdsk-url-1      = {http://dx.doi.org/10.1155/2014/594501},
  doi             = {10.1155/2014/594501},
}

@Article{Armando2014103,
  author          = {Armando, A and Bocci, G and Chiarelli, G and Costa, G and {De Maglie}, G and Mammoliti, R and Merlo, A},
  title           = {{Mobile app security analysis with the MAVeriC static analysis}},
  journal         = {Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications},
  year            = {2014},
  volume          = {5},
  number          = {4},
  pages           = {103--119},
  abstract        = {The success of the mobile application model is mostly due to the ease with which new applications are uploaded by developers, distributed through the application markets (e.g. Google Play), and installed by users. Yet, the very same model is cause of serious security concerns, since users have no or little means to ascertain the trustworthiness of the applications they install on their devices. Such concerns grow up when dealing with professional scenarios like the use of mobile devices within organisations. To protect their customers, Poste Italiane has defined the Mobile Application Verification Cluster (MAVeriC), a process for the systematic security analysis of third-party mobile apps leveraging their online services (e.g. home banking, parcel tracking). MAVeriC is an ongoing project that will be completed in the next few years. At the core of the MAVeriC project lies the Static Analysis Module (SAM), a toolkit that supports automatic static analysis of mobile applications by automating a number of operations including reverse engineering, privilege analysis and automatic verification of security properties. In this paper we present the SAM that has been fully developed and tested. We introduce the functionalities of SAM through a demonstration of the platform applied to real Android applications. {\textcopyright} 2014 Innovative Information Science and Technology Research Group. All rights reserved.},
  annote          = {cited By 5},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920192515%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=d5ccf21836b9eecf61c2e489aef498cd},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920192515{\&}partnerID=40{\&}md5=d5ccf21836b9eecf61c2e489aef498cd},
}
@InProceedings{Hu:2014:DLI:2627393.2627404,
  author          = {Hu, Wenhui and Octeau, Damien and McDaniel, Patrick Drew and Liu, Peng},
  title           = {{Duet: Library Integrity Verification for Android Applications}},
  booktitle       = {Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless {\&}{\#}38; Mobile Networks},
  year            = {2014},
  series          = {WiSec '14},
  pages           = {141--152},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {In recent years, the Android operating system has had an explosive growth in the number of applications containing third-party libraries for different purposes. In this paper, we identify three library-centric threats in the real-world Android application markets: (i) the library modification threat, (ii) the masquerading threat and (iii) the aggressive library threat. These three threats cannot effectively be fully addressed by existing defense mechanisms such as software analysis, anti-virus software and anti-repackaging techniques. To mitigate these threats, we propose Duet, a library integrity verification tool for Android applications at application stores. This is non-trivial because the Android application build process merges library code and application-specific logic into a single binary file. Our approach uses reverse-engineering to achieve integrity verification. We implemented a full working prototype of Duet. In a dataset with 100,000 Android applications downloaded from Google Play between February 2012 and September 2013, we verify integrity of 15 libraries. On average, 80.50% of libraries can pass the integrity verification. In-depth analysis indicates that code insertion, obfuscation, and optimization on libraries by application developers are the primary reasons for not passing integrity verification. The evaluation results not only indicate that Duet is an effective tool to mitigate library-centric attacks, but also provide empirical insight into the library integrity situation in the wild.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2627393.2627404},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2627393.2627404},
  doi             = {10.1145/2627393.2627404},
  isbn            = {978-1-4503-2972-9},
  keywords        = {library integrity verification, library-centric security threat, smartphone, third-party library,android},
  url             = {http://doi.acm.org/10.1145/2627393.2627404},
}


@Article{deLimaSalgado2017379,
  author          = {{de Lima Salgado}, A and do Amaral, L and Fortes, R P M and Chagas, M H N and Joyce, G},
  title           = {{Addressing mobile usability and elderly users: Validating contextualized heuristics}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10288 LNCS},
  pages           = {379--394},
  abstract        = {Diverse heuristic sets were proposed in order to evolve Heuristic Evaluation for new contexts, as contexts related to the elderly and mobile devices. However, heuristics for evaluation of mobile usability regarding elderly users still need aditional validations. For this reason, our study aimed to enhance the validation of a heuristic set proposed by Al-Razgan et al. for evaluation of mobile usability regarding elderly users. Results showed that the major part of heuristics proposed by Al-Razgan et al. matches with traditional heuristics of Nielsen, while a few remain valuable for evaluations in this context. Also, after validations, we found evidences that the heuristics of Al-Razgan et al. have a great coverage of usability problems of mobile applications used by the elderly, as detected from test with users. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-58634-2_28},
  doi             = {10.1007/978-3-319-58634-2_28},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025114978{\&}doi=10.1007{\%}2F978-3-319-58634-2{\_}28{\&}partnerID=40{\&}md5=45e4899b3c1540196feca6569c118fea},
}
@Article{SONG2018663,
  author          = {Song, Jun and Gao, Kun and Shen, Xinyang and Qi, Xiaotian and Liu, Rui and Choo, Kim-Kwang Raymond},
  title           = {{QRFence: A flexible and scalable QR link security detection framework for Android devices}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {88},
  pages           = {663--674},
  issn            = {0167-739X},
  abstract        = {Android security is an ongoing topic of interest to both the research community and industry, particularly as the mobile threat landscape evolves. A threat that has yet to be resolved is malicious link dissemination via QR codes, and such codes are widely used by mobile users in countries such as China. Thus, this paper proposes a threat-oriented QR malicious link detection framework, QRFence, based on a novel machine learning-based link threat-degree evaluation model. Specifically, QRFence comprises a QR malicious link detection scheme and an integrated permission detection scheme, and provides the following properties: multiple classification algorithms, extensive training features and various permission combinations. The proposed framework is independent of the security detection plugin, and performs threat evaluation on the QR links during decoding; therefore, allowing users to understand potential threats of malicious links on-the-fly. Findings from our evaluations indicate that the average accuracy rate of this proposed QR link detection framework is 93.20{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X17324160},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.05.082},
  doi             = {https://doi.org/10.1016/j.future.2018.05.082},
  keywords        = {Android security, Machine learning, Malicious link, Threat degree,QR code},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X17324160},
}


@Conference{Ernst20141092,
  author          = {Ernst, M D and Just, R and Millstein, S and Dietl, W and Pernsteiner, S and Roesner, F and Koscher, K and Barros, P and Bhoraskar, R and Han, S and Vines, P and Wu, E X},
  title           = {{Collaborative verification of information flow for a high-assurance app store}},
  booktitle       = {Proceedings of the ACM Conference on Computer and Communications Security},
  year            = {2014},
  pages           = {1092--1104},
  abstract        = {Current app stores distribute some malware to unsuspecting users, even though the app approval process may be costly and timeconsuming. High-integrity app stores must provide stronger guarantees that their apps are not malicious. We propose a verification model for use in such app stores to guarantee that the apps are free of malicious information flows. In our model, the software vendor and the app store auditor collaborate - each does tasks that are easy for her/him, reducing overall verification cost. The software vendor provides a behavioral specification of information flow (at a finer granularity than used by current app stores) and source code annotated with information-flow type qualifiers. A flow-sensitive, context-sensitive information-flow type system checks the information flow type qualifiers in the source code and proves that only information flows in the specification can occur at run time. The app store auditor uses the vendor-provided source code to manually verify declassifications. We have implemented the information-flow type system for Android apps written in Java, and we evaluated both its effectiveness at detecting information-flow violations and its usability in practice. In an adversarial Red Team evaluation, we analyzed 72 apps (576,000 LOC) for malware. The 57 Trojans among these had been written specifically to defeat a malware analysis such as ours. Nonetheless, our information-flow type system was effective: it detected 96{\%} of malware whose malicious behavior was related to information flow and 82{\%} of all malware. In addition to the adversarial evaluation, we evaluated the practicality of using the collaborative model. The programmer annotation burden is low: 6 annotations per 100 LOC. Every sound analysis requires a human to review potential false alarms, and in our experiments, this took 30 minutes per 1,000 LOC for an auditor unfamiliar with the app. Copyright 2014 ACM.},
  annote          = {cited By 37},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2660267.2660343},
  doi             = {10.1145/2660267.2660343},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910609863{\&}doi=10.1145{\%}2F2660267.2660343{\&}partnerID=40{\&}md5=eb324cf8594d9bc9e9ec93235c0d5354},
}

@Article{ARMANDO2014247,
  author          = {Armando, Alessandro and Merlo, Alessio and Verderame, Luca},
  title           = {{Security considerations related to the use of mobile devices in the operation of critical infrastructures}},
  journal         = {International Journal of Critical Infrastructure Protection},
  year            = {2014},
  volume          = {7},
  number          = {4},
  pages           = {247--256},
  issn            = {1874-5482},
  abstract        = {An increasing number of attacks by mobile malware have begun to target critical infrastructure assets. Since malware attempts to defeat the security mechanisms provided by an operating system, it is of paramount importance to understand the strengths and weaknesses of the security frameworks of mobile device operating systems such as Android. Many recently discovered vulnerabilities suggest that security issues may be hidden in the cross-layer interplay between the Android layers and the underlying Linux kernel. This paper presents an empirical security evaluation of the interactions between Android layers. The experiments indicate that the Android Security Framework does not discriminate between callers of invocations to the Linux kernel, thereby enabling Android applications to directly interact with the kernel. This paper shows how this trait allows malware to adversely affect the security of mobile devices by exploiting previously unknown vulnerabilities unveiled by analyses of the Android interplay. The impact of the resulting attacks on critical infrastructures is discussed. Finally, an enhancement to the Android Security Framework is proposed for detecting and preventing direct kernel invocations by applications, thereby dramatically reducing the impact of malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1874548214000626},
  bdsk-url-2      = {https://doi.org/10.1016/j.ijcip.2014.10.002},
  doi             = {https://doi.org/10.1016/j.ijcip.2014.10.002},
  keywords        = {Android, Critical infrastructure, Cross-layer interplay, Malware, Security,Mobile devices},
  url             = {http://www.sciencedirect.com/science/article/pii/S1874548214000626},
}

@Article{TSAI2017103,
  author          = {Tsai, Tsai-Hsuan and Tseng, Kevin C and Chang, Yung-Sheng},
  title           = {{Testing the usability of smartphone surface gestures on different sizes of smartphones by different age groups of users}},
  journal         = {Computers in Human Behavior},
  year            = {2017},
  volume          = {75},
  pages           = {103--116},
  issn            = {0747-5632},
  abstract        = {This study focuses on testing the usability of 3 different sizes of smartphones by children, adults, and the elderly. Forty-seven participants from each age group were recruited. The research consisted of two stages of experiments. In the first experiment, three existing gestures used by the Android system were evaluated: drag, pinch, and double-touch drag. In the second experiment, two additional re-design gestures were tested: multi-long press and slide down. The users' performances were measured based on their overall time, success time, accuracy, Fitts' Law values, and a subjective questionnaire. Among the five gestures, drag and multi-long press were categorized as the drag gesture, and pinch, double-touch drag and slide down were categorized as the enlarging gesture. The results show that children and adults outperformed the elderly in gesture operation. With respect to smartphone size, the subjects had faster response times and better Fitts' Law values on 6-inch phones. When comparing the subjective preference and the objective use measurement values of the two drag gestures and three enlarging gestures among the different age groups, it was found that children and adults were consistent, whereas the elderly were inconsistent. Overall, in operating the original drag and pinch gestures, the elderly exhibited better objective use measurements, but they preferred the improved gestures, such as slide down.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0747563217303254},
  bdsk-url-2      = {https://doi.org/10.1016/j.chb.2017.05.013},
  doi             = {https://doi.org/10.1016/j.chb.2017.05.013},
  keywords        = {Children, Elderly, Fitts' law, Gestures, Usability,Smartphone size},
  url             = {http://www.sciencedirect.com/science/article/pii/S0747563217303254},
}
@Article{MASOOD20151818,
  author          = {Masood, Mona and Thigambaram, Menaga},
  title           = {{The Usability of Mobile Applications for Pre-schoolers}},
  journal         = {Procedia - Social and Behavioral Sciences},
  year            = {2015},
  volume          = {197},
  pages           = {1818--1826},
  issn            = {1877-0428},
  abstract        = {The purpose of this study is to investigate the importance of usability in user interface (UI) design of mobile educational applications (MEA) designed for children aged 4-5 years. Usability testing was conducted with four children to evaluate the UI design based on the children's mental model in addition to the quality of their learning experience. An eye tracking glasses was utilized to capture the children's eye movements while the usability heuristics was used to collect the descriptive data regarding the interface design. Results indicated that the usability study can be considered as a multi-stage problem solving process where it analyses and foresee how the children use a product and the actual first-time users' intuition of their design experience and learning curve. The observation, eye tracking data and usability testing of the MEA with the four children validates that the UI application was based on the developers and designers adult mental model and guideline or own assumptions. This paper ends with a suggestion of a UI design guideline of design elements and principles for designers and developers to adhere when developing MEA for children.},
  annote          = {7th World Conference on Educational Sciences},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877042815042421},
  bdsk-url-2      = {https://doi.org/10.1016/j.sbspro.2015.07.241},
  doi             = {https://doi.org/10.1016/j.sbspro.2015.07.241},
  keywords        = {educational application, eye tracking glasses, mobile apps, tablets,usability testing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877042815042421},
}
@Article{ZHANG2017516,
  author          = {Zhang, Xiaolu and Baggili, Ibrahim and Breitinger, Frank},
  title           = {{Breaking into the vault: Privacy, security and forensic analysis of Android vault applications}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {70},
  pages           = {516--531},
  issn            = {0167-4048},
  abstract        = {In this work we share the first account for the forensic analysis, security and privacy of Android vault applications. Vaults are designed to be privacy enhancing as they allow users to hide personal data but may also be misused to hide incriminating files. Our work has already helped law enforcement in the state of Connecticut to reconstruct 66 incriminating images and 18 videos in a single criminal case. We present case studies and results from analyzing 18 Android vault applications (accounting for nearly 220 million downloads from the Google Play store) by reverse engineering them and examining the forensic artifacts they produce. Our results showed that 1218 obfuscated their code and 518 applications used native libraries hindering the reverse engineering process of these applications. However, we still recovered data from the applications without root access to the Android device as we were able to ascertain hidden data on the device without rooting for 1018 of the applications. 618 of the vault applications were found to not encrypt photos they stored, and 818 were found to not encrypt videos. 718 of the applications were found to store passwords in cleartext. We were able to also implement a swap attack on 518 applications where we achieved unauthorized access to the data by swapping the files that contained the password with a self-created one. In some cases, our findings illustrate unfavorable security implementations of privacy enhancing applications, but also showcase practical mechanisms for investigators to gain access to data of evidentiary value. In essence, we broke into the vaults.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817301529},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.07.011},
  doi             = {https://doi.org/10.1016/j.cose.2017.07.011},
  keywords        = {Android, Mobile applications, Privacy, Security, Vault applications,Forensics},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817301529},
}

@Article{Dmitrienko2014365,
  author          = {Dmitrienko, A and Liebchen, C and Rossow, C and Sadeghi, A.-R.},
  title           = {{On the (in)security of mobile two-factor authentication}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2014},
  volume          = {8437},
  pages           = {365--383},
  abstract        = {Two-factor authentication (2FA) schemes aim at strengthening the security of login password-based authentication by deploying secondary authentication tokens. In this context, mobile 2FA schemes require no additional hardware (e.g., a smartcard) to store and handle the secondary authentication token, and hence are considered as a reasonable trade-off between security, usability and costs. They are widely used in online banking and increasingly deployed by Internet service providers. In this paper, we investigate 2FA implementations of several well-known Internet service providers such as Google, Dropbox, Twitter and Facebook. We identify various weaknesses that allow an attacker to easily bypass them, even when the secondary authentication token is not under attacker's control. We then go a step further and present a more general attack against mobile 2FA schemes. Our attack relies on cross-platform infection that subverts control over both end points (PC and a mobile device) involved in the authentication protocol. We apply this attack in practice and successfully circumvent diverse schemes: SMSbased TAN solutions of four large banks, one instance of a visual TAN scheme, 2FA login verification systems of Google, Dropbox, Twitter and Facebook accounts, and the Google Authenticator app currently used by 32 third-party service providers. Finally, we cluster and analyze hundreds of real-world malicious Android apps that target mobile 2FA schemes and show that banking Trojans already deploy mobile counterparts that steal 2FA credentials like TANs. {\textcopyright} International Financial Cryptography Association 2014.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-662-45472-5_24},
  doi             = {10.1007/978-3-662-45472-5_24},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84916597460{\&}doi=10.1007{\%}2F978-3-662-45472-5{\_}24{\&}partnerID=40{\&}md5=a38cc01be91b433396c396973a0eb0fd},
}

@Article{FEIZOLLAH2017121,
  author          = {Feizollah, Ali and Anuar, Nor Badrul and Salleh, Rosli and Suarez-Tangil, Guillermo and Furnell, Steven},
  title           = {{AndroDialysis: Analysis of Android Intent Effectiveness in Malware Detection}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {65},
  pages           = {121--134},
  issn            = {0167-4048},
  abstract        = {The wide popularity of Android systems has been accompanied by increase in the number of malware targeting these systems. This is largely due to the open nature of the Android framework that facilitates the incorporation of third-party applications running on top of any Android device. Inter-process communication is one of the most notable features of the Android framework as it allows the reuse of components across process boundaries. This mechanism is used as gateway to access different sensitive services in the Android framework. In the Android platform, this communication system is usually driven by a late runtime binding messaging object known as Intent. In this paper, we evaluate the effectiveness of Android Intents (explicit and implicit) as a distinguishing feature for identifying malicious applications. We show that Intents are semantically rich features that are able to encode the intentions of malware when compared to other well-studied features such as permissions. We also argue that this type of feature is not the ultimate solution. It should be used in conjunction with other known features. We conducted experiments using a dataset containing 7406 applications that comprise 1846 clean and 5560 infected applications. The results show detection rate of 91{\%} using Android Intent against 83{\%} using Android permission. Additionally, experiment on combination of both features results in detection rate of 95.5{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404816301602},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2016.11.007},
  doi             = {https://doi.org/10.1016/j.cose.2016.11.007},
  keywords        = {Android, Intent, Smartphone security, Static analysis,Mobile malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404816301602},
}

@Article{ISI:000420076400006,
  author          = {Londono, Sebastian and {Camilo Urcuqui}, Christian and {Navarro Cadavid}, Andres and {Fuentes Amaya}, Manuel and Gomez, Johan},
  title           = {{SafeCandy: System for security, analysis and validation in Android}},
  journal         = {SISTEMAS {\&} TELEMATICA},
  year            = {2015},
  volume          = {13},
  number          = {35},
  pages           = {89--102},
  issn            = {1692-5238},
  abstract        = {Android is an operating system which currently has over one billion
active users for all their mobile devices, a market impact that is
influencing an increase in the amount of information that can be
obtained from different users, facts that have motivated the development
of malicious software by cybercriminals. To solve the problems caused by
malware, Android implements a different architecture and security
controls, such as a unique user ID (UID) for each application, while an
API permits its distribution platform, Google Play applications. It has
been shown that there are ways to violate that protection, so the
developer community has been developing alternatives aimed at improving
the level of safety. This paper presents: the latest information on the
various trends and security solutions for Android, and SafeCandy, an app
proposed as a new system for analysis, validation and configuration of
Android applications that implements static and dynamic analysis with
improved ASEF. Finally, a study is included to evaluate the
effectiveness in threat detection of different malware antivirus
software for Android.},
  bdsk-url-1      = {http://dx.doi.org/10.18046/syt.v13i35.2154},
  doi             = {10.18046/syt.v13i35.2154},
}

@Article{ISI:000441910000003,
  author          = {Bagheri, Hamid and Kang, Eunsuk and Malek, Sam and Jackson, Daniel},
  title           = {{A formal approach for detection of security flaws in the android permission system}},
  journal         = {FORMAL ASPECTS OF COMPUTING},
  year            = {2018},
  volume          = {30},
  number          = {5},
  pages           = {525--544},
  issn            = {0934-5043},
  abstract        = {The ever increasing expansion of mobile applications into nearly every
aspect of modern life, from banking to healthcare systems, is making
their security more important than ever. Modern smartphone operating
systems (OS) rely substantially on the permission-based security model
to enforce restrictions on the operations that each application can
perform. In this paper, we perform an analysis of the permission
protocol implemented in Android, a popular OS for smartphones. We
propose a formal model of the Android permission protocol in Alloy, and
describe a fully automatic analysis that identifies potential flaws in
the protocol. A study of real-world Android applications corroborates
our finding that the flaws in the Android permission protocol can have
severe security implications, in some cases allowing the attacker to
bypass the permission checks entirely.},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s00165-017-0445-z},
  doi             = {10.1007/s00165-017-0445-z},
}

@Article{MATTSON20151,
  author          = {Mattson, Donald C},
  title           = {{Usability assessment of a mobile app for art therapy}},
  journal         = {The Arts in Psychotherapy},
  year            = {2015},
  volume          = {43},
  pages           = {1--6},
  issn            = {0197-4556},
  abstract        = {Art therapists recently assembled a list of desirable features for an art therapy app. The Art Therapy Draw! app includes two of them in its design: a portfolio option, and stronger security. Five art therapists evaluated the app through a System Usability Scale (SUS). The evaluation revealed both positive qualities of the program and areas requiring improvement. Overall, the layout of the app proved easy to navigate and required little knowledge to operate. It offered more security measures than other apps. In addition, the expert users commented that the app would likely be suitable for use with disabled persons or those allergic to conventional art materials. This study marks a step toward instituting design considerations for emerging mobile art therapy.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0197455615000088},
  bdsk-url-2      = {https://doi.org/10.1016/j.aip.2015.02.005},
  doi             = {https://doi.org/10.1016/j.aip.2015.02.005},
  keywords        = {Computer, Digital, Drawing, Mobile,App},
  url             = {http://www.sciencedirect.com/science/article/pii/S0197455615000088},
}