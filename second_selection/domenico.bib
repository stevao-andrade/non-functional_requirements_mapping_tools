% Encoding: UTF-8

@Article{OPASIAK201980,
  author          = {Opasiak, Krzysztof and Mazurczyk, Wojciech},
  title           = {{(In)Secure Android Debugging: Security analysis and lessons learned}},
  journal         = {Computers {\&} Security},
  year            = {2019},
  volume          = {82},
  pages           = {80--98},
  issn            = {0167-4048},
  abstract        = {Universal Serial Bus (USB) is currently one of the most popular standards that controls communication between personal computers (PCs) and their peripheral devices. Thus, it is important to establish whether such connections are properly secured especially when USB is used to connect devices like smartphones, tablets, etc. where sensitive user data can be potentially stored. For this reason, this paper evaluates security of the recent Android versions with respect to the USB-related attacks. In particular, we present a novel approach to compromise Android-based devices by exploiting Android Debug Bridge (ADB) protocol using Man in the Middle (MitM) attacks. Comprehensive analysis of those types of attacks have revealed five novel security vulnerabilities in the Android OS. Security gaps found in this paper cannot only be used to bypass the lock screen security and to gain unauthorized access to the user's private data but also to enable future ADB attacks by incorporating a backdoor to bypass phone security at any time. We also developed a tool which exploits all discovered vulnerabilities and can serve as a security mean to assess current ADB implementations as well as future protocol improvements. By disclosing new security weaknesses we want to raise security awareness of the users, researches, security professionals, and developers related to the USB-related attacks and to the threat they pose not only to PCs but also to the USB devices.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S016740481831023X},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2018.12.010},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2018.12.010},
  keywords        = {ADB, Android, MITM, USB,Mobile security},
  url             = {http://www.sciencedirect.com/science/article/pii/S016740481831023X},
}

@Article{ISI:000361707400001,
  author          = {Wicks, Paul and Chiauzzi, Emil},
  title           = {{`Trust but verify' - five approaches to ensure safe medical apps}},
  journal         = {BMC MEDICINE},
  year            = {2015},
  volume          = {13},
  issn            = {1741-7015},
  abstract        = {Mobile health apps are health and wellness programs available on mobile
devices such as smartphones or tablets. In three systematic assessments
published in BMC Medicine, Huckvale and colleagues demonstrate that
widely available health apps meant to help patients calculate their
appropriate insulin dosage, educate themselves about asthma, or perform
other important functions are methodologically weak. Insulin dose
calculators lacked user input validation and made inappropriate dose
recommendations, with a lack of documentation throughout. Since 2011,
asthma apps have become more interactive, but have not improved in
quality; peak flow calculators have the same issues as the insulin
calculators. A review of the accredited National Health Service Health
Apps Library found poor and inconsistent implementation of privacy and
security, with 28 {\%} of apps lacking a privacy policy and one even
transmitting personally identifying data the policy claimed would be
anonymous. Ensuring patient safety might require a new approach, whether
that be a consumer education program at one extreme or government
regulation at the other. App store owners could ensure transparency of
algorithms (whiteboxing), data sharing, and data quality. While a proper
balance must be struck between innovation and caution, patient safety
must be paramount.},
  bdsk-url-1      = {http://dx.doi.org/10.1186/s12916-015-0451-z},
  bytitledomenico = {no},
  doi             = {10.1186/s12916-015-0451-z},
}

@InCollection{ZHENG2006335,
  author          = {Zheng, Pei and Ni, Lionel},
  title           = {{6 - Mobile Security and Privacy}},
  booktitle       = {Smart Phone and Next Generation Mobile Computing},
  publisher       = {Morgan Kaufmann},
  year            = {2006},
  editor          = {Zheng, Pei and Ni, Lionel},
  pages           = {335--405},
  address         = {Burlington},
  isbn            = {978-0-12-088560-2},
  abstract        = {Publisher Summary
This chapter explores a wide range of mobile security and privacy issues and offers some insight into the fundamental security problems surrounding the design of secured mobile wireless systems and applications. The chapter begins with a security primer summarizing a set of basic network security concepts and security schemes, followed by an in depth coverage of security issues in cellular networks, wireless local area network (LAN), Bluetooth, and other emerging mobile wireless systems. Subsequently, a mobile wireless system takes security and privacy into account at the very beginning of the design phase and utilize appropriate security service building blocks to provide data confidentiality, integrity, authentication, and nonrepudiation, as well as efficient access control. The chapter introduces technical aspects of each problem and discusses some proposed approaches for solving the issues. It also outlines some real-world solutions to the security problems. Many of the security and privacy problems addressed in this chapter are closely related to requirements of the underlying mobile applications and services such as location-based services, mobile commerce, and instant messaging.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780120885602500083},
  bdsk-url-2      = {https://doi.org/10.1016/B978-012088560-2/50008-3},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-012088560-2/50008-3},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780120885602500083},
}

@InProceedings{6569717,
  author          = {Canfora, G and Mercaldo, F and Visaggio, C A and DAngelo, M and Furno, A and Manganelli, C},
  title           = {{A Case Study of Automating User Experience-Oriented Performance Testing on Smartphones}},
  booktitle       = {2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
  year            = {2013},
  pages           = {66--69},
  abstract        = {We have developed a platform named Advanced Test Environment (ATE) for supporting the design and the automatic execution of UX tests for applications running on Android smartphones. The platform collects objective metrics used to estimate the UX. In this paper, we investigate the extent that the metrics captured by ATE are able to approximate the results that are obtained from UX testing with real human users. Our findings suggest that ATE produces UX estimations that are comparable to those reported by human users. We have also compared ATE with three widespread benchmark tools that are commonly used in the industry, and the results show that ATE outperforms these tools.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICST.2013.16},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICST.2013.16},
  issn            = {2159-4848},
  keywords        = {automatic testing;Linux;program testing;smart phones;software performance evaluation;advanced test environment;automatic UX test execution;UX test design;Android smartphones;objective metrics;ATE;UX testing;UX estimations;user experience-oriented performance testing automation;Conferences;Software testing;user experience;mobile applications;software testing;usability;smartphone;android},
}

@Article{Betarte2018271,
  author          = {Betarte, G and Campo, J and Gorostiaga, F and Luna, C},
  title           = {{A certified reference validation mechanism for the permission model of android}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2018},
  volume          = {10855 LNCS},
  pages           = {271--288},
  abstract        = {Android embodies security mechanisms at both OS and application level. In this platform application security is built primarily upon a system of permissions which specify restrictions on the operations a particular process can perform. The critical role of these security mechanisms makes them a prime target for (formal) verification. We present an idealized model of a reference monitor of the novel mechanisms of Android 6 (and further), where it is possible to grant permissions at run time. Using the programming language of the proof-assistant Coq we have developed a functional implementation of the reference validation mechanism and certified its correctness with respect to the specified reference monitor. Several properties concerning the permission model of Android 6 and its security mechanisms have been formally formulated and proved. Applying the program extraction mechanism provided by Coq we have also derived a certified Haskell prototype of the reference validation mechanism. {\textcopyright} 2018, Springer International Publishing AG, part of Springer Nature.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-94460-9_16},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-94460-9_16},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050340811{\&}doi=10.1007{\%}2F978-3-319-94460-9{\_}16{\&}partnerID=40{\&}md5=b58fbefc110aeea698222f3711f45797},
}

@Conference{Benli2012263,
  author          = {Benli, S and Habash, A and Herrmann, A and Loftis, T and Simmonds, D},
  title           = {{A comparative evaluation of unit testing techniques on a mobile platform}},
  booktitle       = {Proceedings of the 9th International Conference on Information Technology, ITNG 2012},
  year            = {2012},
  pages           = {263--268},
  abstract        = {Software testing is generally an expensive, ad hoc and unpredictable process. Therefore, a better understanding of and an improvement of unit testing methods may improve the overall software testing process leading to more efficient test method selection and increased fault detection accuracy. The aim of this study is evaluate Black Box and White Box unit testing methods for the Android operating system. While several investigations have looked at unit testing using Black Box and White Box techniques, our research focuses explicitly on unit testing for Android applications. Test cases were created using JUnit and the program under test was seeded with errors by an outside party. We evaluated the performance of these two test methods on the difficulty of developing test cases for each method and the effectiveness of finding software errors in a controlled environment. Our results showed benefits and challenges for both testing techniques. Inferences and implications are also presented. {\textcopyright} 2012 IEEE.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ITNG.2012.45},
  bytitledomenico = {doubt},
  doi             = {10.1109/ITNG.2012.45},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863967340{\&}doi=10.1109{\%}2FITNG.2012.45{\&}partnerID=40{\&}md5=708890fe1f4ff44ef909518089d46eec},
}

@Article{Nagwani2014111,
  author          = {Nagwani, N K and Verma, S},
  title           = {{A comparative study of bug classification algorithms}},
  journal         = {International Journal of Software Engineering and Knowledge Engineering},
  year            = {2014},
  volume          = {24},
  number          = {1},
  pages           = {111--138},
  abstract        = {The performance of ten classic algorithms to classify the software bugs for different bug repositories are compared. The algorithms included in the study are Na{\"{i}}ve Bayes, Na{\"{i}}ve Bayes Multinomial, Discriminative Multinomial Na{\"{i}}ve Bayes (DMNB), J48, Support Vector Machine, Radial Basis Function (RBF) Neural Network, Classification using Clustering, Classification using Regression, Adaptive Boosting (AdaBoost) and Bagging. These algorithms are applied on four open source bug repositories namely Android, JBoss-Seam, Mozilla and MySql. The classification is evaluated using 10-fold cross validation technique. The accuracy and F-measure parameters are compared for all of the algorithms. The concept of software bug taxonomy hierarchy is also introduced with eleven standard bug categories (classes). The comparative study also covers the effect of number of categories over performance of classifiers in terms of accuracy and F-measure. The results are produced in tabular and graphical forms. {\textcopyright} 2014 World Scientific Publishing Company.},
  annote          = {cited By 4},
  bdsk-url-1      = {http://dx.doi.org/10.1142/S0218194014500053},
  bytitledomenico = {no},
  doi             = {10.1142/S0218194014500053},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902318142{\&}doi=10.1142{\%}2FS0218194014500053{\&}partnerID=40{\&}md5=eb261288625efdc5e3df6272f175fcea},
}

@InProceedings{ISI:000357791500048,
  author          = {Ahmed, Maryam and Ibrahim, Rosziati},
  title           = {{A Comparative Study of Web Application Testing and Mobile Application Testing}},
  booktitle       = {ADVANCED COMPUTER AND COMMUNICATION ENGINEERING TECHNOLOGY},
  year            = {2015},
  editor          = {{Sulaiman, HA and Othman, MA and Othman, MFI and AbdRahim, Y and Pee, NC}},
  volume          = {315},
  series          = {Lecture Notes in Electrical Engineering},
  pages           = {491--500},
  abstract        = {Web application have gained increased acceptance over the years in
companies and organization as the world move to a global village.
Software developers have also grown interest in developing web
applications compared to stand-alone application because of the immense
benefits it offers such as ubiquity, platform dependence, low cost of
support and maintenance, better speed and performance, piracy proof etc.
As mobile application emerged in the last decade, attention has been
focused on mobile applications by organizations and businesses in order
to maximize their profits as much as possible. There has been a rapid
increase of software release in the mobile applications store. As the
growth of both web application and mobile application increase, the
question of quality assurance remains a concern. A comparative study of
software testing techniques can be performed to improve the standard of
testing of both web and mobile application. This paper therefore reviews
the similarity and difference in the testing mechanism.},
  annote          = {1st International Conference on Communication and Computer Engineering (ICOCOE), Malacca, MALAYSIA, MAY 20-21, 2014},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-07674-4_48},
  bytitledomenico = {no},
  doi             = {10.1007/978-3-319-07674-4_48},
  isbn            = {978-3-319-07674-4; 978-3-319-07673-7},
  issn            = {1876-1100},
}

@Article{DENIZ201997,
  author          = {Deniz, Gencay and Durdu, Pınar Onay},
  title           = {{A comparison of mobile form controls for different tasks}},
  journal         = {Computer Standards {\&} Interfaces},
  year            = {2019},
  volume          = {61},
  pages           = {97--106},
  issn            = {0920-5489},
  abstract        = {Web forms are the design tools that are used for gathering inputs from users in interactive applications. These forms are mainly developed for desktop applications, and transferring them directly to a mobile context did not work well most of the time. Since user experience with mobile devices is different from with desktop computers, the efficiency and accuracy of form controls (buttons, text boxes, drop-down boxes, radio buttons, etc.) in the user interface is essential. In the scope of this research, a user study was conducted to compare the efficiency, effectiveness, and user satisfaction of mobile form controls. In the user study, an experiment was set up to compare four different form controls that were frequently used in mobile web applications, considering variation by task type and size of data set, in the context of two different touch-based smartphones, one running the iOS operating system and the other running the Android operating system. The form controls in the experiment were button, radio button/switch, spinner/picker, and text field. The task types were mutually exclusive selection, non-mutually exclusive selection, and set-a-value. Set sizes were designated as either small set size for less than 5 items or large set size for more than 5 items. There were 30 participants in the study. The task performance, accuracy, and satisfaction levels of the participants, as well as their perceived and actual performances, were recorded. The results showed that the button was fastest for small-set, mutually exclusive tasks while the spinner was fastest for large sets. In addition, it was found that the radio button/switch was the most effective controller for the non-mutually exclusive tasks. Based on the results of the experiment and analysis of the existing literature, five key issues for these form controls were identified to guide application developers in mobile form design: visibility, data set size, task type, users' experience level with a system, and screen layout.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0920548917303379},
  bdsk-url-2      = {https://doi.org/10.1016/j.csi.2018.06.001},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.csi.2018.06.001},
  keywords        = {Performance with mobile form controls, Usability, User study,Mobile form controls},
  url             = {http://www.sciencedirect.com/science/article/pii/S0920548917303379},
}

@InProceedings{ISI:000380447100009,
  author          = {Vithani, Tejas and Kumar, Anand},
  title           = {{A Comprehensive Mobile Application Development and Testing Lifecycle}},
  booktitle       = {2014 IT PROFESSIONAL CONFERENCE (IT PRO)},
  year            = {2014},
  organization    = {IT PROFESSIONAL; SPOPS; IEEE COMPUTER SOC; NIST; NOBLIS},
  abstract        = {Software Development Lifecycle is crucial in Desktop or web application
development. Mobile applications are being developed for deployment in
smart phones. Looking at the rising need of mobile applications and the
associated development complexity, it is imperative to have a dedicated
framework lifecycle for mobile application -Mobile Application
Development Lifecycle (MADLC). The proposed lifecycle includes the
following phases: Identification, Design, Development, Prototyping,
Testing, Deployment and Maintenance. This lifecycle has been used for
over a year in developing Android mobile applications. This lifecycle
addresses some of the distinguishing characteristics of mobile
applications like life span, complex functionalities, fewer physical
interfaces, more number of screens for interaction, battery and memory
usage, cross platform development and maintenance. The preliminary
indicators are that this will benefit the mobile developers to follow
the development process within MADLC to build robust and optimal control
applications.
In this research, Mobile Application Development Lifecycle (MADLC) has
been proposed to bring out a formalized lifecycle procedure, which will
aid the mobile application developers in developing high-end apps. This
lifecycle includes the following phases: Identification, Design,
Development, Prototyping, Testing, Deployment and Maintenance. Lifecycle
phases in MADLC have been discussed which consists of different tasks
and activities that takes place during the process. Following MADLC in a
mobile application developed provides a preliminary indicator that this
will not only help the developers in planning their tasks well ahead,
but also, the project manager will be able to plan its Project Life
Cycle activities in a very efficient manner delivering the mobile
business solutions on time. This lifecycle also addresses some of the
distinguishing characteristics of mobile applications like life span,
complex functionalities, fewer physical interfaces, more number of
screens for interaction, battery and memory usage, cross platform
development and maintenance.
The testing component of a software development lifecycle is one that
enhances the robustness in delivering bug free applications in
production contributing and for the success of the organization. When it
comes to testing a mobile application - we face many challenges due to
various different devices, OS Versions, Services. Same codes are being
used across multiple platforms delivering the same application. The aim
of this thesis is in structuring the mobile application testing
methodology across Native, Web and Hybrid applications. Alongside, this
study will also aim to identify and overcome challenges faced during the
implementation of various functional and non-functional testing. This
will contribute in bringing up a new Mobile Application Testing Strategy
Solution. This solution will showcase the difference between various
testing strategy across Desktop and Web.
The significant challenges associated with mobile application testing
makes an impact on production of mobile application. The importance of
testing mobile application before developing it in live environment
cannot be neglected. An application with issues and bugs can hurt not
only the business but also the reputation of an organization. The
selection of the target devices and operating system platform making use
of the available stimulator/emulator and automation testing tools can
maximize the test coverage. Adoption of automation testing framework for
the mobile application testing provides an effective way and reduces the
long term testing cost. Factors such as support for applicable multiple
platforms, multiple devices script reusability and cost are some of the
factors to be considered while selection of the automation framework
tool. Adopting various types of testing and mobile application testing
strategy discussed can mitigate challenges with mobile application
testing. This research will help the organization to formalize a
strategy for testing mobile applications.},
  annote          = {IT Professional Conference (IT Pro), GAITHERSBURG, MD, MAY 22-22, 2014},
  bytitledomenico = {doubt},
}

@Conference{Amalfitano201650,
  author          = {Amalfitano, D and Amatucci, N and Fasolino, A R and Tramontana, P},
  title           = {{A conceptual framework for the comparison of fully automated GUI testing techniques}},
  booktitle       = {Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2015},
  year            = {2016},
  pages           = {50--57},
  abstract        = {Fully automated GUI testing techniques play an important role in the modern software development life cycles. These techniques are implemented by algorithms that automatically traverse the GUI by interacting with it, like robots discovering unexplored spaces. These algorithms are able to define and run test cases on the fly, while the application is in execution. Testing adequacy, performance or costs of such techniques may differ on the basis of different factors. In this paper we will propose an approach for comparing fully automated GUI testing techniques in a systematic manner. The approach is based on a generalized parametric algorithm that abstracts the key aspects of these techniques and provides a conceptual framework that can be used to define and compare different testing approaches. To validate the framework, we exploit it to compare the testing adequacy and the GUI models inferred by 9 fully automated testing techniques obtained by varying the configuration of the algorithm. The experiment is performed on a real Android application. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ASEW.2015.19},
  bytitledomenico = {no},
  doi             = {10.1109/ASEW.2015.19},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964452685{\&}doi=10.1109{\%}2FASEW.2015.19{\&}partnerID=40{\&}md5=dd7d20ce2194c68e563657642d07384e},
}

@InProceedings{ISI:000380584300038,
  author          = {Zhu, Haowen and Ye, Xiaojun and Zhang, Xiaojun and Shen, Ke},
  title           = {{A Context-aware Approach for Dynamic GUI Testing of Android Applications}},
  booktitle       = {39TH ANNUAL IEEE COMPUTERS, SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC 2015), VOL 2},
  year            = {2015},
  editor          = {{Ahamed, SI and Chang, CK and Chu, W and Crnkovic, I and Hsiung, PA and Huang, G and Yang, JW}},
  series          = {Proceedings International Computer Software and Applications Conference},
  pages           = {248--253},
  organization    = {IEEE; IEEE Comp Soc; IEEE Big Data; IEEE Cloud Comp; IPS; Korean Inst Informat Scientists {\&} Engineers; CCF; Natl Cent Univ; Natl Chung Cheng Univ; Natl Chung Hsing Univ; Feng Chia Univ; Natl Ilan Univ; Iowa State Univ Sci {\&} Technol; Marquette Univ; Natl Tsing Hua univ; Natl Taichung Univ Sci {\&} Technol; Tunghai Univ; Minist Ssci {\&} Technol; Minist Econ Affairs, R O C; Minist Educ; Unison Healthcare Grp; Inventec; Academia Sinica; Natl Appl Res Labs},
  abstract        = {In this paper, we propose an automatic GUI testing approach for Android
applications. With the goal of exploring unexecuted event handlers of
the application under test as quickly possible, our approach constructs
and maintains a dynamic GUI model of the application at run time, which
is based on extended non-deterministic labelled transition system that
records the weight of transitions between GUI states. Extracting only
part of the GUI features of the application under test, the model keeps
itself simple enough to avoid state explosion and improves the test
efficiency, but provides targeted guidance for testing event generation
at the same time. A practical probabilistic search-based event selection
algorithm is used to leverage information provided by the model,
transform weight of transitions to priority of candidate events, and
select the testing event to execute. The algorithm solves the
non-deterministic problem introduced by the approximation of the model.
Empirical evaluation on several real world applications shows that our
approach can achieve high code coverage quickly and detect bugs
efficiently.},
  annote          = {39th IEEE Annual International Computer Software and Applications Conference Workshops (COMPSAC), Taichung, TAIWAN, JUL 01-05, 2015},
  bdsk-url-1      = {http://dx.doi.org/10.1109/COMPSAC.2015.77},
  bytitledomenico = {doubt},
  doi             = {10.1109/COMPSAC.2015.77},
  isbn            = {978-1-4673-6563-5},
  issn            = {0730-3157},
}

@Article{MARIN2017352,
  author          = {Marin, Radu-Corneliu and Ciobanu, Radu-Ioan and Dobre, Ciprian and Mavromoustakis, Constandinos X and Mastorakis, George},
  title           = {{A context-aware collaborative model for smartphone energy efficiency over 5G wireless networks}},
  journal         = {Computer Networks},
  year            = {2017},
  volume          = {129},
  pages           = {352--362},
  issn            = {1389-1286},
  abstract        = {The staggering progress of mobile computing has brought forth exciting opportunities in the research community which are currently stretching beyond the limits of modern battery technologies. Although energy efficiency is of utmost importance in mobile systems, current solutions fail to take into consideration the intrinsic mobility of handhelds and are based on overusing power-hungry cellular networks for offloading into the cloud. We propose a novel collaboration model based on context-awareness and opportunistic networking in the context of 5G wireless networks which offers the possibility of offloading tasks in an opportunistic cloud based on mobile communities. We apply our solution to a real-life use-case, namely preventive patient monitoring, and show through experimental analysis based on real user traces that it maximizes power saving and minimizes overall execution time of tasks.},
  annote          = {Special Issue on 5G Wireless Networks for IoT and Body Sensors},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1389128617302554},
  bdsk-url-2      = {https://doi.org/10.1016/j.comnet.2017.06.011},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.comnet.2017.06.011},
  keywords        = {Collaborative model, Energy efficiency, Opportunistic networking, eHealth,Context-aware},
  url             = {http://www.sciencedirect.com/science/article/pii/S1389128617302554},
}

@Article{JUNIOR2019503,
  author          = {Junior, Warley and Oliveira, Eduardo and Santos, Albertinin and Dias, Kelvin},
  title           = {{A context-sensitive offloading system using machine-learning classification algorithms for mobile cloud environment}},
  journal         = {Future Generation Computer Systems},
  year            = {2019},
  volume          = {90},
  pages           = {503--520},
  issn            = {0167-739X},
  abstract        = {Computational offloading in Mobile Cloud Computing (MCC) has attracted attention due to benefits in energy saving and improved mobile application performance. Nevertheless, this technique underperforms if the offloading decision ignores contextual information. While recent studies have highlighted the use of contextual information to improve the computational offloading decision, there still remain challenges regarding the dynamic nature of the MCC environment. Most solutions design a single reasoner for the offloading decision and do not know how accurate and precise this technique is, so that when applied in real-world environments it can contribute to inaccurate decisions and consequently the low performance of the overall system. Thus, this paper proposes a Context-Sensitive Offloading System (CSOS) that takes advantage of the main machine-learning reasoning techniques and robust profiling system to provide offloading decisions with high levels of accuracy. We first evaluate the main classification algorithms under our database and the results show that JRIP and J48 classifiers achieves 95{\%} accuracy. Secondly, we develop and evaluate our system under controlled and real scenarios, where context information changes from one experiment to another. Under these conditions, CSOS makes correct decisions as well as ensuring performance gains and energy efficiency.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X17326729},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.08.026},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.future.2018.08.026},
  keywords        = {Classification algorithms, Context-sensitive, Machine-learning,Mobile cloud},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X17326729},
}

@Article{Liu20181613,
  author          = {Liu, C.-H. and Chen, P.-H.},
  title           = {{A crawling approach of hierarchical GUI model generation for android applications}},
  journal         = {Journal of Internet Technology},
  year            = {2018},
  volume          = {19},
  number          = {5},
  pages           = {1613--1623},
  abstract        = {As the number of Android applications has increased dramatically, there is a rising concern about their quality and reliability. In particular, the rich GUI interactions supported by Android should be thoroughly tested in order to ensure if the behavior of an Android application is correct. However, manually creating a GUI state model can be tedious and error-prone, especially for a nontrivial application. This paper proposes a crawler that can automatically generate the GUI state model for an Android application. Particularly, a hierarchical state model is employed to represent the intra- and interactivity GUI behavior of Android applications in order to increase the model readability. Empirical experiments were conducted to evaluate the proposed crawler and the generated model. The results show that the state model generated by the crawler has a promising coverage as compared to the model created manually. The hierarchical state model can greatly improve the model readability to ease the GUI behavior analysis and validation for Android applications. {\textcopyright} 2018 Taiwan Academic Network Management Committee. All Rights Reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.3966/160792642018091905032},
  bytitledomenico = {no},
  doi             = {10.3966/160792642018091905032},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054965821{\&}doi=10.3966{\%}2F160792642018091905032{\&}partnerID=40{\&}md5=207ebad2dc3d38f97d77531de219523d},
}

@Article{Ren2017381,
  author          = {Ren, L and Chang, R and Yin, Q and Man, Y},
  title           = {{A formal android permission model based on the B method}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10656 LNCS},
  pages           = {381--394},
  abstract        = {The rapid development of Android devices brings the increase of security requirements, especially for access control. Recently, many enhancements have been put forward towards the Android permission mechanism. However, few researches focus on the formalization and verification of security schemes. In this paper, we propose a formal Android permission model based on the B method, describing mechanism specifications and proving security properties. All model components are type checked by AtelierB, with 87{\%} (154 out of 178) of generated proof obligations proved yet. The model is fully animated and checked by ProB. The results show that all specifications are well-defined without any deadlock and invariant violation. The proposed B model is for not only security analysis, but also system animation and extension. It presents a feasible approach to specify and verify the security scheme in the embedded system, which is able to translate into executable codes and implement practical module as well. {\textcopyright} 2017, Springer International Publishing AG.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-72389-1_31},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-72389-1_31},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038114555{\&}doi=10.1007{\%}2F978-3-319-72389-1{\_}31{\&}partnerID=40{\&}md5=085babeea3f374b801b06dd2ba5e782d},
}

@Article{ISI:000441910000003,
  author          = {Bagheri, Hamid and Kang, Eunsuk and Malek, Sam and Jackson, Daniel},
  title           = {{A formal approach for detection of security flaws in the android permission system}},
  journal         = {FORMAL ASPECTS OF COMPUTING},
  year            = {2018},
  volume          = {30},
  number          = {5},
  pages           = {525--544},
  issn            = {0934-5043},
  abstract        = {The ever increasing expansion of mobile applications into nearly every
aspect of modern life, from banking to healthcare systems, is making
their security more important than ever. Modern smartphone operating
systems (OS) rely substantially on the permission-based security model
to enforce restrictions on the operations that each application can
perform. In this paper, we perform an analysis of the permission
protocol implemented in Android, a popular OS for smartphones. We
propose a formal model of the Android permission protocol in Alloy, and
describe a fully automatic analysis that identifies potential flaws in
the protocol. A study of real-world Android applications corroborates
our finding that the flaws in the Android permission protocol can have
severe security implications, in some cases allowing the attacker to
bypass the permission checks entirely.},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s00165-017-0445-z},
  bytitledomenico = {doubt},
  doi             = {10.1007/s00165-017-0445-z},
}

@InProceedings{Bracchi:2004:FMA:974044.974082,
  author          = {Bracchi, Paola and Cortellessa, Vittorio},
  title           = {{A Framework to Model and Analyze the Performability of Mobile Software Systems}},
  booktitle       = {Proceedings of the 4th International Workshop on Software and Performance},
  year            = {2004},
  series          = {WOSP '04},
  pages           = {243--248},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The early validation of non-functional requirements of software systems is becoming a very stringent concern, especially in two domains: heterogeneous computing environments and interactive systems. In the former case the issue arises from the need of effectively exploiting the resources and capabilities that those environments may provide. In the latter case non-functional attributes (such as performance, reliability and availability) are peculiar for guaranteeing high levels of quality of services to users. Mobile software systems (e.g. web connected mobile phones) embrace both domains and therefore claim for accurate nonfunctional validation since the early phases of the software development process.This paper focuses on model based analysis of the performability of mobile software systems. We introduce a general framework that encompasses performance, dependability and mobility of software systems and that supports the specification and estimate of performability measures. The framework is based on the Stochastic Activity Networks notation. We also show the viability of our approach at work on a simple network management scenario.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/974044.974082},
  bdsk-url-2      = {http://dx.doi.org/10.1145/974044.974082},
  bytitledomenico = {doubt},
  doi             = {10.1145/974044.974082},
  isbn            = {1-58113-673-0},
  keywords        = {dependability, mobile software, performability, performance,Stochastic Activity Networks},
  url             = {http://doi.acm.org/10.1145/974044.974082},
}

@InProceedings{ISI:000366592100215,
  author          = {Wang, Dong and Zhou, Ming},
  title           = {{A Framework to Test Reliability and Security of Wi-Fi Device}},
  booktitle       = {2014 15TH INTERNATIONAL CONFERENCE ON ELECTRONIC PACKAGING TECHNOLOGY (ICEPT)},
  year            = {2014},
  editor          = {{Bi, K and Tian, Z and Xu, Z}},
  pages           = {953--958},
  organization    = {IEEE Component Packaging {\&} Mfg Technol Soc; Chinese Inst Elect, Elect Mfg {\&} Packaging Technol Soc; Univ Elect Sc {\&} Technol China},
  abstract        = {Wireless LAN is increasingly common, but it has created a new security
threats because hackers do not have to connect the device via a physical
network, but just in the same wireless LAN, they can launch an attack on
the target device. Driver security is critical for mobile devices, in
order to test whether the drivers have security vulnerabilities in
design or implementation, we proposed a Fuzzing testing framework, and
for the Android mobile device's Wi-Fi driver, Perform multiple scene
tests, results show that this framework is quite effective in
confirmation of known vulnerabilities and discovery of unknown threats.},
  annote          = {15th International Conference on Electronic Packaging Technology (ICEPT), Chinese Inst Elect, Chengdu, PEOPLES R CHINA, AUG 12-15, 2014},
  bytitledomenico = {doubt},
  isbn            = {978-1-4799-4707-2},
}

@Conference{Milosevic201673,
  author          = {Milosevic, J and Malek, M and Ferrante, A},
  title           = {{A friend or a foe? Detecting malware using memory and CPU features}},
  booktitle       = {ICETE 2016 - Proceedings of the 13th International Joint Conference on e-Business and Telecommunications},
  year            = {2016},
  volume          = {4},
  pages           = {73--84},
  abstract        = {With an ever-increasing and ever more aggressive proliferation of malware, its detection is of utmost importance. However, due to the fact that IoT devices are resource-constrained, it is difficult to provide effective solutions. The main goal of this paper is the development of lightweight techniques for dynamic malware detection. For this purpose, we identify an optimized set of features to be monitored at runtime on mobile devices as well as detection algorithms that are suitable for battery-operated environments. We propose to use a minimal set of most indicative memory and CPU features reflecting malicious behavior. The performance analysis and validation of features usefulness in detecting malware have been carried out by considering the Android operating system. The results show that memory and CPU related features contain enough information to discriminate between execution traces belonging to malicious and benign applications with significant detection precision and recall. Since the proposed approach requires only a limited number of features and algorithms of low complexity, we believe that it can be used for effective malware detection, not only on mobile devices, but also on other smart elements of IoT. Copyright {\textcopyright} 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.},
  annote          = {cited By 3},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85004107371%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=9553cf6129a5e48aec99b1f9e2ea9e66},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85004107371{\&}partnerID=40{\&}md5=9553cf6129a5e48aec99b1f9e2ea9e66},
}

@Article{GUPTA201674,
  author          = {Gupta, Ujjwal and Korrapati, Spurthi and Matturu, Navyasree and Ogras, Umit Y},
  title           = {{A generic energy optimization framework for heterogeneous platforms using scaling models}},
  journal         = {Microprocessors and Microsystems},
  year            = {2016},
  volume          = {40},
  pages           = {74--87},
  issn            = {0141-9331},
  abstract        = {Mobile platforms are becoming highly heterogeneous by combining a powerful multiprocessor system-on-a-chip (MpSoC) with numerous other resources, including display, memory, power management IC, battery and wireless modems into a compact package. Furthermore, the MpSoC itself is a heterogeneous resource that integrates many processing elements such as CPU cores, GPU, video, image, and audio processors. Platform energy consumption and responsiveness are two major considerations for mobile systems, since they determine the battery life and user satisfaction, respectively. As a result, energy minimization approaches targeting mobile computing need to consider the platform at various levels of granularity. In this paper, we first present power consumption, response time, and energy consumption models for mobile platforms. Using these models, we optimize the energy consumption of baseline platforms under power, response time, and thermal constraints with and without introducing new resources. Finally, we validate the proposed framework through experiments on Qualcomm's Snapdragon 800 Mobile Development Platforms.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0141933115000885},
  bdsk-url-2      = {https://doi.org/10.1016/j.micpro.2015.06.009},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.micpro.2015.06.009},
  keywords        = {Heterogeneous architectures, Mobile platforms, MpSoC, Performance,Energy optimization},
  url             = {http://www.sciencedirect.com/science/article/pii/S0141933115000885},
}

@InProceedings{Amalfitano2011,
  author          = {Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio},
  title           = {{A GUI Crawling-Based Technique for Android Mobile Application Testing}},
  booktitle       = {2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops},
  year            = {2011},
  pages           = {252--261},
  month           = {mar},
  publisher       = {IEEE},
  abstract        = {As mobile applications become more complex, specific development tools and frameworks as well as cost effective testing techniques and tools will be essential to assure the development of secure, high-quality mobile applications. This paper addresses the problem of automatic testing of mobile applications developed for the Google Android platform, and presents a technique for rapid crash testing and regression testing of Android applications. The technique is based on a crawler that automatically builds a model of the application GUI and obtains test cases that can be automatically executed. The technique is supported by a tool for both crawling the application and generating the test cases. In the paper we present an example of using the technique and the tool for testing a real small size Android application that preliminary shows the effectiveness and usability of the proposed testing approach.},
  bdsk-url-1      = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5954416},
  bytitledomenico = {doubt},
  keywords        = {Android Testing Automation,Android mobile application testing,Androids,Crash Testing,Crawlers,GUI Crawling,GUI crawling-based technique,Google Android platform,Graphical user interfaces,Humanoid robots,Mobile communication,Regression Testing,Smart phones,Testing,automatic testing,cost effective testing techniques,development tools,mobile computing,program testing,rapid crash testing},
  shorttitle      = {Software Testing, Verification and Validation Work},
  url             = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5954416},
}

@Article{TONG201722,
  author          = {Tong, Fei and Yan, Zheng},
  title           = {{A hybrid approach of mobile malware detection in Android}},
  journal         = {Journal of Parallel and Distributed Computing},
  year            = {2017},
  volume          = {103},
  pages           = {22--31},
  issn            = {0743-7315},
  abstract        = {Android security incidents occurred frequently in recent years. This motivates us to study mobile app security, especially in Android open mobile operating system. In this paper, we propose a novel hybrid approach for mobile malware detection by adopting both dynamic analysis and static analysis. We collect execution data of sample malware and benign apps using a net{\_}link technology to generate patterns of system calls related to file and network access. Furthermore, we build up a malicious pattern set and a normal pattern set by comparing the patterns of malware and benign apps with each other. For detecting an unknown app, we use a dynamic method to collect its system calling data. We then compare them with both the malicious and normal pattern sets offline in order to judge the unknown app. Based on the test on a set of mobile malware and benign apps, we found that our approach achieves better detection success rate than some methods using either static analysis or dynamic analysis. What is more, the proposed approach is generic, which can detect different types of malware effectively. Its detection accuracy can be further improved since the pattern sets can be automatically optimized through self-learning.},
  annote          = {Special Issue on Scalable Cyber-Physical Systems},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S074373151630140X},
  bdsk-url-2      = {https://doi.org/10.1016/j.jpdc.2016.10.012},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.jpdc.2016.10.012},
  keywords        = {Malware detection, Pattern match, System call,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S074373151630140X},
}

@Article{P2019333,
  author          = {P., Vinod and Zemmari, Akka and Conti, Mauro},
  title           = {{A machine learning based approach to detect malicious android apps using discriminant system calls}},
  journal         = {Future Generation Computer Systems},
  year            = {2019},
  volume          = {94},
  pages           = {333--350},
  issn            = {0167-739X},
  abstract        = {The openness of Android framework and the enhancement of users trust have gained the attention of malware writers. The momentum of downloaded applications (app for short) from numerous app stores has stimulated the proliferation of mobile malware. Now the threat is due to the sophistication in malware being written to bypass signature-based detectors. In this paper, we investigate system calls to tackle mobile malware on Android operating system. To do so, we first employed machine learning to extract system calls. We then performed the empirical estimation of system calls derived from diverse datasets employing human interaction and random inputs. After accomplishing intensive experiments on synthesized system calls with two feature selection approach, namely Absolute Difference of Weighted System Calls (ADWSC) and Ranked System Calls using Large Population Test (RSLPT), we validated the results on five datasets. All classifiers generated in Area Under Curve of 1.0 with an accuracy exceeding 99.9{\%} suggest the appropriateness and efficacy of the proposed approach. Finally, we evaluated the effectiveness of classifier against adversarial attacks and found that the classifiers are vulnerable to data poisoning and label flipping attacks. Adversarial examples created by poisoning malware samples resulted in the significant drop of classifier performance on perturbing 12--18 prominent attributes. Moreover, we implemented class label poisoning attacks which brought down the classification accuracy by 50{\%} on altering labels of 50 malicious training instances.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X18306216},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.11.021},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.future.2018.11.021},
  keywords        = {Adversarial attacks, Adversarial machine learning, Classifier, Data poisoning, Feature selection, Machine learning,Malware detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X18306216},
}

@InProceedings{7899083,
  author          = {Liu, K and Lai, Y and Wu, C},
  title           = {{A Mechanism of Reliable and Standalone Script Generator on Android}},
  booktitle       = {2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
  year            = {2017},
  pages           = {372--374},
  abstract        = {A good automated testing tool could reduce as much as possible the manual work done by testers. In order to improve the traditional record-replay approach and reduce the effort that the testers spending on writing test scripts, we propose an approach that generates the Android application test scripts based on accessibility service without connecting to a computer. This approach simulates user input actions and replays them correctly even at the different conditions such as the internet connection is unstable when the device under test, the different resolutions on Android devices. In this paper, we describe how to generate test scripts automatically and make a comparison with existing tools for Android such as Robotium, Appium, UIAutomator, and MonkeyTalk.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSTW.2017.66},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICSTW.2017.66},
  keywords        = {program testing;smart phones;software reliability;user interfaces;script generator;Android devices;automated testing tool;record-replay approach;Android application test script generation;accessibility service;Robotium;Appium;UIAutomator;MonkeyTalk;Android user interface;Androids;Humanoid robots;Testing;Conferences;Internet;accessibility service;Appium;MonkeyTalk;Robotium;Testing;UIAutomator},
}

@InProceedings{ISI:000425267700012,
  author          = {Bangash, Abdul A and Sahar, Hareem and Beg, Mirza O},
  title           = {{A Methodology for Relating Software Structure with Energy Consumption}},
  booktitle       = {2017 IEEE 17TH INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION (SCAM)},
  year            = {2017},
  series          = {IEEE International Working Conference on Source Code Analysis and Manipulation},
  pages           = {111--120},
  organization    = {IEEE; IEEE Comp Soc; IEEE Tech Council Software Engn},
  abstract        = {With the widespread use of mobile devices relying on limited battery
power, the burden of optimizing applications for energy has shifted
towards the application developers. In their quest to develop energy
efficient applications, developers face the hurdle of measuring the
effect of software change on energy consumption. A naive solution to
this problem would be to have an exhaustive suite of test cases that are
executed upon every change to measure their effect on energy
consumption. This method is inefficient and also suffers from
environment dependent inconsistencies. A more generalized method would
be to relate software structural metrics with its energy consumption
behavior. Previous attempts to relate change in objectoriented metrics
to their effects on energy consumption have been inconclusive. We
observe that structural information is global and executed tests are
rarely comprehensive in their coverage, this approach is prone to
errors. In this paper, we present a methodology to relate software
energy consumption with software structural metrics considering the test
case execution traces. Furthermore, we demonstrate that software
structural metrics can be reliably related to energy consumption
behavior of programs using several versions of three open-source
iteratively developed android applications. We discover that by using
our approach we are able to identify strong correlations between several
software metrics and energy consumption behavior.},
  annote          = {IEEE 17th International Working Conference on Source Code Analysis and Manipulation (SCAM), Shanghai, PEOPLES R CHINA, SEP 17-18, 2017},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SCAM.2017.18},
  bytitledomenico = {yes},
  doi             = {10.1109/SCAM.2017.18},
  isbn            = {978-1-5386-3238-3},
  issn            = {1942-5430},
}

@Article{WANG2019,
  author          = {Wang, Shanshan and Chen, Zhenxiang and Yan, Qiben and Yang, Bo and Peng, Lizhi and Jia, Zhongtian},
  title           = {{A mobile malware detection method using behavior features in network traffic}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2019},
  issn            = {1084-8045},
  abstract        = {Android has become the most popular mobile platform due to its openness and flexibility. Meanwhile, it has also become the main target of massive mobile malware. This phenomenon drives a pressing need for malware detection. In this paper, we propose a lightweight framework for Android malware identification. Network traffic generated by mobile app is mirrored from the wireless access point to the server for data analysis. All data analysis and malware detection are performed on the server side, which consumes minimum resources on mobile devices without affecting the user experience. Due to the difficulty in identifying disparate malicious behaviors of malware from the network traffic, our method performs a multi-level network traffic analysis, gathering as many features of network traffic as necessary. The proposed method combines network traffic analysis with machine learning algorithm (C4.5) that is capable of identifying Android malware with high accuracy. In an evaluation with 8312 benign apps and 5560 malware samples, our method performs better than other state-of-the-art approaches, and especially when combining two detection mechanisms, it achieves a detection rate of 97.89{\%}. In addition, for the benefit of user, this framework not only displays the final detection results, but also analyzes the behind-the-curtain reason of malicious results. The result explanation also reveals insightful behavioral characteristics of mobile malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804518304028},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2018.12.014},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jnca.2018.12.014},
  keywords        = {Machine learning, Network traffic,Android malware detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804518304028},
}

@Article{CHO201879,
  author          = {Cho, Hwayoung and Yen, Po-Yin and Dowding, Dawn and Merrill, Jacqueline A and Schnall, Rebecca},
  title           = {{A multi-level usability evaluation of mobile health applications: A case study}},
  journal         = {Journal of Biomedical Informatics},
  year            = {2018},
  volume          = {86},
  pages           = {79--89},
  issn            = {1532-0464},
  abstract        = {Objective
To report a methodological approach for the development of a usable mHealth application (app).
Materials and methods
This work was guided by a 3-level stratified view of health information technology (IT) usability evaluation framework. We first describe a number of methodologies for operationalizing each level of the framework. Following the description of each methodology, we present a case study which illustrates the use of our preferred methodologies for the development of a mHealth app. At level 1 (user-task), we applied a card sorting technique to guide the information architecture of a mobile HIV symptom self-management app, entitled mVIP. At level 2 (user-task-system), we conducted a usability evaluation of mVIP in a laboratory setting through end-user usability testing and heuristic evaluation with informatics experts. At level 3 (user-task-system-environment), usability of mVIP was evaluated in a real-world setting following the use of the app during a 3-month trial.
Results
The 3-level usability evaluation guided our work exploring in-depth interactions between the user, task, system, and environment. Integral to the findings from the 3-level usability evaluation, we iteratively refined the app's content, functionality, and interface to meet the needs of our intended end-users.
Discussion and conclusion
The stratified view of the health IT usability evaluation framework is a useful methodological approach for the design, development, and evaluation of mHealth apps. The methodological recommendations for using the theoretical framework can inform future usability studies of mHealth apps.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1532046418301679},
  bdsk-url-2      = {https://doi.org/10.1016/j.jbi.2018.08.012},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jbi.2018.08.012},
  keywords        = {Case study, Health information technology, Information systems, Mobile Health, Usability evaluation,Mobile applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S1532046418301679},
}

@Conference{Ghorbanzadeh2013740,
  author          = {Ghorbanzadeh, M and Chen, Y and Ma, Z and Clancy, T C and McGwier, R},
  title           = {{A neural network approach to category validation of Android applications}},
  booktitle       = {2013 International Conference on Computing, Networking and Communications, ICNC 2013},
  year            = {2013},
  pages           = {740--744},
  abstract        = {Permission structure of Android applications introduces security vulnerabilities which can be readily exploited by third-party applications. We address certain exploitability aspects by means of neural networks, effective classification techniques capable of verifying the application categories. We devise a novel methodology to verify an application category by machine-learning the application permissions and estimating likelihoods of the extant categories. The performance of our classifier is optimized through the joint minimization of false positive and negative rates. Applying our modus operandi to 1,700 popular third-party Android applications and malwares, a major portion of the category declarations were judged truthfully. This manifests effectiveness of neural network decision engines in validating Android application categories. {\textcopyright} 2013 IEEE.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICCNC.2013.6504180},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICCNC.2013.6504180},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877593348{\&}doi=10.1109{\%}2FICCNC.2013.6504180{\&}partnerID=40{\&}md5=f907aa260f493dc74be739acdc1da3d3},
}

@Article{ALMIN2015407,
  author          = {Almin, Shaikh Bushra and Chatterjee, Madhumita},
  title           = {{A Novel Approach to Detect Android Malware}},
  journal         = {Procedia Computer Science},
  year            = {2015},
  volume          = {45},
  pages           = {407--417},
  issn            = {1877-0509},
  abstract        = {Android is the world's most popular and the largest installed base of any mobile platform. It has gained huge popularity among Smartphones and is growing very fast because it gives its users a world class platform for creating apps and games and allows them to be distributed instantly. Secondly, it also offers ample free third party applications to be downloaded and installed from Google Play, the premier marketplace for selling and distributing Android apps. Android openness has made it a favourite for users and developers alike. Many apps are getting downloaded by the user from play store every month. However due to this, the number of harmful apps in the form of malwares getting downloaded are also increasing. These malwares performs the various activities behind the scene, such as stealing various sensitive information of the users and signing up victims to subscription services. As a result of this, users are getting affected and their privacy gets compromised. As developers are also free to develop and publish their own creation in a play store without undergoing any scrutiny of their apps, they tend to take the advantage of user's inability to analyze the risk of such apps. This paper proposes a system which would help the users in analysing and removing such harmful apps and thereby protecting their security and privacy. This is achieved by analysing the various permissions used by an application that it has requested during installation. The overall process of analysing apps is done using clustering and classification techniques. The major objective of the proposed system is to detect and remove the malwares that are present in the user's Android device.},
  annote          = {International Conference on Advanced Computing Technologies and Applications (ICACTA)},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050915004135},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2015.03.170},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.procs.2015.03.170},
  keywords        = {App/s, Benign., Cluster, Malicious, Malware, Permissions,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050915004135},
}

@Article{VIDAL2018198,
  author          = {Vidal, Jorge Maestre and Monge, Marco Antonio Sotelo and Villalba, Luis Javier Garc{\'{i}}a},
  title           = {{A novel pattern recognition system for detecting Android malware by analyzing suspicious boot sequences}},
  journal         = {Knowledge-Based Systems},
  year            = {2018},
  volume          = {150},
  pages           = {198--217},
  issn            = {0950-7051},
  abstract        = {This paper introduces a malware detection system for smartphones based on studying the dynamic behavior of suspicious applications. The main goal is to prevent the installation of the malicious software on the victim systems. The approach focuses on identifying malware addressed against the Android platform. For that purpose, only the system calls performed during the boot process of the recently installed applications are studied. Thereby the amount of information to be considered is reduced, since only activities related with their initialization are taken into account. The proposal defines a pattern recognition system with three processing layers: monitoring, analysis and decision-making. First, in order to extract the sequences of system calls, the potentially compromised applications are executed on a safe and isolated environment. Then the analysis step generates the metrics required for decision-making. This level combines sequence alignment algorithms with bagging, which allow scoring the similarity between the extracted sequences considering their regions of greatest resemblance. At the decision-making stage, the Wilcoxon signed-rank test is implemented, which determines if the new software is labeled as legitimate or malicious. The proposal has been tested in different experiments that include an in-depth study of a particular use case, and the evaluation of its effectiveness when analyzing samples of well-known public datasets. Promising experimental results have been shown, hence demonstrating that the approach is a good complement to the strategies of the bibliography.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0950705118301424},
  bdsk-url-2      = {https://doi.org/10.1016/j.knosys.2018.03.018},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.knosys.2018.03.018},
  keywords        = {Intrusion detection, Malware, Mobile devices, Pattern recognition, Sequence alignment,Anomalies},
  url             = {http://www.sciencedirect.com/science/article/pii/S0950705118301424},
}

@Article{ISI:000429229200003,
  author          = {Ouaguid, Abdellah and Abghour, Noreddine and Ouzzif, Mohammed},
  title           = {{A Novel Security Framework for Managing Android Permissions Using Blockchain Technology}},
  journal         = {INTERNATIONAL JOURNAL OF CLOUD APPLICATIONS AND COMPUTING},
  year            = {2018},
  volume          = {8},
  number          = {1},
  pages           = {55--79},
  issn            = {2156-1834},
  abstract        = {This article presents a new framework named ANDROSCANREG (Android
Permissions Scan Registry) that allows to extract and analyze the
requested permissions in an Android application via a decentralized and
distributed system. This framework is based on the emerging technology
Blockchain whose potential is approved in the matter of transparency,
reliability, security and availability without resorting to a central
processing unit judged of trust. ANDROSCANREG consists of two
Blockchains, the first one (PERMBC) will handle analysis, validation and
preparation of the raw results so that they will persist in the second
Blockchain of Bitcoin already existing (BTCBC), which will assume the
role of a Registry of recovered permissions and will save the
permissions history of each version of the applications being scanned
via financial transactions, whose wallet source, recipient wallet and
transaction value have a precise meaning. An example of a simulation
will be presented to describe the different steps, actors, interactions
and messages generated by the different entity of ANDROSCANREG.},
  bdsk-url-1      = {http://dx.doi.org/10.4018/IJCAC.2018010103},
  bytitledomenico = {doubt},
  doi             = {10.4018/IJCAC.2018010103},
}

@Article{Geneiatakis2015192,
  author          = {Geneiatakis, D and Fovino, I N and Kounelis, I and Stirparo, P},
  title           = {{A Permission verification approach for android mobile applications}},
  journal         = {Computers and Security},
  year            = {2015},
  volume          = {49},
  pages           = {192--205},
  abstract        = {Mobile applications build part of their security and privacy on a declarative permission model. In this approach mobile applications, to get access to sensitive resources, have to define the corresponding permissions in a manifest. However, mobile applications may request access to permissions that they do not require for their execution (over-privileges) and offer opportunities to malicious software to gain access to otherwise inaccessible resources. In this paper, we investigate on the declarative permissions model on which security and privacy services of Android rely upon. We propose a practical and efficient permission certification technique, in the direction of risk management assessment. We combine both runtime information and static analysis to profile mobile applications and identify if they are over-privileged or follow the least privilege principle. We demonstrate a transparent solution that neither requires modification to the underlying framework, nor access to the applications' original source code. We assess the effectiveness of our approach, using a randomly selected varied set of mobile applications. Results show that our approach can accurately identify whether an application is over-privileged or not, whilst at the same time guaranteeing the need of declaring specific permissions in the manifest. {\textcopyright}2014 Elsevier Ltd. All rights reserved.},
  annote          = {cited By 26},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.cose.2014.10.005},
  bytitledomenico = {yes},
  doi             = {10.1016/j.cose.2014.10.005},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923259697{\&}doi=10.1016{\%}2Fj.cose.2014.10.005{\&}partnerID=40{\&}md5=ffc4e7d1bc2bf3ca54824c06f4b79719},
}

@InProceedings{ISI:000382964400194,
  author          = {Wang, Pang-Chieh and Chen, Jun-Yu and Yang, Shu-Fen},
  title           = {{A practical approach to manage applications and prevent malware spreading in mobile environment}},
  booktitle       = {2014 IEEE 3rd Global Conference on Consumer Electronics (GCCE)},
  year            = {2014},
  pages           = {549--550},
  organization    = {IEEE},
  abstract        = {In this paper, we propose an App Quick Sieve/Verify Scheme (AQSVS) to improve the App safety/quality verification issue in the third-party or enterprise app market place. The concerns related to app store safety are of paramount interest as and an increasing number of malware and defective apps caused by Android fragmentation. The AQSVS based on the use of App package information and TF/IDF inverted index table to quick classify whether the app is a new app, an updated app or a repackaged app with a similarity scoring module and a testing engine to determine the app can be published or not. This solution improves the efficiency of the app testing process which is blocking the repackaged apps and apps with defects inside to publish in an app store.},
  annote          = {From Duplicate 1 (A Practical Approach to Manage Applications and Prevent Malware Spreading in Mobile Environment - Wang, Pang-Chieh; Chen, Jun-Yu; Yang, Shu-Fen) 3rd IEEE Global Conference on Consumer Electronics (GCCE), Tokyo, JAPAN, OCT 07-10, 2014},
  bdsk-url-1      = {http://dx.doi.org/10.1109/GCCE.2014.7031216},
  bytitledomenico = {doubt},
  doi             = {10.1109/GCCE.2014.7031216},
  issn            = {2378-8143},
  keywords        = {,APK,AQSVS,Android fragmentation,Databases,Engines,Google,Malware,Mobile,Mobile communication,Safety,TF/IDF inverted index table,Testing,app package information,app quick sieve/verify scheme,app safety-quality verification issue,app testing process,application management,formal verification,invasive software,malware,malware prevention,mobile computing,program testing,similarity scoring module,term frequency-inverse document frequency,testing engine},
}

@Article{PALUMBO2017689,
  author          = {Palumbo, Paolo and Sayfullina, Luiza and Komashinskiy, Dmitriy and Eirola, Emil and Karhunen, Juha},
  title           = {{A pragmatic android malware detection procedure}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {70},
  pages           = {689--701},
  issn            = {0167-4048},
  abstract        = {The academic security research community has studied the Android malware detection problem extensively. Machine learning methods proposed in previous work typically achieve high reported detection performance on fixed datasets. Some of them also report reasonably fast prediction times. However, most of them are not suitable for real-world deployment because requirements for malware detection go beyond these figures of merit. In this paper, we introduce several important requirements for deploying Android malware detection systems in the real world. One such requirement is that candidate approaches should be tested against a stream of continuously evolving data. Such streams of evolving data represent the continuous flow of unknown file objects received for categorization, and provide more reliable and realistic estimate of detection performance once deployed in a production environment. As a case study we designed and implemented an ensemble approach for automatic Android malware detection that meets the real-world requirements we identified. Atomic Naive Bayes classifiers used as inputs for the Support Vector Machine ensemble are based on different APK feature categories, providing fast speed and additional reliability against the attackers due to diversification. Our case study with several malware families showed that different families are detected by different atomic classifiers. To the best of our knowledge, our work contains the first publicly available results generated against evolving data streams of nearly 1 million samples with a model trained over a massive sample set of 120,000 samples.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817301542},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.07.013},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2017.07.013},
  keywords        = {Classification, Ensemble learning, Feature selection, Machine learning, Malware detection, Static analysis,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817301542},
}

@Article{TUYSUZ2019107,
  author          = {Tuysuz, Mehmet Fatih and Ucan, Murat and Trestian, Ramona},
  title           = {{A real-time power monitoring and energy-efficient network/interface selection tool for android smartphones}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2019},
  volume          = {127},
  pages           = {107--121},
  issn            = {1084-8045},
  abstract        = {Energy efficiency in wireless and cellular networks has become one of the most important concerns for both academia and industry due to battery dependence of mobile devices. In this regard, Wireless Network Interface Cards (WNICs) of mobile devices have to be taken into account carefully as they consume an important chunk of the system's total energy. In this paper, we propose a real-time network power consumption profiler and an energy-aware network/interface selection tool for Android-based smartphones. The tool has been freely released on the Android Play Store. The proposed solution reports the power consumption levels of different network interfaces (Wi-Fi and Cellular) by making use of actual packet measurements and precise computations, and enables the devices to handover horizontally/vertically in order to improve the energy efficiency. In this context, widespread analyses have been executed to show the accuracy of the proposed tool. The results demonstrate that the proposed tool is very accurate for any type of IEEE 802.11 wireless or cellular stations, regardless of having different amount of channel utilization, transmission rates, signal strengths or traffic types.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804518303813},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2018.11.013},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jnca.2018.11.013},
  keywords        = {Android, Wireless {\&} cellular networks,Energy-efficient network/interface selection},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804518303813},
}

@Article{AHMAD201542,
  author          = {Ahmad, Raja Wasim and Gani, Abdullah and Hamid, Siti Hafizah Ab. and Xia, Feng and Shiraz, Muhammad},
  title           = {{A Review on mobile application energy profiling: Taxonomy, state-of-the-art, and open research issues}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2015},
  volume          = {58},
  pages           = {42--59},
  issn            = {1084-8045},
  abstract        = {The shift of the information access paradigm to a mobile platform motivates research in mobile application energy profiling to augment device battery lifetime. Energy profiling schemes estimate mobile application power consumption when it is executed on resource-constrained mobile devices. Accurate power estimation helps identify rogue applications to optimize mobile battery power usage. The lack of a comprehensive survey on mobile application energy profiling schemes that covers various energy profiling aspects, such as profiling granularity, types, measurement resources, and model flexibility, has motivated us to review the existing literature comprehensively. Application energy profiling schemes exploit either hardware-equipment or software-based solutions to track battery-draining behavior during application execution in mobile devices. This study comprehensively reviews state-of-the-art mobile application energy profiling schemes to investigate the strengths and weaknesses of existing schemes. We propose a detailed thematic taxonomy based on the extensive literature review on mobile application energy profiling to classify the existing literature. The critical aspects and related features of existing energy profiling schemes are examined through an exhaustive qualitative analysis. The significant parameters from the reported literature are also extracted to investigate commonalities and differences among existing schemes. Finally, several research issues in mobile application energy profiling are put forward that should be addressed to increase energy profiling strength.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804515002088},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2015.09.002},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jnca.2015.09.002},
  keywords        = {Context-aware, Energy estimation, Rich mobile applications,Energy profiling},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804515002088},
}

@Article{Hui20162349,
  author          = {Hui, Z.-W. and Huang, S and Ji, M.-Y.},
  title           = {{A runtime-testing method for integer overflow detection based on metamorphic relations}},
  journal         = {Journal of Intelligent and Fuzzy Systems},
  year            = {2016},
  volume          = {31},
  number          = {4},
  pages           = {2349--2361},
  abstract        = {Integer overflow is one of the most dangerous defects for programs. Many kinds of static analysis techniques and dynamic test methods have been provided to detect it, not only for programs with source code but also with binary code. One of the most important problems which restrict their effectiveness is the test oracle problem. Especially for scientific computing programs and other complex programs integer overflow detection, it is not an easy work because there is often no test oracle to indicate whether it is an integer overflow error, unless the program throws an exception or leads to crash. And more important, in most cases, the program will be an undistinguished performance, when an integer overflow happens. Thus, integer overflows cannot be detected as soon as possible. To help address the problem, this paper proposes a technique in which metamorphic relations are plugged in the program for runtime-testing integer overflows. In order to illustrate the feasibility and evaluate the effectiveness of our method, two case studies are introduced. The results show that, metamorphic relations cannot only alleviate the oracle problem, but can also be used to detect integer overflow effectively, which will prevent the inducing sink accidents. Our method will also be helpful to other kinds of fault detection. {\textcopyright} 2016 - IOS Press and the authors.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.3233/JIFS-169076},
  bytitledomenico = {doubt},
  doi             = {10.3233/JIFS-169076},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84987646031{\&}doi=10.3233{\%}2FJIFS-169076{\&}partnerID=40{\&}md5=31b02d623a0b6d7f294775dd77eae6f2},
}

@Article{CHOI2018,
  author          = {Choi, Wontae and Kannan, Jayanthkumar and Babic, Domagoj},
  title           = {{A Scalable, Flow-and-Context-Sensitive Taint Analysis of Android Applications.}},
  journal         = {Journal of Visual Languages {\&} Computing},
  year            = {2018},
  issn            = {1045-926X},
  abstract        = {This paper focuses on scalable static analysis techniques for finding information leaks in Android apps. Finding such leaks scalably is challenging because Android apps have on average over 100 invocations of sensitive APIs, yielding a massive multi-source taint analysis problem. We present the design of STAR, a context-sensitive and flow-sensitive multi-source taint analysis aimed at tackling this problem. STAR incorporates two main ideas to achieve high performance and scalability. The first is a novel summarization technique we refer to as symbolic summarization, which is crucial for the analysis to scale well with the number of source APIs. The second is a combination of techniques aimed at efficient propagation of abstract states both within and across method boundaries. Our experiments over a dataset composed of 400,000 apps show that the proposed techniques improve performance over an IFDS-style analysis by a factor of 30 on average, and by up to four orders of magnitude on large apps.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1045926X18302064},
  bdsk-url-2      = {https://doi.org/10.1016/j.jvlc.2018.10.005},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jvlc.2018.10.005},
  keywords        = {scalability, summarization, taint analysis,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S1045926X18302064},
}

@Article{HUSSAIN2018191,
  author          = {Hussain, Muzammil and Al-Haiqi, Ahmed and Zaidan, A A and Zaidan, B B and Kiah, M and Iqbal, Salman and Iqbal, S and Abdulnabi, Mohamed},
  title           = {{A security framework for mHealth apps on Android platform}},
  journal         = {Computers {\&} Security},
  year            = {2018},
  volume          = {75},
  pages           = {191--217},
  issn            = {0167-4048},
  abstract        = {Mobile Health (mHealth) applications are readily accessible to the average users of mobile devices, and despite the potential of mHealth applications to improve the availability, affordability and effectiveness of delivering healthcare services, they handle sensitive medical data, and as such, have also the potential to carry substantial risks to the security and privacy of their users. Developers of applications are usually unknown, and users are unaware of how their data are being managed and used. This is combined with the emergence of new threats due to the deficiency in mobile applications development or the design ambiguities of the current mobile operating systems. A number of mobile operating systems are available in the market, but the Android platform has gained the topmost popularity. However, Android security model is short of completely ensuring the privacy and security of users' data, including the data of mHealth applications. Despite the security mechanisms provided by Android such as permissions and sandboxing, mHealth applications are still plagued by serious privacy and security issues. These security issues need to be addressed in order to improve the acceptance of mHealth applications among users and the efficacy of mHealth applications in the healthcare systems. The focus of this research is on the security of mHealth applications, and the main objective is to propose a coherent, practical and efficient framework to improve the security of medical data associated with Android mHealth applications, as well as to protect the privacy of their users. The proposed framework provides its intended protection mainly through a set of security checks and policies that ensure protection against traditional as well as recently published threats to mHealth applications. The design of the framework comprises two layers: a Security Module Layer (SML) that implements the security-check modules, and a System Interface Layer (SIL) that interfaces SML to the Android OS. SML enforces security and privacy policies at different levels of Android platform through SIL. The proposed framework is validated via a prototypic implementation on actual Android devices to show its practicality and evaluate its performance. The framework is evaluated in terms of effectiveness and efficiency. Effectiveness is evaluated by demonstrating the performance of the framework against a selected set of attacks, while efficiency is evaluated by comparing the performance overhead in terms of energy consumption, memory and CPU utilization, with the performance of a mainline, stock version of Android. Results of the experimental evaluations showed that the proposed framework can successfully protect mHealth applications against a wide range of attacks with negligible overhead, so it is both effective and practical.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404818300798},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2018.02.003},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.cose.2018.02.003},
  keywords        = {Android platform, Android security, OS security, Privacy, mHealth, mHealth applications,Security},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404818300798},
}

@Article{DYE2014524,
  author          = {Dye, Stephen M and Scarfone, Karen},
  title           = {{A standard for developing secure mobile applications}},
  journal         = {Computer Standards {\&} Interfaces},
  year            = {2014},
  volume          = {36},
  number          = {3},
  pages           = {524--530},
  issn            = {0920-5489},
  abstract        = {The abundance of mobile software applications (apps) has created a security challenge. These apps are widely available across all platforms for little to no cost and are often created by small companies and less-experienced programmers. The lack of development standards and best practices exposes the mobile device to potential attacks. This article explores not only the practices that should be adopted by developers of all apps, but also those practices the enterprise user should demand of any app that resides on a mobile device that is employed for both business and private uses.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0920548913001268},
  bdsk-url-2      = {https://doi.org/10.1016/j.csi.2013.09.005},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.csi.2013.09.005},
  keywords        = {Application security, Cyber security, Mobile application security,Mobile device security},
  url             = {http://www.sciencedirect.com/science/article/pii/S0920548913001268},
}

@Conference{Meira2014378,
  author          = {Meira, J A and {De Almeida}, E C and Traon, Y L},
  title           = {{A state machine for database non-functional testing}},
  booktitle       = {ACM International Conference Proceeding Series},
  year            = {2014},
  pages           = {378--379},
  abstract        = {Over the last decade, large amounts of concurrent transactions have been generated from different sources, such as, Internet-based systems, mobile applications, smarthomes and cars. High-throughput transaction processing is becoming commonplace, however there is no testing technique for validating non functional aspects of DBMS under transaction flooding workloads. In this paper we propose a database state machine to represent the states of DBMS when processing concurrent transactions. The state transitions are forced by increasing concurrency of the testing workload. Preliminary results show the effectiveness of our approach to drive the system among different performance states and to find related defects. Copyright is held by the owner/authors.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2628194.2628201},
  bytitledomenico = {no},
  doi             = {10.1145/2628194.2628201},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906806357{\&}doi=10.1145{\%}2F2628194.2628201{\&}partnerID=40{\&}md5=3fdcbe0ac49b5fe18ac074983f6e150b},
}

@Article{Fang2017,
  author          = {Fang, Z and Liu, Q and Zhang, Y and Wang, K and Wang, Z and Wu, Q},
  title           = {{A static technique for detecting input validation vulnerabilities in Android apps}},
  journal         = {Science China Information Sciences},
  year            = {2017},
  volume          = {60},
  number          = {5},
  abstract        = {Input validation vulnerabilities are common in Android apps, especially in inter-component communications. Malicious attacks can exploit this kind of vulnerability to bypass Android security mechanism and compromise the integrity, confidentiality and availability of Android devices. However, so far there is not a sound approach at the source code level for app developers aiming to detect input validation vulnerabilities in Android apps. In this paper, we propose a novel approach for detecting input validation flaws in Android apps and we implement a prototype named EasyIVD, which provides practical static analysis of Java source code. EasyIVD leverages backward program slicing to extract transaction and constraint slices from Java source code. Then EasyIVD validates these slices with predefined security rules to detect vulnerabilities in a known pattern. To detect vulnerabilities in an unknown pattern, EasyIVD extracts implicit security specifications as frequent patterns from the duplicated slices and verifies them. Then EasyIVD semi-automatically confirms the suspicious rule violations and reports the confirmed ones as vulnerabilities. We evaluate EasyIVD on four versions of original Android apps spanning from version 2.2 to 5.0. It detects 58 vulnerabilities including confused deputy attacks and denial of service attacks. Our results prove that EasyIVD can provide a practical defensive solution for app developers. {\textcopyright} 2016, Science China Press and Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s11432-015-5422-7},
  bytitledomenico = {yes},
  doi             = {10.1007/s11432-015-5422-7},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988354940{\&}doi=10.1007{\%}2Fs11432-015-5422-7{\&}partnerID=40{\&}md5=3b8106736e989fe498bcc524ee89564f},
}

@Conference{Delamaro2006118,
  author          = {Delamaro, M E and Vincenzi, A M R and Maldonado, J C},
  title           = {{A strategy to perform coverage testing of mobile applications}},
  booktitle       = {Proceedings - International Conference on Software Engineering},
  year            = {2006},
  pages           = {118--124},
  abstract        = {The development of wireless application has recently received more attention due to the increment in the number and in the power of mobile devices such as PDA's and cellular phones. Different methods and techniques have been developed to ease the design and development of applications for these kind of devices. Also, different languages have been proposed to provide support for such platform, such as J2ME and Brew. On the other hand, few attention has been given to testing activity in this scenario. Some works try to test the functional aspects of a given application, others try to perform load, usability and stress testing. In this article we present a strategy to support coverage testing for mobile device software in such a way that the applications can be tested not only on emulators, but also on their real target mobile devices with the aid of structural coverage assessment. We also present an environment which supports the proposed strategy. Such environment is implemented in a tool, named JaBUTi/ME. A simple case illustrating how JaBUTi/ME can be used is also presented. Copyright 2006 ACM.},
  annote          = {cited By 16},
  bdsk-url-1      = {http://dx.doi.org/10.1145/1138929.1138952},
  bytitledomenico = {doubt},
  doi             = {10.1145/1138929.1138952},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953608408{\&}doi=10.1145{\%}2F1138929.1138952{\&}partnerID=40{\&}md5=9687fbf51615cda5d147cd13c4dac26b},
}

@Conference{Lai2015,
  author          = {Lai, G.-H. and Lee, Y.-H. and Chu, T.-H. and Cheng, T.-H.},
  title           = {{A structure similarity-based approach to malicious android app detection}},
  booktitle       = {Pacific Asia Conference on Information Systems, PACIS 2015 - Proceedings},
  year            = {2015},
  abstract        = {The advance of computational power and storage device equipped the mobile devices to involve more and more peoples' daily works, and store voluminous organization's confidential documents as well as general user's personal data. The extensibility feature of mobile device has attracted many app developers' contributions; while it in turns becomes the attacking target of the computer hackers. The F-Secure has reported that the profit-motivated threats on mobile device have been increasing; that is, an infected mobile device might send out personal or organizations' confidential data or send SMS messages to premium rate numbers without user's consent. Generally, the Android app developer can publish their apps on either official stores (i.e., Google Play) or third-party stores or both. In the Android market, the accumulated number of applications and games has been over one million. However, due to the lack of checking and validating mechanism, attackers can also distribute their malicious apps via the online store platform quickly and easily. As a result, the needs for real-time malware detection and classification become critical for Android users and official market as the number of Android apps increases sharply. In this study, we proposed the structure similarity-based malicious app detection approach to address the need of malicious Android app detection. On the basis of source code analysis, we intend to identify the sensitive features in malicious apps; that is, the API calls and system commands that related to some malicious behaviors, to build their Class- Method-API hierarchies. A new-coming app can be detected as malicious or not by assessing the structure similarity between its hierarchy and that of each malicious app. We have collected 1, 259 malwares from Android Malware Genome Project and 1, 259 benign apps from Google Play market for the evaluation purpose. We intend to implement a k-fold cross-validation and adopt VirusTotal as our performance benchmark. Overall, the proposed approach is expected to effectively and efficiently detect Android malwares and is appropriate for mobile devices because the maintenance and similarity assessment of partial hierarchies cost less space and computation resources.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011017695%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=3cebdce775fa7accc83a9ddfd8b88590},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011017695{\&}partnerID=40{\&}md5=3cebdce775fa7accc83a9ddfd8b88590},
}

@Conference{Deng2009385,
  author          = {Deng, Y and Cheng, X.-H.},
  title           = {{A study on the security technology of enterprise mobile information system}},
  booktitle       = {CIS 2009 - 2009 International Conference on Computational Intelligence and Security},
  year            = {2009},
  volume          = {2},
  pages           = {385--391},
  abstract        = {The application of enterprise mobile information system has become an irreversible tendency and trend in the world. But the present mobile system has problems such as bad security, not unified data transmission standard and so on. In view of these problems, and the characteristic of mobile network environment, the paper proposes a solution to the security of enterprise mobile information system. In this plan, technology of Single Sign-On is used to carry on the authentication of the mobile subscriber. The public key infrastructure based on PKI data encryption and the digital signature technology is employed to solve the problem of security of data transmission, integrity and the identifiability and non-repudiation between two parties and so on. The XML technology is used to solve the data transmission standard problem. Finally, this paper puts forward J2ME and Java EE 5.0 platform for the validation of the program. {\textcopyright} 2009 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CIS.2009.245},
  bytitledomenico = {no},
  doi             = {10.1109/CIS.2009.245},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949298979{\&}doi=10.1109{\%}2FCIS.2009.245{\&}partnerID=40{\&}md5=84908212b9b5d3ff68cf33f8ea7ccab3},
}

@Article{MENG201871,
  author          = {Meng, Huasong and Thing, Vrizlynn L L and Cheng, Yao and Dai, Zhongmin and Zhang, Li},
  title           = {{A survey of Android exploits in the wild}},
  journal         = {Computers {\&} Security},
  year            = {2018},
  volume          = {76},
  pages           = {71--91},
  issn            = {0167-4048},
  abstract        = {The Android operating system has been dominating the mobile device market in recent years. Although Android has actively strengthened its security mechanisms and fixed a great number of vulnerabilities as its version evolves, new vulnerabilities still keep emerging. Vulnerability exploitation is a common way to achieve privilege escalation on Android systems. In order to provide a holistic and comprehensive understanding of the exploits, we conduct a survey of publicly available 63 exploits for Android devices in this paper. Based on the analysis of the collected real-world exploits, we construct a taxonomy on Android exploitation and present the similarities/differences and strength/weakness of different types of exploits. On the other hand, we conduct an evaluation on a group of selected exploits on our test devices. Based on both the theoretical analysis and the experimental results of the evaluation, we present our insight into the Android exploitation. The growth of exploit categories along the timeline reflects three trends: (1) the individual exploits are more device specific and operating system version specific; (2) exploits targeting vendors' customization grow steadily where the increase of other types of exploits slows down; and (3) memory corruption gradually becomes the primary approach to initiate exploitation.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404818301664},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2018.02.019},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2018.02.019},
  keywords        = {Exploit, Mobile security, Privilege escalation, Survey,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404818301664},
}

@Article{Zein2016334,
  author          = {Zein, S and Salleh, N and Grundy, J},
  title           = {{A systematic mapping study of mobile application testing techniques}},
  journal         = {Journal of Systems and Software},
  year            = {2016},
  volume          = {117},
  pages           = {334--356},
  abstract        = {The importance of mobile application specific testing techniques and methods has been attracting much attention of software engineers over the past few years. This is due to the fact that mobile applications are different than traditional web and desktop applications, and more and more they are moving to being used in critical domains. Mobile applications require a different approach to application quality and dependability and require an effective testing approach to build high quality and more reliable software. We performed a systematic mapping study to categorize and to structure the research evidence that has been published in the area of mobile application testing techniques and challenges that they have reported. Seventy nine (79) empirical studies are mapped to a classification schema. Several research gaps are identified and specific key testing issues for practitioners are identified: there is a need for eliciting testing requirements early during development process; the need to conduct research in real-world development environments; specific testing techniques targeting application life-cycle conformance and mobile services testing; and comparative studies for security and usability testing. {\textcopyright} 2016 Elsevier Inc. All rights reserved.},
  annote          = {cited By 29},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.jss.2016.03.065},
  bytitledomenico = {no},
  doi             = {10.1016/j.jss.2016.03.065},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963641809{\&}doi=10.1016{\%}2Fj.jss.2016.03.065{\&}partnerID=40{\&}md5=d20e461643ccfb679c60e8ba0b0daff0},
}

@InProceedings{ISI:000375991300004,
  author          = {Mendez-Porras, Abel and {Nieto Hidalgo}, Mario and {Manuel Garcia-Chamizo}, Juan and Jenkins, Marcelo and {Martinez Porras}, Alexandra},
  title           = {{A Top-Down Design Approach for an Automated Testing Framework}},
  booktitle       = {UBIQUITOUS COMPUTING AND AMBIENT INTELLIGENCE: SENSING, PROCESSING, AND USING ENVIRONMENTAL INFORMATION},
  year            = {2015},
  editor          = {{GarciaChamizo, JM and Fortino, G and Ochoa, SF}},
  volume          = {9454},
  series          = {Lecture Notes in Computer Science},
  pages           = {37--49},
  abstract        = {Mobile applications have become popular work tools. Portability and ease
of Internet connectivity are characteristics that favor this adoption.
However, mobile applications sometimes incorrectly process events
associated with the user-interaction features. These features include
content presentation or navigation. Rotating the devices, and gestures
such as scroll or zoom into screens are some examples. There is a need
to assess the quality with which mobile applications are processing
these user-interaction features in order to improve their performance.
In this paper, we present a top-down design approach for an automated
testing framework for mobile applications. Our framework integrates
digital image processing, GUI information, and historical bug
information to identify new bugs based on user-interaction features. Our
framework captures images before and after applying the user-interaction
features and uses the SURF algorithm to identify interest points in each
image. We compared interest points to note differences on the screens
before and after applying the user-interaction features. This
differences helps to find bugs in mobile applications. The first results
show that it is feasible to identify bugs with user-interaction features
using the proposed technique.},
  annote          = {9th International Conference on Ubiquitous Computing and Ambient Intelligence (UCAmI), Puerto Varas, CHILE, DEC 01-04, 2015},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-26401-1_4},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-26401-1_4},
  isbn            = {978-3-319-26401-1; 978-3-319-26400-4},
  issn            = {0302-9743},
}

@Article{MANSAR2012839,
  author          = {Mansar, Selma Limam and Jariwala, Shashank and Shahzad, Maahd and Anggraini, Aysha and Behih, Nawal and AlZeyara, Amna},
  title           = {{A Usability Testing Experiment For A Localized Weight Loss Mobile Application}},
  journal         = {Procedia Technology},
  year            = {2012},
  volume          = {5},
  pages           = {839--848},
  issn            = {2212-0173},
  abstract        = {This paper introduces a context-appropriate mobile application for sustainable weight loss. Overweight and obesity are acknowledged to have become a worldwide health matter. Addressing weight loss and sustaining efforts remains in many ways a fragile undertaking. Strategies will vary by age group, gender, and social context. Moreover, the cultural, traditional ecosystem will impact weight loss strategies. In this paper, we discuss contributions in the literature for technology-based weight loss support. We design a mobile application that leverages three strategies from proven behaviour change theories (increasing awareness of the aims of dieting, fostering motivation and self-efficacy, and impacting dieters' attitudes). We adapt the application to the local context of a middle easterner's society by conducting a usability testing experiment with potential users of the application. We also apply principles of localization to derive an appropriate application. Beyond the applied usage of the application, the paper contributes to the currently scarce body of literature on Arabic based mobile development.},
  annote          = {4th Conference of ENTERprise Information Systems -- aligning technology, organizations and people (CENTERIS 2012)},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2212017312005245},
  bdsk-url-2      = {https://doi.org/10.1016/j.protcy.2012.09.093},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.protcy.2012.09.093},
  keywords        = {Middle East, behavior change theories, healthy life style, mobile application, mobile phones localization, mobile phones usability testing,Weight management},
  url             = {http://www.sciencedirect.com/science/article/pii/S2212017312005245},
}

@InProceedings{Long2010,
  author          = {Long, Xiang},
  title           = {{Adaptive random testing of mobile application}},
  booktitle       = {2010 2nd International Conference on Computer Engineering and Technology},
  year            = {2010},
  volume          = {2},
  pages           = {V2--297--V2--301},
  publisher       = {IEEE},
  abstract        = {Mobile applications are becoming more and more powerful yet also more complex. While mobile application users expect the application to be reliable and secure, the complexity of the mobile application makes it prone to have faults. Mobile application engineers and testers use testing technique to ensure the quality of mobile application. However, the testing of mobile application is time-consuming and hard to automate. In this paper, we model the mobile application from a black box view and propose a distance metric for the test cases of mobile software. We further proposed an ART test case generation technique for mobile application. Our experiment shows our ART tool can both reduce the number of test cases and the time needed to expose first fault when compared with random technique.},
  bdsk-url-1      = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5485442},
  bytitledomenico = {doubt},
  keywords        = {ART test case generation technique,Adaptive Random Testing,Application software,Internet,Mobile Application,Mobile computing,Performance analysis,Pervasive computing,Power engineering and energy,Reliability engineering,Software testing,Subspace constraints,System testing,Test Case Generation,automatic test pattern generation,black box view,component,mobile software,program testing,random technique,testing technique},
  shorttitle      = {Computer Engineering and Technology (ICCET), 2010},
  url             = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5485442},
}

@Article{ISI:000333631200001,
  author          = {Huang, Rubing and Chen, Jinfu and Lu, Yansheng},
  title           = {{Adaptive Random Testing with Combinatorial Input Domain}},
  journal         = {SCIENTIFIC WORLD JOURNAL},
  year            = {2014},
  issn            = {1537-744X},
  abstract        = {Random testing (RT) is a fundamental testing technique to assess
software reliability, by simply selecting test cases in a random manner
from the whole input domain. As an enhancement of RT, adaptive random
testing (ART) has better failure-detection capability and has been
widely applied in different scenarios, such as numerical programs, some
object-oriented programs, and mobile applications. However, not much
work has been done on the effectiveness of ART for the programs with
combinatorial input domain (i.e., the set of categorical data). To
extend the ideas to the testing for combinatorial input domain, we have
adopted different similarity measures that are widely used for
categorical data in data mining and have proposed two similarity
measures based on interaction coverage. Then, we propose a new version
named ART-CID as an extension of ART in combinatorial input domain,
which selects an element from categorical data as the next test case
such that it has the lowest similarity against already generated test
cases. Experimental results show that ART-CID generally performs better
than RT, with respect to different evaluation metrics.},
  bdsk-url-1      = {http://dx.doi.org/10.1155/2014/843248},
  bytitledomenico = {doubt},
  doi             = {10.1155/2014/843248},
}

@InProceedings{6895417,
  author          = {Li, A and Qin, Z and Chen, M and Liu, J},
  title           = {{ADAutomation: An Activity Diagram Based Automated GUI Testing Framework for Smartphone Applications}},
  booktitle       = {2014 Eighth International Conference on Software Security and Reliability (SERE)},
  year            = {2014},
  pages           = {68--77},
  abstract        = {Under the increasing complexity and time-to-market pressures, functional validation is becoming a major bottleneck of smartphone applications running on mobile platforms (e.g., Android, iOS). Due to the GUI (Graphical User Interface) intensive nature, the execution of smartphone applications heavily relies on the interactions with users. Manual GUI testing is extremely slow and unacceptably expensive in practice. However, the lack of formal models of user behaviors in the design phase hinders the automation of GUI testing (i.e., test case generation and test evaluation). While thorough test efforts are required to ensure the consistency between user behavior specifications and GUI implementations, few of existing testing approaches can automatically utilize the design phase information to test complex smartphone applications. Based on UML activity diagrams, this paper proposes an automated GUI testing framework called AD Automation, which supports user behavior modeling, GUI test case generation, and post-test analysis and debugging. The experiments using two industrial smartphone applications demonstrate that our approach can not only drastically reduce overall testing time, but also improve the quality of designs.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SERE.2014.20},
  bytitledomenico = {doubt},
  doi             = {10.1109/SERE.2014.20},
  keywords        = {formal specification;graphical user interfaces;program debugging;program testing;smart phones;Unified Modeling Language;ADAutomation;activity diagram based automated GUI testing framework;smartphone applications;functional validation;mobile platforms;graphical user interface;user behavior specifications;design phase information;UML activity diagrams;user behavior modeling;GUI test case generation;post-test analysis;debugging;Graphical user interfaces;Unified modeling language;Testing;Libraries;Analytical models;Semantics;Androids;GUI Testing;Activity Diagram;Smartphone Applications},
}

@Article{deLimaSalgado2017379,
  author          = {{de Lima Salgado}, A and do Amaral, L and Fortes, R P M and Chagas, M H N and Joyce, G},
  title           = {{Addressing mobile usability and elderly users: Validating contextualized heuristics}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10288 LNCS},
  pages           = {379--394},
  abstract        = {Diverse heuristic sets were proposed in order to evolve Heuristic Evaluation for new contexts, as contexts related to the elderly and mobile devices. However, heuristics for evaluation of mobile usability regarding elderly users still need aditional validations. For this reason, our study aimed to enhance the validation of a heuristic set proposed by Al-Razgan et al. for evaluation of mobile usability regarding elderly users. Results showed that the major part of heuristics proposed by Al-Razgan et al. matches with traditional heuristics of Nielsen, while a few remain valuable for evaluations in this context. Also, after validations, we found evidences that the heuristics of Al-Razgan et al. have a great coverage of usability problems of mobile applications used by the elderly, as detected from test with users. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-58634-2_28},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-58634-2_28},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025114978{\&}doi=10.1007{\%}2F978-3-319-58634-2{\_}28{\&}partnerID=40{\&}md5=45e4899b3c1540196feca6569c118fea},
}

@InProceedings{Jabbarvand:2017:AET:3098344.3098511,
  author          = {Jabbarvand, Reyhaneh},
  title           = {{Advancing Energy Testing of Mobile Applications}},
  booktitle       = {Proceedings of the 39th International Conference on Software Engineering Companion},
  year            = {2017},
  series          = {ICSE-C '17},
  pages           = {491--492},
  address         = {Piscataway, NJ, USA},
  publisher       = {IEEE Press},
  abstract        = {The rising popularity of mobile apps deployed on battery-constrained devices has motivated the need for effective energy-aware testing techniques. However, currently there is a lack of test generation tools for exercising the energy properties of apps. Automated test generation is not useful without tools that help developers to measure the quality of the tests. Additionally, the collection of tests generated for energy testing could be quite large, as it may involve a test suite that covers all the energy hotspots under different use cases. Thereby, there is a need for techniques to manage the size of test suite, while maintaining its effectiveness in revealing energy defects. Our research plan to advance energy testing for mobile applications include various techniques for energy-aware test generation, energy-aware test-suite adequacy assessment, and energy-aware test-suite minimization.},
  bdsk-url-1      = {https://doi.org/10.1109/ICSE-C.2017.45},
  bdsk-url-2      = {http://dx.doi.org/10.1109/ICSE-C.2017.45},
  bytitledomenico = {yes},
  doi             = {10.1109/ICSE-C.2017.45},
  isbn            = {978-1-5386-1589-8},
  url             = {https://doi.org/10.1109/ICSE-C.2017.45},
}

@Conference{Filho2016638,
  author          = {Filho, J F and Prata, W and Oliveira, J},
  title           = {{Affective-ready, contextual and automated usability test for mobile software}},
  booktitle       = {Proceedings of the 18th International Conference on Human-Computer Interaction with Mobile Devices and Services Adjunct, MobileHCI 2016},
  year            = {2016},
  pages           = {638--644},
  abstract        = {This work proposes the use of system to perform affective-ready, contextual and automated usability tests for mobile software. Our proposal augments the traditional methods of software usability evaluation by monitoring users' location, weather conditions, moving/stationary status, data connection availability and spontaneous facial expressions automatically. This aims to identify the moment of negative and positive events. Identifying those situations and systematically associating them to the context of interaction, assisted software creators to overcome design flaws and enhancing interfaces' strengths. The validation of our approach include post-test questionnaires with test subjects. The results indicate that the automated user-context logging can be a substantial supplement to mobile software usability tests.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2957265.2961834},
  bytitledomenico = {yes},
  doi             = {10.1145/2957265.2961834},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991101848{\&}doi=10.1145{\%}2F2957265.2961834{\&}partnerID=40{\&}md5=5e9a87881742e7320ee9ff737f6830e9},
}

@InProceedings{Amalfitano:2015:ANS:2804345.2804348,
  author          = {Amalfitano, Domenico and Amatucci, Nicola and Fasolino, Anna Rita and Tramontana, Porfirio},
  title           = {{AGRippin: A Novel Search Based Testing Technique for Android Applications}},
  booktitle       = {Proceedings of the 3rd International Workshop on Software Development Lifecycle for Mobile},
  year            = {2015},
  series          = {DeMobile 2015},
  pages           = {5--12},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Recent studies have shown a remarkable need for testing automation techniques in the context of mobile applications. The main contributions in literature in the field of testing automation regard techniques such as Capture/Replay, Model Based, Model Learning and Random techniques. Unfortunately, only the last two typologies of techniques are applicable if no previous knowledge about the application under testing is available. Random techniques are able to generate effective test suites (in terms of source code coverage) but they need a remarkable effort in terms of machine time and the tests they generate are quite inefficient due to their redundancy. Model Learning techniques generate more efficient test suites but often they do not not reach good levels of coverage. In order to generate test suites that are both effective and efficient, we propose in this paper AGRippin, a novel Search Based Testing technique founded on the combination of genetic and hill climbing techniques. We carried out a case study involving five open source Android applications that has demonstrated how the proposed technique is able to generate test suites that are more effective and efficient than the ones generated by a Model Learning technique.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2804345.2804348},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2804345.2804348},
  bytitledomenico = {doubt},
  doi             = {10.1145/2804345.2804348},
  isbn            = {978-1-4503-3815-8},
  keywords        = {Genetic Algorithms, Search Based Testing,Android},
  url             = {http://doi.acm.org/10.1145/2804345.2804348},
}

@Article{XU2019210,
  author          = {Xu, Yang and Wang, Guojun and Ren, Ju and Zhang, Yaoxue},
  title           = {{An adaptive and configurable protection framework against android privilege escalation threats}},
  journal         = {Future Generation Computer Systems},
  year            = {2019},
  volume          = {92},
  pages           = {210--224},
  issn            = {0167-739X},
  abstract        = {Android is a successful mobile platform with a thriving application ecosystem. However, despite its security precautions like permission mechanism, it is still vulnerable to privilege escalation threats and particularly confused deputy attacks that exploit the permission leak vulnerabilities of Android applications. Worse, most existing detection and protection techniques have become costly and unresponsive in current Android dynamic permission environments. In this paper, we propose a configurable Android security framework to prevent the exploitation of permission leak vulnerabilities of third-party applications via confused deputy attacks. Our framework collects the runtime states of applications and enforces policy and capability-based access control to restrain riskful inter-application communications, so as to provide more responsive, adaptive, and flexible application protection. Besides, our framework provides users with a flexible runtime policy configuration together with a complementary security mechanism to mitigate risks induced by inappropriate policies. Additionally, we present a sophisticated access decision cache system with a proactive maintenance method that ensures the efficiency and dependability of decision services. Theoretical analysis and experimental evaluation demonstrate that our approach provides configurable and effective protections for third-party applications against permission leak vulnerabilities at small performance and usability costs.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X18307775},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.09.042},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.future.2018.09.042},
  keywords        = {Capability-based access control, Configurability, Dynamic permission mechanism, Privilege escalation threat,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X18307775},
}

@InProceedings{7399807,
  author          = {Yang, Tianchang and Cui, Haoliang and Niu, Shaozhang and Zhang, Peng},
  title           = {{An analysis on sensitive data passive leakage in Android applications}},
  booktitle       = {2015 IEEE 16th International Conference on Communication Technology (ICCT)},
  year            = {2015},
  pages           = {125--131},
  abstract        = {Android smartphones store huge amount of sensitive data, and Android provides the Permission Management and the Sandbox Mechanism to protect data. However, it cannot avoid the passive leakage of sensitive data due to the defects introduced during the design and implementation phase. In this paper, we perform a systematic analysis on the passive sensitive data leakage vulnerability in Android applications, design and implement a testing tool Sensitive Data Passive Leakage Detector (DPLDetector). The tool can perform static taint propagation analysis on Android applications, based on the characteristics of the taint propagation paths, and cryptographic misuses analysis or component hijacking analysis is executed selectively. At last, test reports are generated according to the analysis result. Using SDPLDetector to analyze dozens of typical Android applications, the experimental results showed that more than 50{\%} applications were found potential sensitive data passive leakage problems.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICCT.2015.7399807},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICCT.2015.7399807},
  keywords        = {Android (operating system);security of data;smart phones;sensitive data passive leakage analysis;Android;smartphones;permission management;sandbox mechanism;sensitive data passive leakage detector;static taint propagation analysis;cryptographic misuses analysis;component hijacking analysis;Cryptography;Androids;Humanoid robots;Android;Sensitive data;Passive leakage;Taint propagation;Cryptographic misuse},
}

@Article{Verma2016618,
  author          = {Verma, S and Muttoo, S K},
  title           = {{An android malware detection framework-based on permissions and intents}},
  journal         = {Defence Science Journal},
  year            = {2016},
  volume          = {66},
  number          = {6},
  pages           = {618--623},
  abstract        = {With an exponential growth in smartphone applications targeting useful services such as banks, healthcare, m-commerce, security has become a primary concern. The applications downloaded from unofficial sources pose a security threat as they lack mechanisms for validation of the applications. The malware infected applications may lead to several threats such as leaking user's private information, enforcing malicious deductions for sending premium SMS, getting root privilege of the android system and so on. Existing anti-viruses depend on signature databases that need to be updated from time to time and are unable to detect zero-day malware. The Android Operating system allows inter-application communication through the use of component reuse by using intents. Unfortunately, message passing is also an application attack surface. A hybrid method for android malware detection by analysing the permissions and intent-filters of the manifest files of the applications is presented. A malware detection framework is developed based on machine learning algorithms and on the basis of the decision tree obtained from ID3 and J48 classifiers available in WEKA. Both algorithms gave same results with an error percentage of 6 per cent. The system improves detection of zero day malware. {\textcopyright} 2016, DESIDOC.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.14429/dsj.66.10803},
  bytitledomenico = {yes},
  doi             = {10.14429/dsj.66.10803},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994376728{\&}doi=10.14429{\%}2Fdsj.66.10803{\&}partnerID=40{\&}md5=d84c9889fe06d5fad323a3f5972d75f4},
}

@Conference{Li2016239,
  author          = {Li, X and Liu, J and Huo, Y and Zhang, R and Yao, Y},
  title           = {{An Android malware detection method based on AndroidManifest file}},
  booktitle       = {Proceedings of 2016 4th IEEE International Conference on Cloud Computing and Intelligence Systems, CCIS 2016},
  year            = {2016},
  pages           = {239--243},
  abstract        = {As one of the most developed intelligent operating systems on mobile devices, Android has taken the most part of the cell phone market. A rapid increase in the number of mobile applications make them more and more relevant to people's daily lives than ever before. Due to Android's security mechanism and the validation lack of publishing Android apps, Android malware detection still remains to be a critical issue. To solve this problem, this paper found that the statistical information of Android components (mainly activity) from the Manifest file cannot be ignored, based on the traditional method of Android permission detection. In this paper, a new feature vector is extracted from the AndroidManifest file, which combines the permission information and the component information of the Android application. We combine the naive Bias classification algorithm, and propose a malicious application detection method based on AndroidManifest file information. The experimental results show that the new method performance better than that of the traditional permission detection. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 5},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CCIS.2016.7790261},
  bytitledomenico = {yes},
  doi             = {10.1109/CCIS.2016.7790261},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011018206{\&}doi=10.1109{\%}2FCCIS.2016.7790261{\&}partnerID=40{\&}md5=76b66ac00d5df65c9094ec2b68ffaf75},
}

@InProceedings{7880477,
  author          = {Zhu, D and Li, Y and Pang, N and Feng, W},
  title           = {{An Android System Vulnerability Risk Evaluation Method for Heap Overflow}},
  booktitle       = {2016 4th International Conference on Enterprise Systems (ES)},
  year            = {2016},
  pages           = {89--96},
  month           = {nov},
  abstract        = {Android smart device has become a preferred target for attackers as it carries plenty of private and sensitive information. However, heap overflow vulnerability in Android system gives the opportunity to execute arbitrary malicious code and even steal personal privacy. The existence of such vulnerability makes Android system too weak to defense attacks and protect privacy. It's necessary to evaluate the security risk brought to the system. However, current vulnerability risk evaluation methods mainly focus on predicting the likelihood of exploiting, which is not enough and convictive for system security researcher. In this paper, we propose an Android system vulnerability risk evaluation method for heap overflow. We detect whether the heap overflow vulnerability is existent in current Android system, and then validate the exploitability by crafted input data. The evaluation result is classified into three kinds: inexistent, existent but not exploitable, existent and exploitable. Experiment results prove the effectiveness and indicate a good performance of the method.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ES.2016.18},
  bytitledomenico = {doubt},
  doi             = {10.1109/ES.2016.18},
  keywords        = {data protection;mobile computing;risk management;security of data;smart phones;Android system vulnerability risk evaluation;heap overflow vulnerability;Android smart device;malicious code execution;privacy protection;Androids;Humanoid robots;Smart phones;Registers;Security;Buffer overflows;heap overflow;privacy protection;vulnerability risk evaluation;exploitability validation},
}

@InProceedings{7106789,
  author          = {Liu, Yanmei and Lu, Yueming and Li, Yonghua},
  title           = {{An Android-based approach for automatic unit test}},
  booktitle       = {International Conference on Cyberspace Technology (CCT 2014)},
  year            = {2014},
  pages           = {1--4},
  month           = {nov},
  abstract        = {Unit test is the first stage in the V-Model and the foundation of software test. By means of integrating Android JUnit, a testing tool, into a continuous integration platform named Jenkins, this paper proposes a fully automated unit test approach. The approach can generate a visual test report for Android projects. This achievement can significantly increase the efficiency of multiple unit tests, and thus enable engineers to deliver their software products to the end users as soon as possible.},
  bdsk-url-1      = {http://dx.doi.org/10.1049/cp.2014.1290},
  bytitledomenico = {no},
  doi             = {10.1049/cp.2014.1290},
  keywords        = {Android (operating system);automatic test equipment;automatic test pattern generation;integrated software;program testing;software tools;V-model;software testing tool;Android JUnit integration;continuous integration platform;Jenkins;automated unit test approach;visual test generation;Android project;software product;android-based approach;unit test;Android;JUnit;automated;Jenkins},
}

@Article{ABUALOLA2016465,
  author          = {Abualola, Huda and Alhawai, Hessa and Kadadha, Maha and Otrok, Hadi and Mourad, Azzam},
  title           = {{An Android-based Trojan Spyware to Study the NotificationListener Service Vulnerability}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {83},
  pages           = {465--471},
  issn            = {1877-0509},
  abstract        = {Security attacks continue to emerge on daily basis due to the fast growth in the number of smart devices and mobile applications. Attacks take different malware forms such as Spyware and Trojan exploiting different operating system vulnerabilities, specially the well known vulnerable operating system; Android OS. In this paper, we study the malicious use of the ``NotificationListener'' service in Android 4.3 and 5.0. A Trojan application, known as SMS backup, is developed to spy the notifications of other applications. Such an application requires only two permissions that include ``Notification Access'' and ``Internet''. These permissions are used to extract and send user's messages of other applications to the attacker's email through Internet. Our malware is able to alter and/or delete the notification before being displayed. For experimental results, the malware was tested against notifications of WhatsApp, BBM, SMS, and Facebook messenger using different Android versions including Lollipop 5.0. Experiments show that our malware succeeded against all the tested applications running Android version 4.3. Moreover, BBM and SMS messages are still extractable in the newer version of Android (Lollipop 5.0).},
  annote          = {The 7th International Conference on Ambient Systems, Networks and Technologies (ANT 2016) / The 6th International Conference on Sustainable Energy Information Technology (SEIT-2016) / Affiliated Workshops},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916302435},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.04.210},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.procs.2016.04.210},
  keywords        = {Android, Notification, Spyware, Trojan,Mobile spy},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916302435},
}

@Article{HOLL201633,
  author          = {Holl, Konstantin and Vieira, Vaninha and Faria, Igor},
  title           = {{An Approach for Evaluating and Improving the Test Processes of Mobile Application Developments}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {94},
  pages           = {33--40},
  issn            = {1877-0509},
  abstract        = {Mobile applications have become highly pervasive in recent years. Assuring the quality of mobile applications is a highly relevant issue since application failures can lead to serious consequences, such as damage of corporate reputation or financial loss. Several obstacles exist in testing mobile applications (e.g., lack of time, absence of methods, limited budget). Our goal in this work is to investigate how we can enhance the effectiveness of testing processes applied by companies developing mobile applications. To do so, it is necessary to identify where applied industrial testing processes are actually missing in order to provide countermeasures. Our approach comprises a set of previously selected mobile testing requirements, which enable the investigation and rating of the applied testing processes based on the fulfillment of these requirements. Elicitation is done via a systematic interview of a company based on a defined questionnaire. Identified failures of selected mobile application projects are then related to the set of mobile testing requirements, and the severity of unfulfilled testing requirements is determined. Finally, we recommend to this company a set of countermeasures for unfulfilled testing requirements that may lead to crucial failures. We evaluated this approach by applying it together with eight software companies in Germany and in Brazil, followed by two surveys: one right after the interview to evaluate the acceptance of the approach, and another one after the post-processing and recommendations phase. The evaluation showed the acceptance of our approach and the expected enhancement of the effectiveness of the companies' mobile testing processes.},
  annote          = {The 11th International Conference on Future Networks and Communications (FNC 2016) / The 13th International Conference on Mobile Systems and Pervasive Computing (MobiSPC 2016) / Affiliated Workshops},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916317495},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.08.009},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.procs.2016.08.009},
  keywords        = {Industrial study, Process improvement, Requirements, Testing,Mobile applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916317495},
}

@Article{ISI:000429846000005,
  author          = {Kulesovs, Ivans and Borzovs, Juris and Susters, Aigars and Arnicane, Vineta and Arnicans, Guntis and Keiduns, Kirils and Skutelis, Janis},
  title           = {{An Approach for iOS Applications' Testing}},
  journal         = {BALTIC JOURNAL OF MODERN COMPUTING},
  year            = {2018},
  volume          = {6},
  number          = {1},
  pages           = {56--91},
  issn            = {2255-8942},
  abstract        = {The mobile conquers the world. The need in a comprehensive and
systemized multiedge testing approach is rising along with mobile apps
becoming even more complex. As a leader in enterprise market, Apple iOS
has been chosen as a target mobile platform for the study. The authors
have investigated aspects that influence functional testing of iOS apps
in particular, and mobile - in general. The study also exposes the
security capabilities and risks that often are not mitigated in favor of
time to market rush. Investigation and clustering of mobile UI test
automation tools is performed. The capabilities and limitations of Apple
UIAutomation are discovered. Solutions aimed at overcoming the
limitations of out of the box UIAutomation are united in tTap framework
developed by the authors. In conclusion an ideal cross-platform mobile
UI test automation tool is proposed.},
  bdsk-url-1      = {http://dx.doi.org/10.22364/bjmc.2018.6.1.05},
  bytitledomenico = {no},
  doi             = {10.22364/bjmc.2018.6.1.05},
}

@Conference{Guo20148,
  author          = {Guo, C and Xu, J and Yang, H and Zeng, Y and Xing, S},
  title           = {{An automated testing approach for inter-application security in android}},
  booktitle       = {9th International Workshop on Automation of Software Test, AST 2014 - Proceedings},
  year            = {2014},
  pages           = {8--14},
  abstract        = {Recently, Google Android has occupied a major market share of mobile phone systems as a result of its openness for developers and richness for users. By the distribution channels of the Android market, both development and use of Android applications soar. However, the low development threshold of applications leads to weak security awareness of developers. Moreover, Android applications lack strict security standards, resulting that security crisis has become increasingly prominent. For now, an application's biggest security threat falls on its messaging mechanism between components. Once permission's verification is neglected, it is easy to be exploited by attackers, causing immeasurable loss. We analyze the security mechanism of Android inter-application components, and accordingly construct the security rules. Specifically, a compositional approach including static and dynamic automated testing techniques is proposed to detect the security vulnerabilities caused by messaging between components. In our approach, the static part obtains rough results and some parameter information. After that, the dynamic part automatically generates attack cases for verifying these results. This approach can be used not only to discover potential weaknesses within inter-application components but also to automatically simulate attack behaviors. Thereby, the detection results' effectiveness can be verified. Copyright 2014 ACM.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2593501.2593503},
  bytitledomenico = {doubt},
  doi             = {10.1145/2593501.2593503},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84939507071{\&}doi=10.1145{\%}2F2593501.2593503{\&}partnerID=40{\&}md5=4937d4ecd2424334e119d504d419dcb8},
}

@InProceedings{ISI:000380467200158,
  author          = {Prathibhan, C Mano and Malini, A and Venkatesh, N and Sundarakantham, K},
  title           = {{An automated testing framework for testing Android mobile applications in the cloud}},
  booktitle       = {Proceedings of 2014 IEEE International Conference on Advanced Communication, Control and Computing Technologies, ICACCCT 2014},
  year            = {2014},
  pages           = {1216--1219},
  abstract        = {The testing of mobile application faces many issues due to the complexity of testing these applications and the limited resources available in mobile devices. Testing in various mobile devices under varying conditions takes a lot of time when done manually. Also by using emulators it is not possible to generate the same real time network connections and real device characteristics. There is a need for a testing framework that allows automated testing of mobile applications in many mobile devices in limited time. In this paper we propose a mobile testing framework in the cloud environment that aims to provide automated testing of mobile applications in various mobile devices. This testing framework has an automated testing tool, the Mobile Application Testing (MAT) Tool integrated to it that performs functional, performance and compatibility testing of mobile applications. {\textcopyright} 2014 IEEE.},
  annote          = {From Duplicate 2 (An automated testing framework for testing Android mobile applications in the cloud - Prathibhan, C M; Malini, A; Venkatesh, N; Sundarakantham, K) cited By 4 From Duplicate 3 (An Automated Testing Framework for Testing Android Mobile Applications in the Cloud - Prathibhan, C Mano; Malini, A; Venkatesh, N; Sundarakantham, K) International Conference on Advanced Communication Control and Computing Technologies{\{}*{\}}, Syed Ammal Eng Coll, Ramanathapuram, INDIA, MAY 08-10, 2014},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICACCCT.2014.7019292},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICACCCT.2014.7019292},
  isbn            = {978-1-4799-3914-5},
  keywords        = {,Android mobile application testing tool,Androids,Automated Testing,Cloud Testing,Humanoid robots,MAT Tool,Mobile Testing,Mobile communication,Performance evaluation,Testing,Testing as a Service,automated testing framework,cloud computing,cloud environment,mobile computing,program testing,smart phones,time network connections},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923265994{\&}doi=10.1109{\%}2FICACCCT.2014.7019292{\&}partnerID=40{\&}md5=0935c13d8c2c6934127efb2ebbea1813},
}

@Conference{Ma2016159,
  author          = {Ma, X and Wang, N and Xie, P and Zhou, J and Zhang, X and Fang, C},
  title           = {{An Automated Testing Platform for Mobile Applications}},
  booktitle       = {Proceedings - 2016 IEEE International Conference on Software Quality, Reliability and Security-Companion, QRS-C 2016},
  year            = {2016},
  pages           = {159--162},
  abstract        = {With the growing popularity and complexity of mobile apps, quality assurance becomes more and more important in mobile app development. Unfortunately, Android is also suffering from the notorious fragmentation problem. To tackle these problems, we introduce an automated testing platform, BugRocket. BugRocket combines a distributed testing system with automated testing techniques equipped on mobile devices. In this paper, we developed a toolset for automated testing, and set up such a testing platform with 40 of the most popular Android devices. An case study is conducted and the results show that BugRocket can work for functional testing and compatibility testing. Besides, BugRocket can record a failed run as long as annotated GUI model and system logs to alleviate locating bugs and bug fixing. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1109/QRS-C.2016.25},
  bytitledomenico = {yes},
  doi             = {10.1109/QRS-C.2016.25},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991785917{\&}doi=10.1109{\%}2FQRS-C.2016.25{\&}partnerID=40{\&}md5=85b687d89627f4dce78271184f2845dc},
}

@Article{Liu2018127,
  author          = {Liu, Y and Zuo, C and Zhang, Z and Guo, S and Xu, X},
  title           = {{An automatically vetting mechanism for SSL error-handling vulnerability in android hybrid Web apps}},
  journal         = {World Wide Web},
  year            = {2018},
  volume          = {21},
  number          = {1},
  pages           = {127--150},
  abstract        = {A large set of diverse hybrid mobile apps, which use both native Android app UIs and Web UIs, are widely available in today's smartphones. These hybrid apps usually use SSL or TLS to secure HTTP based communication. However, researchers show that incorrect implementation of SSL or TLS may lead to serious security problems, such as Man-In-The-Middle (MITM) attacks and phishing attacks. This paper investigates a particular SSL vulnerability that results from error-handling code in the hybrid mobile Web apps. Usually such error-handling code is used to terminate an ongoing communication, but the vulnerability of interest is able to make the communication proceed regardless of SSL certificate verification failures, eventually lead to MITM attacks. To identify those vulnerable apps, we develop a hybrid approach, which combines both static analysis and dynamic analysis to (1) automatically distinguish the native Android UIs and Web UIs, and execute the Web UIs to trigger the error-handling code; (2) accurately select the correct paths from the app entry-point to the targeted code, meanwhile avoiding the crash of apps, and populate messaging objects for the communication between components. Specifically, we construct inter-component call graphs to model the connections, and design algorithms to select the paths from the established graph and determine the parameters by backtracing. To evaluate our approach, we have implemented and tested it with 13,820 real world mobile Web apps from Google Play. The experimental results demonstrate that 1,360 apps are detected as potentially vulnerable ones solely using the static analysis. The dynamic analysis process further confirms that 711 apps are truly vulnerable among the potentially vulnerable set. {\textcopyright} 2017, Springer Science+Business Media New York.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s11280-017-0458-9},
  bytitledomenico = {doubt},
  doi             = {10.1007/s11280-017-0458-9},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019091936{\&}doi=10.1007{\%}2Fs11280-017-0458-9{\&}partnerID=40{\&}md5=7d3683f8120027e7688e870d65f07b6d},
}

@Article{Bie20161,
  author          = {Bie, Y and Bin, S and Sun, G and Zhou, X},
  title           = {{An empirical analysis of android apps bug and automated testing approach for Android apps}},
  journal         = {International Journal of Multimedia and Ubiquitous Engineering},
  year            = {2016},
  volume          = {11},
  number          = {9},
  pages           = {1--10},
  abstract        = {Android platforms and its applications (apps) have gained tremendous popularity recently, hence the reliability of Android apps is becoming increasingly important. Due to the novelty of the Android platform, apps are prone to errors, which would affect user experience and requires frequent bug fixes. In this paper, an empirical study on bugs in some widely-used open-source Android apps from diverse categories such as media, tools and communication were performed. Based on the findings of the empirical study, an approach for automating the testing process for detecting Android apps GUI bugs was presented. We show how the approach helped to re-discover existing bugs and find new bugs, and how it could be used to prevent certain bug categories. Our empirical study and automated testing approach have the potential to help developers increase the quality of Android apps. {\textcopyright} 2016 SERSC.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.14257/ijmue.2016.11.9.01},
  bytitledomenico = {doubt},
  doi             = {10.14257/ijmue.2016.11.9.01},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989324665{\&}doi=10.14257{\%}2Fijmue.2016.11.9.01{\&}partnerID=40{\&}md5=cde08c03babe9a224cc0d5919e5063ca},
}

@Article{Malhotra20161034,
  author          = {Malhotra, R},
  title           = {{An empirical framework for defect prediction using machine learning techniques with Android software}},
  journal         = {Applied Soft Computing Journal},
  year            = {2016},
  volume          = {49},
  pages           = {1034--1050},
  abstract        = {Context Software defect prediction is important for identification of defect-prone parts of a software. Defect prediction models can be developed using software metrics in combination with defect data for predicting defective classes. Various studies have been conducted to find the relationship between software metrics and defect proneness, but there are few studies that statistically determine the effectiveness of the results. Objective The main objectives of the study are (i) comparison of the machine-learning techniques using data sets obtained from popular open source software (ii) use of appropriate performance measures for measuring the performance of defect prediction models (iii) use of statistical tests for effective comparison of machine-learning techniques and (iv) validation of models over different releases of data sets. Method In this study we use object-oriented metrics for predicting defective classes using 18 machine-learning techniques. The proposed framework has been applied to seven application packages of well known, widely used Android operating system viz. Contact, MMS, Bluetooth, Email, Calendar, Gallery2 and Telephony. The results are validated using 10-fold and inter-release validation methods. The reliability and significance of the results are evaluated using statistical test and post-hoc analysis. Results The results show that the area under the curve measure for Na{\"{i}}ve Bayes, LogitBoost and Multilayer Perceptron is above 0.7 in most of the cases. The results also depict that the difference between the ML techniques is statistically significant. However, it is also proved that the Support Vector Machines based techniques such as Support Vector Machines and voted perceptron do not possess the predictive capability for predicting defects. Conclusion The results confirm the predictive capability of various ML techniques for developing defect prediction models. The results also confirm the superiority of one ML technique over the other ML techniques. Thus, the software engineers can use the results obtained from this study in the early phases of the software development for identifying defect-prone classes of given software. {\textcopyright} 2016 Elsevier B.V.},
  annote          = {cited By 14},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.asoc.2016.04.032},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.asoc.2016.04.032},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975114101{\&}doi=10.1016{\%}2Fj.asoc.2016.04.032{\&}partnerID=40{\&}md5=d78aa691aa28063782a0db204700bbb4},
}

@InProceedings{7962350,
  author          = {Linares-V{\'{a}}squez, M and Bavota, G and Escobar-Vel{\'{a}}squez, C},
  title           = {{An Empirical Study on Android-Related Vulnerabilities}},
  booktitle       = {2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},
  year            = {2017},
  pages           = {2--13},
  abstract        = {Mobile devices are used more and more in everyday life. They are our cameras, wallets, and keys. Basically, they embed most of our private information in our pocket. For this and other reasons, mobile devices, and in particular the software that runs on them, are considered first-class citizens in the software-vulnerabilities landscape. Several studies investigated the software-vulnerabilities phenomenon in the context of mobile apps and, more in general, mobile devices. Most of these studies focused on vulnerabilities that could affect mobile apps, while just few investigated vulnerabilities affecting the underlying platform on which mobile apps run: the Operating System (OS). Also, these studies have been run on a very limited set of vulnerabilities. In this paper we present the largest study at date investigating Android-related vulnerabilities, with a specific focus on the ones affecting the Android OS. In particular, we (i) define a detailed taxonomy of the types of Android-related vulnerability, (ii) investigate the layers and subsystems from the Android OS affected by vulnerabilities, and (iii) study the survivability of vulnerabilities (i.e., the number of days between the vulnerability introduction and its fixing). Our findings could help OS and apps developers in focusing their verification {\&} validation activities, and researchers in building vulnerability detection tools tailored for the mobile world.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/MSR.2017.60},
  bytitledomenico = {no},
  doi             = {10.1109/MSR.2017.60},
  keywords        = {Android (operating system);mobile computing;operating systems (computers);program verification;security of data;Android-related vulnerabilities;mobile devices;information privacy;software vulnerabilities;mobile apps;operating system;Android OS;verification activities;validation activities;vulnerability detection tools;Androids;Humanoid robots;Security;Mobile communication;Malware;Smart phones;Libraries;Android;operating system;vulnerabilities;taxonomy},
}

@Article{DZHAGARYAN2016103,
  author          = {Dzhagaryan, Armen and Milenkovi{\'{c}}, Aleksandar and Milosevic, Mladen and Jovanov, Emil},
  title           = {{An environment for automated measurement of energy consumed by mobile and embedded computing devices}},
  journal         = {Measurement},
  year            = {2016},
  volume          = {94},
  pages           = {103--118},
  issn            = {0263-2241},
  abstract        = {Mobile and embedded computing devices have become the dominant type of computing platforms. Energy-efficiency is a key requirement for these devices, underscored by growing reliance of consumers on services delivered through them and their growing complexity and sophistication. A detailed measurement-based characterization of energy consumed by applications running on mobile and embedded computing devices is important for both device manufacturers and application developers, as it may identify energy-demanding components and activities and guide optimizations. In this paper, we describe an environment for automated energy measurements of applications running on Android mobile and bare embedded computing devices. We discuss hardware and software aspects of the environment and several approaches to runtime capturing and timestamping of activities of interest. Finally, we demonstrate the use of the environment in several case studies conducted on two smartphones and a wearable device.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0263224116304407},
  bdsk-url-2      = {https://doi.org/10.1016/j.measurement.2016.07.073},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.measurement.2016.07.073},
  keywords        = {Computerized instrumentation, Current measurement, Energy measurement, Performance evaluation,Mobile computing},
  url             = {http://www.sciencedirect.com/science/article/pii/S0263224116304407},
}

@Article{KABAKUS201825,
  author          = {Kabakus, Abdullah Talha and Dogru, Ibrahim Alper},
  title           = {{An in-depth analysis of Android malware using hybrid techniques}},
  journal         = {Digital Investigation},
  year            = {2018},
  volume          = {24},
  pages           = {25--33},
  issn            = {1742-2876},
  abstract        = {Android malware is widespread despite the effort provided by Google in order to prevent it from the official application market, Play Store. Two techniques namely static and dynamic analysis are commonly used to detect malicious applications in Android ecosystem. Both of these techniques have their own advantages and disadvantages. In this paper, we propose a novel hybrid Android malware analysis approach namely mad4a which uses the advantages of both static and dynamic analysis techniques. The aim of this study is revealing some unknown characteristics of Android malware through the used various analysis techniques. As the result of static and dynamic analysis on the widely used Android application datasets, digital investigators are informed about some underestimated characteristics of Android malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287617303183},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2018.01.001},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.diin.2018.01.001},
  keywords        = {Android, Malware analysis, Mobile security, Play store,Android malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287617303183},
}

@InProceedings{ISI:000383373300026,
  author          = {Leung, Hareton K N and Lui, Kim Man},
  title           = {{An Industrial Survey and Assessment on Free Mobile Testing Tools}},
  booktitle       = {NEW TRENDS IN SOFTWARE METHODOLOGIES, TOOLS AND TECHNIQUES},
  year            = {2016},
  editor          = {{Fujita, H and Papadopoulos, GA}},
  volume          = {286},
  series          = {Frontiers in Artificial Intelligence and Applications},
  pages           = {302--311},
  abstract        = {Mobile app usage continues to increase and hence more and more small and
medium sized enterprises (SME) start their m-commerce. Unfortunately,
the importance of mobile software testing has not been equally
addressed. Our initial survey showed that mobile testing has not been
included in almost all the introductory mobile courses and many SMEs
heavily reply on manual testing on physical devices. Practitioners with
different backgrounds are learning mobile application development and
many of them may not receive any software engineering training. Thus, it
will be practical for them to learn software testing tools when studying
software testing theory. This paper surveys 42 companies and analyzes
the industrial practice on mobile application testing. Then it
categorizes and assesses twenty free/open source mobile software testing
tools. Eight tools were selected and we conducted workshops on them for
SME developers. At the end of the workshops, we interviewed the
participants to evaluate the usefulness of the testing tools in their
workplaces. We concluded that for industrial SME developers, Sikuli
(Advanced GUI testing) and JMeter (server performance testing) would be
more helpful than AT{\&}T ARO (power consumption tool) and Lookback
(Usability Testing tool). The work contributes to those SME companies
and developers which are interested in free mobile testing tools.},
  annote          = {15th International Conference on New Trends in Intelligent Software Methodology Tools, and Techniques (SoMeT), CYPRUS, SEP 13-15, 2016},
  bdsk-url-1      = {http://dx.doi.org/10.3233/978-1-61499-674-3-302},
  bytitledomenico = {no},
  doi             = {10.3233/978-1-61499-674-3-302},
  isbn            = {978-1-61499-674-3; 978-1-61499-673-6},
  issn            = {0922-6389},
}

@Article{Rehn20181,
  author          = {Rehn, A and Holdsworth, J and Hamilton, J and Tee, S},
  title           = {{An input-centric performance model for computational offloading of mobile applications}},
  journal         = {Journal of Systems and Software},
  year            = {2018},
  volume          = {138},
  pages           = {1--18},
  abstract        = {Computational offloading frameworks are a widely-researched technology for optimising mobile applications through the use of cloud resources. Existing frameworks fail to fully account for the effect of input data characteristics on application behaviour. Comprehensive timing models exist in the literature, but feature information requirements and performance overheads that preclude use on mobile devices. In this paper, we propose a conceptual model for an input-centric view of application performance. Our proposed model simplifies the existing count-and-weights and pipeline timing models to significantly reduce their information and processing requirements, facilitating use on resource-constrained mobile devices. Our proposed model also utilises symbolic execution techniques to account for the effects of application input data characteristics. Validation with both synthetic and real device datasets demonstrates that our model provides an extremely accurate approximation of the count-and-weights model. Results demonstrate the predictive power of our model for linear execution paths with no loops or recursion. Further work with improved symbolic execution techniques may look to expand application of our proposed model to real-world use cases. The proposed input-centric approach provides a promising foundation for incorporating a deeper level of application-specific knowledge into computational offloading framework cost models, with the potential to contribute to higher-quality offloading decisions. {\textcopyright} 2017 Elsevier Inc.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.jss.2017.12.010},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.jss.2017.12.010},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038911915{\&}doi=10.1016{\%}2Fj.jss.2017.12.010{\&}partnerID=40{\&}md5=0f74c6e6255785e45c0316dcc976ebbc},
}

@Article{SONG201615,
  author          = {Song, Jun and Han, Chunling and Wang, Kaixin and Zhao, Jian and Ranjan, Rajiv and Wang, Lizhe},
  title           = {{An integrated static detection and analysis framework for android}},
  journal         = {Pervasive and Mobile Computing},
  year            = {2016},
  volume          = {32},
  pages           = {15--25},
  issn            = {1574-1192},
  abstract        = {The security and privacy issues of android system have attracted a lot of attention from both industry and academia in recent years. Static detection is one typical method to analyze malicious code. However, existing single static detection method can introduce high false alarm rate and is only appropriate for a limited scope. In this paper, we propose an integrated static detection framework, which consists of four layers of filtering mechanisms, that is, the message digest (MD5) values, the combination of malicious permissions, the dangerous permissions, and the dangerous intention, respectively. An intuitive threat-degree model is proposed especially on dangerous permissions detection. Furthermore, we implement a prototype system ASE and validate its feasibility, performance and scalability. A comprehensive evaluation shows that the proposed framework has obvious advantages especially in efficiency, granularity, layers, and correctness.},
  annote          = {Mobile Security, Privacy and Forensics},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1574119216000420},
  bdsk-url-2      = {https://doi.org/10.1016/j.pmcj.2016.03.003},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.pmcj.2016.03.003},
  keywords        = {Malware detection, Static detection, Threat degree,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S1574119216000420},
}

@InProceedings{6150017,
  author          = {Song, H and Ryoo, S and Kim, J H},
  title           = {{An Integrated Test Automation Framework for Testing on Heterogeneous Mobile Platforms}},
  booktitle       = {2011 First ACIS International Symposium on Software and Network Engineering},
  year            = {2011},
  pages           = {141--145},
  abstract        = {Implementation of mobile application should be tested on the mobile platform. Since there are several mobile platforms compete in the marketplace, a lot of effort is needed to test the implementations on every platform. This research aims to develop an integrated test automation framework by which implementations on multiple heterogeneous platforms can be tested efficiently. Commonly used events in the mobile platforms are extracted and mapped into the functions of each testing framework. We extended open source test frameworks to handle the common events. By doing so, test can be performed by describing test cases in a high level without generating test code manually. The proposed integrated framework was evaluated with the implementation of several mobile applications on the Android and iPhone platforms and found that the framework is effective and valid.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SSNE.2011.15},
  bytitledomenico = {doubt},
  doi             = {10.1109/SSNE.2011.15},
  keywords        = {mobile computing;operating systems (computers);program testing;public domain software;integrated test automation framework;heterogeneous mobile platforms;mobile application;open source test frameworks;Android platforms;iPhone platforms;Testing;Mobile communication;Automation;Androids;Humanoid robots;Servers;Performance evaluation;mobile test;test automation;regression test;concurrency test},
}

@Article{Rocchetto2017463,
  author          = {Rocchetto, M and Vigan{\`{o}}, L and Volpe, M},
  title           = {{An interpolation-based method for the verification of security protocols}},
  journal         = {Journal of Computer Security},
  year            = {2017},
  volume          = {25},
  number          = {6},
  pages           = {463--510},
  abstract        = {Interpolation has been successfully applied in formal methods for model checking and test-case generation for sequential programs. Security protocols, however, exhibit idiosyncrasies that make them unsuitable for the direct application of interpolation.We address this problem and present an interpolation-based method for security protocol verification. Our method starts from a protocol specification and combines Craig interpolation, symbolic execution and the standard Dolev-Yao intruder model to search for possible attacks on the protocol. Interpolants are generated as a response to search failure in order to prune possible useless traces and speed up the exploration. We illustrate our method by means of concrete examples and discuss the results obtained by using a prototype implementation. {\textcopyright} 2017 - IOS Press and the authors. All rights reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.3233/JCS-16832},
  bytitledomenico = {no},
  doi             = {10.3233/JCS-16832},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028515298{\&}doi=10.3233{\%}2FJCS-16832{\&}partnerID=40{\&}md5=60ea1176a9de7d1004e7542ec0d1c60a},
}

@Article{Bhatnagar201830,
  author          = {Bhatnagar, S and Malik, Y and Butakov, S},
  title           = {{Analysing data security requirements of android mobile banking application}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2018},
  volume          = {11317 LNCS},
  pages           = {30--37},
  abstract        = {Mobile banking applications are at high risk of cyber attacks due to security vulnerabilities in their application design and underlying operating systems. The Inter-Process Communication mechanism in Android enables applications to communicate, share data and reuse functionality between them. However, if used incorrectly, it can become an attack surface, which allows malicious applications to exploit devices and compromise sensitive financial information. In this research, we focused on addressing the intent vulnerabilities by applying a hybrid fuzzing testing technique to analyze the data security requirements of native Android financial applications. The system first automatically constructs an application behavior model and later apply hybrid fuzzing to the model to analyze the data leak vulnerabilities. Testing results help to discover the unknown exploitable entry points in the applications under test. {\textcopyright} Springer Nature Switzerland AG 2018.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-030-03712-3_3},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-030-03712-3_3},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057862943{\&}doi=10.1007{\%}2F978-3-030-03712-3{\_}3{\&}partnerID=40{\&}md5=3a482e9093e6fe65883e67d7f217262c},
}

@Article{Argyriou2018,
  author          = {Argyriou, M and Dragoni, N and Spognardi, A},
  title           = {{Analysis and Evaluation of SafeDroid v2.0, a Framework for Detecting Malicious Android Applications}},
  journal         = {Security and Communication Networks},
  year            = {2018},
  volume          = {2018},
  abstract        = {Android smartphones have become a vital component of the daily routine of millions of people, running a plethora of applications available in the official and alternative marketplaces. Although there are many security mechanisms to scan and filter malicious applications, malware is still able to reach the devices of many end-users. In this paper, we introduce the SafeDroid v2.0 framework, that is a flexible, robust, and versatile open-source solution for statically analysing Android applications, based on machine learning techniques. The main goal of our work, besides the automated production of fully sufficient prediction and classification models in terms of maximum accuracy scores and minimum negative errors, is to offer an out-of-the-box framework that can be employed by the Android security researchers to efficiently experiment to find effective solutions: the SafeDroid v2.0 framework makes it possible to test many different combinations of machine learning classifiers, with a high degree of freedom and flexibility in the choice of features to consider, such as dataset balance and dataset selection. The framework also provides a server, for generating experiment reports, and an Android application, for the verification of the produced models in real-life scenarios. An extensive campaign of experiments is also presented to show how it is possible to efficiently find competitive solutions: the results of our experiments confirm that SafeDroid v2.0 can reach very good performances, even with highly unbalanced dataset inputs and always with a very limited overhead. {\textcopyright} 2018 Marios Argyriou et al.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1155/2018/4672072},
  bytitledomenico = {doubt},
  doi             = {10.1155/2018/4672072},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053706618{\&}doi=10.1155{\%}2F2018{\%}2F4672072{\&}partnerID=40{\&}md5=f820a87f4daac718001bd9ae236c4370},
}

@Article{SINGH2016215,
  author          = {Singh, Pooja and Tiwari, Pankaj and Singh, Santosh},
  title           = {{Analysis of Malicious Behavior of Android Apps}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {79},
  pages           = {215--220},
  issn            = {1877-0509},
  abstract        = {As increasing in number of Android phones there is simultaneous increase in mobile malware apps which performs malicious activities such as misusing user's private information as sending messages i.e. SMS, reading users contact information and can harm user by exploiting the user's confidential data which is stored in mobile. Malware are speeded not only infecting the user's data but also harming several organizations in term of stealing of private and confidential data. Hence Malware classification and identification is a critical issue. Android users are unaware about several apps which they are using whether they are malware infected or not. Android applications require the concept of permission mechanism to show that apps are using certain permissions to get access to information from your device. Android apps which are installed in the smart phones get access to all the required permission during installation of apps. Google assure their customer in terms of security about the apps which are available to download from there play store. Android operating system is open system and it allows users to install any applications downloaded from any unsafe site. However permission mechanism is still very diminutive defense mechanism to assure that the applications can harm to user. Therefore in this paper we propose the Malware characterization from manifest file and allows user to improve the efficiency of Android permission to inform user about the risk of Android permission and apps.},
  annote          = {Proceedings of International Conference on Communication, Computing and Virtualization (ICCCV) 2016},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916001599},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.03.028},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.procs.2016.03.028},
  keywords        = {maware apps, permissions,Andoid Security},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916001599},
}

@InProceedings{Huang:2016:AGR:2940353.2940356,
  author          = {Huang, Tian and Zhang, Zhenyu and Zhu, Xue-Yang},
  title           = {{Analyzing GUI Running Fluency for Android Apps}},
  booktitle       = {Proceedings of the 3rd ACM Workshop on Mobile Sensing, Computing and Communication},
  year            = {2016},
  series          = {MSCC '16},
  pages           = {16--22},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Android as a free open platform has become increasingly popular and been widespread adopted in mobile, tablet, and other devices. However, a great number of issues, such as inadequate quality and the fragmentation phenomenon, have emerged, enhancing the difficulty of developing. Among them, the running fluency of Android apps directly affects user experience directly. As a result, it is of great significance to detect and analyze it.

The frame rate and 16-ms-per-frame benchmark are the most popular metrics to evaluate and measure the smooth performance of Android application GUIs and to test the quality of apps by developers. However, very few studies have analyzed the performance and consider the adequate usage of frame rate before extensively applying it. Further, current tools provided by Google or third-party cannot obtain the frame rate and rendering time for the system with multiple applications.

In this work, we focus on the performance issue, revisit and analyze various factors that Android apps do not run smoothly, along with Android graphic system. After that, we present ARFluency --- a tool to measure and automatically analyze the system and applications without modifying the source code of the Android apps. We also conduct an experiment to validate our tool using realistic Android apps. Experimental results show that although even the apps running fluently do have problematic frames. However, the metrics of frame rate cannot accurately reflect the performance of Android applications.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2940353.2940356},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2940353.2940356},
  bytitledomenico = {doubt},
  doi             = {10.1145/2940353.2940356},
  isbn            = {978-1-4503-4343-5},
  keywords        = {FPS, performance analysis, running fluency,Android},
  url             = {http://doi.acm.org/10.1145/2940353.2940356},
}

@Article{JANG2016125,
  author          = {Jang, Jae-wook and Kang, Hyunjae and Woo, Jiyoung and Mohaisen, Aziz and Kim, Huy Kang},
  title           = {{Andro-Dumpsys: Anti-malware system based on the similarity of malware creator and malware centric information}},
  journal         = {Computers {\&} Security},
  year            = {2016},
  volume          = {58},
  pages           = {125--138},
  issn            = {0167-4048},
  abstract        = {With the fast growth in mobile technologies and the accompanied rise of the integration of such technologies into our everyday life, mobile security is viewed as one of the most prominent areas and is being addressed accordingly. For that, and especially to address the threat associated with malware, various malware-centric analysis methods are developed in the literature to identify, classify, and defend against mobile threats and malicious actors. However, along with this development, anti-malware analysis techniques, such as packing, dynamic loading, and dex encryption, have seen wide adoption, making existing malware-centric analysis methods less effective. In this paper, we propose a feature-rich hybrid anti-malware system, called Andro-Dumpsys, which leverages volatile memory acquisition for accurate malware detection and classification. Andro-Dumpsys is based on similarity matching of malware creator-centric and malware-centric information. Using Andro-Dumpsys, we detect and classify malware samples into similar behavior groups by exploiting their footprints, which are equivalent to unique behavior characteristics. Our experimental results demonstrate that Andro-Dumpsys is scalable, and performs well in detecting malware and classifying malware families with low false positives and false negatives, and is capable of responding zero-day threats.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S016740481600002X},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2015.12.005},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2015.12.005},
  keywords        = {Android, Malware creator centric information, Mobile malware, Similarity,Volatile memory acquisition},
  url             = {http://www.sciencedirect.com/science/article/pii/S016740481600002X},
}

@InProceedings{8514216,
  author          = {Kim, H M and Song, H M and Seo, J W and Kim, H K},
  title           = {{Andro-Simnet: Android Malware Family Classification using Social Network Analysis}},
  booktitle       = {2018 16th Annual Conference on Privacy, Security and Trust (PST)},
  year            = {2018},
  pages           = {1--8},
  abstract        = {While the rapid adaptation of mobile devices changes our daily life more conveniently, the threat derived from malware is also increased. There are lots of research to detect malware to protect mobile devices, but most of them adopt only signature-based malware detection method that can be easily bypassed by polymorphic and metamorphic malware. To detect malware and its variants, it is essential to adopt behavior-based detection for efficient malware classification. This paper presents a system that classifies malware by using common behavioral characteristics along with malware families. We measure the similarity between malware families with carefully chosen features commonly appeared in the same family. With the proposed similarity measure, we can classify malware by malware's attack behavior pattern and tactical characteristics. Also, we apply community detection algorithm to increase the modularity within each malware family network aggregation. To maintain high classification accuracy, we propose a process to derive the optimal weights of the selected features in the proposed similarity measure. During this process, we find out which features are significant for representing the similarity between malware samples. Finally, we provide an intuitive graph visualization of malware samples which is helpful to understand the distribution and likeness of the malware networks. In the experiment, the proposed system achieved 97{\%} accuracy for malware classification and 95{\%} accuracy for prediction by K-fold cross-validation using the real malware dataset.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/PST.2018.8514216},
  bytitledomenico = {doubt},
  doi             = {10.1109/PST.2018.8514216},
  keywords        = {Android (operating system);invasive software;mobile computing;pattern classification;social networking (online);metamorphic malware;behavior-based detection;efficient malware classification;malware family network aggregation;malware dataset;signature-based malware detection method;polymorphic malware;Android malware family classification;Andro-Simnet;social network analysis;mobile devices;malwares attack behavior pattern;tactical characteristics;high classification accuracy;graph visualization;k-fold cross-validation;Malware;Feature extraction;Classification algorithms;Detection algorithms;Social network services;Static analysis;Generators;malware similarity;machine learning;malware classification;social network analysis},
}

@Article{FEIZOLLAH2017121,
  author          = {Feizollah, Ali and Anuar, Nor Badrul and Salleh, Rosli and Suarez-Tangil, Guillermo and Furnell, Steven},
  title           = {{AndroDialysis: Analysis of Android Intent Effectiveness in Malware Detection}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {65},
  pages           = {121--134},
  issn            = {0167-4048},
  abstract        = {The wide popularity of Android systems has been accompanied by increase in the number of malware targeting these systems. This is largely due to the open nature of the Android framework that facilitates the incorporation of third-party applications running on top of any Android device. Inter-process communication is one of the most notable features of the Android framework as it allows the reuse of components across process boundaries. This mechanism is used as gateway to access different sensitive services in the Android framework. In the Android platform, this communication system is usually driven by a late runtime binding messaging object known as Intent. In this paper, we evaluate the effectiveness of Android Intents (explicit and implicit) as a distinguishing feature for identifying malicious applications. We show that Intents are semantically rich features that are able to encode the intentions of malware when compared to other well-studied features such as permissions. We also argue that this type of feature is not the ultimate solution. It should be used in conjunction with other known features. We conducted experiments using a dataset containing 7406 applications that comprise 1846 clean and 5560 infected applications. The results show detection rate of 91{\%} using Android Intent against 83{\%} using Android permission. Additionally, experiment on combination of both features results in detection rate of 95.5{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404816301602},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2016.11.007},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2016.11.007},
  keywords        = {Android, Intent, Smartphone security, Static analysis,Mobile malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404816301602},
}

@Article{SOKOLOVA201762,
  author          = {Sokolova, Karina and Perez, Charles and Lemercier, Marc},
  title           = {{Android application classification and anomaly detection with graph-based permission patterns}},
  journal         = {Decision Support Systems},
  year            = {2017},
  volume          = {93},
  pages           = {62--76},
  issn            = {0167-9236},
  abstract        = {Android is one of the mobile market leaders, offering more than a million applications on Google Play store. Google checks the application for known malware, but applications abusively collecting users' data and requiring access to sensitive services not related to functionalities are still present on the market. A permission system is a user-centric security solution against abusive applications and malware that has been unsuccessful: users are incapable of understanding and judging the permissions required by each application and often ignore on-installation warnings. State-of-the-art shows that the current permission system is inappropriate for end-users. However, Android permission lists do provide information about the application's behavior and may be suitable for automatic application analysis. Identifying key permissions for functionalities and expected permission requests can help leverage abnormal application behavior and provide a simpler risk warning for users. Applications with similar functionalities are grouped into categories on Google Play and this work therefore analyzes permission requests by category. In this study, we propose a methodology to characterize normal behavior for each category of applications, highlighting expected permission requests. The co-required permissions are modeled as a graph and the category patterns and central permissions are obtained using graph analysis metrics. The obtained patterns are evaluated by the performance of the application classification into categories that allow choosing the best graph metrics representing categories. Finally, this study proposes a privacy score and a risk warning threshold based on the best metrics. The efficiency of the proposed methodology was tested on a set of 9512 applications collected from Google Play and a set of malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167923616301555},
  bdsk-url-2      = {https://doi.org/10.1016/j.dss.2016.09.006},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.dss.2016.09.006},
  keywords        = {Anomaly detection, Classification, Graph analysis, Permission patterns, Risk warning,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167923616301555},
}

@Conference{Knych201437,
  author          = {Knych, T W and Baliga, A},
  title           = {{Android application development and testability}},
  booktitle       = {1st International Conference on Mobile Software Engineering and Systems, MOBILESoft 2014 - Proceedings},
  year            = {2014},
  pages           = {37--40},
  abstract        = {In this paper, we outline the challenges mobile development poses from a perspective of testability and application quality. We propose development and testing strategies to mitigate those challenges and discuss tools that can enable those strategies.},
  annote          = {cited By 5},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2593902.2593910},
  bytitledomenico = {doubt},
  doi             = {10.1145/2593902.2593910},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84903639304{\&}doi=10.1145{\%}2F2593902.2593910{\&}partnerID=40{\&}md5=daa1cf045d1fc9077f6d5fb1d8217864},
}

@Article{RASTOGI201626,
  author          = {Rastogi, Sajal and Bhushan, Kriti and Gupta, B B},
  title           = {{Android Applications Repackaging Detection Techniques for Smartphone Devices}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {78},
  pages           = {26--32},
  issn            = {1877-0509},
  abstract        = {The problem of malwares affecting Smartphones has been widely recognized by the researchers across the world. Majority of these malwares target Android OS. Studies have found that most of the Android malwares hide inside repackaged apps to get inside user devices. Repackaged apps are usually infected versions of popular apps. Adversaries download a popular Android app, and obtain the code using reverse engineering and then add their code (often malicious) to it and repackage and release the app. A number of techniques proposed in research and a number of commercial anti-virus products focus on detecting malwares. This is the traditional approach and requires a signature database. Zero day threats cannot be caught with such methods. There are many techniques which focus entirely on detecting repackaged apps. Since repackaged apps are in the majority among the infected Android apps, they can save the user from a large percentage of Android malwares. Detection and prevention of repackaging is also beneficial for original developer/publisher as they do not incur harm to revenue or reputation. In this paper‚ we study in detail about some of the repackaging detection techniques. Mainly, there are two kinds of techniques - offline and online. They serve different purposes. An offline technique cannot be replaced by an online technique and vice versa. Offline techniques are for direct use of app market owner, whereas online techniques are for direct use of Android users. We study different offline and online techniques. These techniques use different features and metrics to detect similarity of apps and they are representatives of their category of techniques.},
  annote          = {1st International Conference on Information Security {\&} Privacy 2015},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916000089},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.02.006},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.procs.2016.02.006},
  keywords        = {Smartphone security, app similarity, cloning, repackaging,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916000089},
}

@Article{MANSFIELDDEVINE20125,
  author          = {Mansfield-Devine, Steve},
  title           = {{Android architecture: attacking the weak points}},
  journal         = {Network Security},
  year            = {2012},
  volume          = {2012},
  number          = {10},
  pages           = {5--12},
  issn            = {1353-4858},
  abstract        = {It may not just be its popularity that has made Android a target for attackers and cyber-criminals. It's arguable that the very nature of the platform lends itself to manipulation and subversion. There are technical issues and there are problems with the ecosystem. Much of this stems from Google's desire to create a platform without rigid controls, which is attractive to many developers, app vendors and users. But that openness has also introduced weak points that are being exploited. In this second article in our series of three on Android security, Steve Mansfield-Devine looks more closely at the platform. It may not just be its popularity that has made Android a target for attackers and cyber-criminals. It's arguable that the very nature of the platform lends itself to manipulation and subversion. There are purely technical issues, such as the way communications between apps are handled. And there are problems with the ecosystem --- not least how the OS gets updated and potential issues in the future with advertising.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485812700922},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(12)70092-2},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/S1353-4858(12)70092-2},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485812700922},
}

@Article{SHEEN2015905,
  author          = {Sheen, Shina and Anitha, R and Natarajan, V},
  title           = {{Android based malware detection using a multifeature collaborative decision fusion approach}},
  journal         = {Neurocomputing},
  year            = {2015},
  volume          = {151},
  pages           = {905--912},
  issn            = {0925-2312},
  abstract        = {Smart mobile device usage has expanded at a very high rate all over the world. Since the mobile devices nowadays are used for a wide variety of application areas like personal communication, data storage and entertainment, security threats emerge, comparable to those which a conventional PC is exposed to. Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. In this work, we have considered Android based malware for analysis and a scalable detection mechanism is designed using multifeature collaborative decision fusion (MCDF). The different features of a malicious file like the permission based features and the API call based features are considered in order to provide a better detection by training an ensemble of classifiers and combining their decisions using collaborative approach based on probability theory. The performance of the proposed model is evaluated on a collection of Android based malware comprising of different malware families and the results show that our approach give a better performance than state-of-the-art ensemble schemes available.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0925231214012739},
  bdsk-url-2      = {https://doi.org/10.1016/j.neucom.2014.10.004},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.neucom.2014.10.004},
  keywords        = {Collaborative decision fusion, Malware, Multifeature,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0925231214012739},
}

@Article{He20171031,
  author          = {He, Y and Zhang, Y.-Q. and Zhang, G.-H.},
  title           = {{Android Driver Vulnerability Discovery Based on Black-Box Genetic Algorithm}},
  journal         = {Jisuanji Xuebao/Chinese Journal of Computers},
  year            = {2017},
  volume          = {40},
  number          = {5},
  pages           = {1031--1043},
  abstract        = {The vulnerability of device drive is an especially important issue for security of Android phones, because device drive run in kernel. Not only it will affect the user's satisfaction, but also concerns the stability and security of the system. Compare with other vulnerability discover the work of device drive is a difficult task. However, there is a lack of understanding about the target program, and the testing is random as well as blind in traditional fuzz testing. So this technique cannot meet the requirements on the vulnerability discovery of Android drivers. By improving the existing fuzz testing techniques, a new genetic algorithm based on black-box test is presented in this paper. The genetic algorithm is performed according to the execution results, and is used to determine whether the parameters of test cases should be preserved or transformed. In this way, valid parameters are passed to the next generation of test cases, while invalid parameters are transformed by different strategies according to the execution results. Therefore, the fuzz test cases can quickly converge to an effective scope. In order to raise the speed of vulnerability discovery, a parameter optimization technology is introduced and expanded. For faster testing, the invalid parameters which are obtained from the genetic algorithm are further modified to some special data or user's default data. At last, based on this algorithm, we design and implement a fuzz testing system for Android drivers, which is denoted as Add-fuzz (Android device driver fuzz). We deployed the Add-fuzz on many different versions of Android phones to perform a system testing, and 9 unknown security vulnerabilities about Android device drivers was discovered. Compared with other related works, the experiment results demonstrate that this algorithm has good effectiveness and applicability. {\textcopyright} 2017, Science Press. All right reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.11897/SP.J.1016.2017.01031},
  bytitledomenico = {yes},
  doi             = {10.11897/SP.J.1016.2017.01031},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025087936{\&}doi=10.11897{\%}2FSP.J.1016.2017.01031{\&}partnerID=40{\&}md5=3a514dd4f911d7e2a416a0fe0d68b26c},
}

@Article{GROVER2013S12,
  author          = {Grover, Justin},
  title           = {{Android forensics: Automated data collection and reporting from a mobile device}},
  journal         = {Digital Investigation},
  year            = {2013},
  volume          = {10},
  pages           = {S12 -- S20},
  issn            = {1742-2876},
  abstract        = {In this research, a prototype enterprise monitoring system for Android smartphones was developed to continuously collect many data sets of interest to incident responders, security auditors, proactive security monitors, and forensic investigators. Many of the data sets covered were not found in other available enterprise monitoring tools. The prototype system neither requires root privileges nor the exploiting of the Android architecture for proper operation, thereby increasing interoperability among Android devices and avoiding a spyware classification for the system. An anti-forensics analysis on the system was performed to identify and further strengthen areas vulnerable to tampering. The contributions of this research include the release of the first open-source Android enterprise monitoring solution of its kind, a comprehensive guide of data sets available for collection without elevated privileges, and the introduction of a novel design strategy implementing various Android application components useful for monitoring on the Android platform.},
  annote          = {The Proceedings of the Thirteenth Annual DFRWS Conference},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287613000480},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2013.06.002},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.diin.2013.06.002},
  keywords        = {Enterprise user monitoring, Insider threat, Internal investigation, Mobile device,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287613000480},
}

@Article{BHANDARI2017392,
  author          = {Bhandari, Shweta and Jaballah, Wafa Ben and Jain, Vineeta and Laxmi, Vijay and Zemmari, Akka and Gaur, Manoj Singh and Mosbah, Mohamed and Conti, Mauro},
  title           = {{Android inter-app communication threats and detection techniques}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {70},
  pages           = {392--421},
  issn            = {0167-4048},
  abstract        = {With the digital breakthrough, smart phones have become very essential component for many routine tasks like shopping, paying bills, transferring money, instant messaging, emails etc. Mobile devices are very attractive attack surface for cyber thieves as they hold personal details (accounts, locations, contacts, photos) and have potential capabilities for eavesdropping (with cameras/microphone, wireless connections). Android, being the most popular, is the target of malicious hackers who are trying to use Android app as a tool to break into and control device. Android malware authors use many anti-analysis techniques to hide from analysis tools. Academic researchers and commercial anti-malware companies are putting great effort to detect such malicious apps. They are making use of the combinations of static, dynamic and behavior-based analysis techniques. Despite of all the security mechanisms provided by Android, apps can carry out malicious actions through inter-app communication. One such inter-app communication threats is collusion. In collusion, malicious functionality is divided across multiple apps. Each participating app accomplishes its part and communicate information to another app through Inter Component Communication (ICC). ICC does not require any special permissions. Also there is no compulsion to inform user about the communication. Each participating app needs to request a minimal set of privileges, which may make it appear benign to current state-of-the-art techniques that analyze one app at a time. There are many surveys on app analysis techniques in Android; however they focus on single-app analysis. This survey highlights several inter-app communication threats, in particular collusion among multiple-apps. In this paper, we present Android vulnerabilities that may be exploited for carrying privilege escalation attacks, privacy leakage and collusion attacks. We cover the existing threat analysis, scenarios, and a detailed comparison of tools for intra- and inter-app analysis. To the best of our knowledge this is the first survey on inter-app communication threats, app collusion and state-of-the-art detection tools in Android.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817301414},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.07.002},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2017.07.002},
  keywords        = {Inter component communication, Inter-app communication, Multi-app analysis, Privacy leakage,App collusion},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817301414},
}

@Article{Aminordin20186853,
  author          = {Aminordin, A and Faizal, M A and Yusof, R},
  title           = {{Android malware classification base on application category using static code analysis}},
  journal         = {Journal of Theoretical and Applied Information Technology},
  year            = {2018},
  volume          = {96},
  number          = {20},
  pages           = {6853--6863},
  abstract        = {The great shipment of Android mobile devices throughout the world has surged the application development. Indirectly, this scenario had invited the malware creator to be in-line with the technology evolution. One of the threats is the leakage of privacy data and it is a serious subject. To overcome this, the Android application usually being examine through static or dynamic analysis. In static analysis approach, researcher commonly considered combination static features to identify the benign and malicious application. This paper presents a proof of concept on classifying Android benign and malicious apps by its application category. At the same time, this paper proposes a new framework for malicious detection focusing on the leakage of user privacy using minimum number of the request permissions and API calls features. Several machine learning classifiers with several training and testing percentage applied in this study to compare the accuracy. The result show that, applications in same category reported more accurate performance in identify malicious apps compared to non-category based. By applying features ranking and information gain features selection, Random forest classifier with 10 folds cross validation for both ``Book and Reference'' and ``Personalization'' category achieved higher true positive rate also lower false positive rate. {\textcopyright} 2005 -- ongoing JATIT {\&} LLS.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056244438%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=c1302ea991d2a746a3433ae68a939971},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056244438{\&}partnerID=40{\&}md5=c1302ea991d2a746a3433ae68a939971},
}

@Article{Xu201643,
  author          = {Xu, Y.-P. and Wu, C.-H. and Hou, M.-J. and Zheng, K.-F. and Yao, S},
  title           = {{Android malware detection technology based on improved Na{\"{i}}ve Bayesian}},
  journal         = {Beijing Youdian Daxue Xuebao/Journal of Beijing University of Posts and Telecommunications},
  year            = {2016},
  volume          = {39},
  number          = {2},
  pages           = {43--47},
  abstract        = {Permissions are extracted as features via static analysis. The information gain (IG) algorithm is applied to select significant features. The Na{\"{i}}ve Bayesian (NB) classifier is created which is improved through Laplace calibration and natural logarithm of multiplier. The results with 10-fold cross validation indicate that the improved NB classifier achieves higher accuracy and precision, and the selected features by IG algorithm improve the detection efficiency in ensuring the accuracy of the case. Comparing k-nearest neighbor (KNN) and k-Means classifier, NB classifier has good performance on validity, accuracy and efficiency. {\textcopyright} 2016, Editorial Department of Journal of Beijing University of Posts and Telecommunications. All right reserved.},
  annote          = {cited By 5},
  bdsk-url-1      = {http://dx.doi.org/10.13190/j.jbupt.2016.02.009},
  bytitledomenico = {no},
  doi             = {10.13190/j.jbupt.2016.02.009},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976620356{\&}doi=10.13190{\%}2Fj.jbupt.2016.02.009{\&}partnerID=40{\&}md5=95031d6f4d93bde69c614ccfccdcf771},
}

@Article{MARTIN2018,
  author          = {Mart{\'{i}}n, Alejandro and Lara-Cabrera, Ra{\'{u}}l and Camacho, David},
  title           = {{Android malware detection through hybrid features fusion and ensemble classifiers: the AndroPyTool framework and the OmniDroid dataset}},
  journal         = {Information Fusion},
  year            = {2018},
  issn            = {1566-2535},
  abstract        = {Cybersecurity has become a major concern for society, mainly motivated by the increasing number of cyber attacks and the wide range of targeted objectives. Due to the popularity of smartphones and tablets, Android devices are considered an entry point in many attack vectors. Malware applications are among the most used tactics and tools to perpetrate a cyber attack, so it is critical to study new ways of detecting them. In these detection mechanisms, machine learning has been used to build classifiers that are effective in discerning if an application is malware or benignware. However, training such classifiers require big amounts of labelled data which, in this context, consist of categorised malware and benignware Android applications represented by a set of features able to describe their behaviour. For that purpose, in this paper we present OmniDroid, a large and comprehensive dataset of features extracted from 22,000 real malware and goodware samples, aiming to help anti-malware tools creators and researchers when improving, or developing, new mechanisms and tools for Android malware detection. Furthermore, the characteristics of the dataset make it suitable to be used as a benchmark dataset to test classification and clustering algorithms or new representation techniques, among others. The dataset has been released under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License and was built using AndroPyTool, our automated framework for dynamic and static analysis of Android applications. Finally, we test a set of ensemble classifiers over this dataset and propose a malware detection approach based on the fusion of static and dynamic features through the combination of ensemble classifiers. The experimental results show the feasibility and potential usability (for the machine learning, soft computing and cyber security communities) of our automated framework and the publicly available dataset.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1566253518306778},
  bdsk-url-2      = {https://doi.org/10.1016/j.inffus.2018.12.006},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.inffus.2018.12.006},
  keywords        = {Android, Hybrid features fusion, Malware dataset,Malware analysis},
  url             = {http://www.sciencedirect.com/science/article/pii/S1566253518306778},
}

@Article{PAPADOPOULOS20183,
  author          = {Papadopoulos, Harris and Georgiou, Nestoras and Eliades, Charalambos and Konstantinidis, Andreas},
  title           = {{Android malware detection with unbiased confidence guarantees}},
  journal         = {Neurocomputing},
  year            = {2018},
  volume          = {280},
  pages           = {3--12},
  issn            = {0925-2312},
  abstract        = {The impressive growth of smartphone devices in combination with the rising ubiquity of using mobile platforms for sensitive applications such as Internet banking, have triggered a rapid increase in mobile malware. In recent literature, many studies examine Machine Learning techniques, as the most promising approach for mobile malware detection, without however quantifying the uncertainty involved in their detections. In this paper, we address this problem by proposing a machine learning dynamic analysis approach that provides provably valid confidence guarantees in each malware detection. Moreover the particular guarantees hold for both the malicious and benign classes independently and are unaffected by any bias in the data. The proposed approach is based on a novel machine learning framework, called Conformal Prediction, combined with a random forests classifier. We examine its performance on a large-scale dataset collected by installing 1866 malicious and 4816 benign applications on a real android device. We make this collection of dynamic analysis data available to the research community. The obtained experimental results demonstrate the empirical validity, usefulness and unbiased nature of the outputs produced by the proposed approach.},
  annote          = {Applications of Neural Modeling in the new era for data and IT},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0925231217317678},
  bdsk-url-2      = {https://doi.org/10.1016/j.neucom.2017.08.072},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.neucom.2017.08.072},
  keywords        = {Android, Class imbalance, Confidence guarantees, Confidence measures, Conformal Prediction, Random forests, Security, Unbiased predictions,Malware detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S0925231217317678},
}

@Article{Smith2016183,
  author          = {Smith, E and Coglio, A},
  title           = {{Android platform modeling and android app verification in the ACL2 theorem prover}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2016},
  volume          = {9593},
  pages           = {183--201},
  abstract        = {We present our work in using the ACL2 theorem prover to formally model the Android platform and to formally verify Android apps. Our approach allows the verification of the full functional correctness of apps as well as security properties. It also lets us detect or prove the absence of ``functional malware'', malicious app functionality that is triggered by complex conditions on state and that causes the app to calculate the wrong results or otherwise behave incorrectly. Our formal Android model is an executable simulator of a growing subset of the Android platform, and app proofs are done by automated symbolic execution of the app's event handlers using the formal model. By induction, we prove that an app satisfies an invariant, including the correctness properties of interest, for all possible sequences of events. {\textcopyright} Springer International Publishing Switzerland 2016.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-29613-5_11},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-29613-5_11},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959018018{\&}doi=10.1007{\%}2F978-3-319-29613-5{\_}11{\&}partnerID=40{\&}md5=208df72c78de5f0f146672d49c8e7ef2},
}

@Article{RASHIDI201790,
  author          = {Rashidi, Bahman and Fung, Carol and Bertino, Elisa},
  title           = {{Android resource usage risk assessment using hidden Markov model and online learning}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {65},
  pages           = {90--107},
  issn            = {0167-4048},
  abstract        = {With Android devices users are allowed to install third-party applications from various open markets. This raises security and privacy concerns since the third-party applications may be malicious. Unfortunately, the increasing sophistication and diversity of the malicious Android applications render the conventional defenses techniques ineffective, which results in a large number of malicious applications to remain undetected. In this paper we present XDroid, an Android application and resource risk assessment framework based on the Hidden Markov Model (HMM). In our approach, we first map the applications' behaviors into an observation set, and we attach timestamps to some observations in the set. We show that our novel use of temporal behavior tracking can significantly improve the malware detection accuracy, and that the HMM can generate security alerts when suspicious behaviors are detected. Furthermore, we introduce an online learning model to integrate the input from users and provide adaptive risk assessment. We evaluate our model through a set of experiments on the DREBIN benchmark malware dataset. Our evaluation results demonstrate that the proposed model can accurately assess the risk levels of malicious applications and provide adaptive risk assessment based on user input.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404816301596},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2016.11.006},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2016.11.006},
  keywords        = {App behavior, Permission, Privacy, Risk computation,Smartphone},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404816301596},
}

@Article{LIU2018402,
  author          = {Liu, Xing and Liu, Jiqiang and Wang, Wei and Zhu, Sencun},
  title           = {{Android single sign-on security: Issues, taxonomy and directions}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {89},
  pages           = {402--420},
  issn            = {0167-739X},
  abstract        = {Single Sign-On (SSO) is a mechanism that allows a user to log in to other applications using his identity registered with an identity provider. One of the most popular protocols for SSO is OAuth 2.0, which is an open standard for authorization. However, due to the lack of detailed instructions on how to implement OAuth 2.0 on Android, there are many vulnerabilities in the current Android OAuth 2.0 implementations. While much research effort has been made to exploit such vulnerabilities, there is a lack of systematical collation and summary of these researches, resulting in the appearance of common vulnerabilities in new applications. Hence, it is crucial to collate and summarize related work. Meanwhile, the rapid development of the Internet of Things (IoT) also requires an understanding of the usage of OAuth 2.0 in the IoT environment. In this work, we first describe the OAuth 2.0 authorization code grant flow and the implicit grant flow in detail and summarize the differences between the Web environment and the Android environment that affect OAuth 2.0 security. Then, we summarize the security issues in the implementations of OAuth 2.0 on Android. These security issues include: storing client{\_}secret or access token locally, using embedded WebView as user-agent, incorrect usage of authentication proof, handling redirection in mobile app improperly, lacking transmission protection and third-party app authentication. Attacks on these vulnerabilities, such as WebView hijacking, linking hijacking and phishing, as well as attack results are elaborated subsequently. Against these security issues and attacks, we summarize the related research work in terms of vulnerability analysis, defense, and protocol analysis. At last, we discuss the directions for mitigating these security issues and discuss some OAuth-based protocols for the IoT environment.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X18302358},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.06.049},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.future.2018.06.049},
  keywords        = {OAuth-based SSO, Privacy, Security,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X18302358},
}

@Article{WILLEMS201313,
  author          = {Willems, Eddy},
  title           = {{Android under attack}},
  journal         = {Computer Fraud {\&} Security},
  year            = {2013},
  volume          = {2013},
  number          = {11},
  pages           = {13--15},
  issn            = {1361-3723},
  abstract        = {Android is the first platform after Microsoft Windows to become a prime target for cyber-criminals. This statement has been made by most IT security specialists since 2011. But why Android over other (mobile) platforms? Perhaps it's because the three crucial factors for any crime -- motive, means and opportunity -- are now present in Android. Perhaps it's because the three crucial factors for any crime -- motive, means and opportunity -- are now present in Android. It represents a large enough ecosystem to make it attractive to cyber-criminals. The cost of developing and distributing malware is low, and can be done with relative anonymity, explains Eddy Willems of G Data.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1361372313701039},
  bdsk-url-2      = {https://doi.org/10.1016/S1361-3723(13)70103-9},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1361-3723(13)70103-9},
  url             = {http://www.sciencedirect.com/science/article/pii/S1361372313701039},
}

@Article{Zhang2018239,
  author          = {Zhang, P and Cheng, K and Gao, J},
  title           = {{Android-SRV: Scenario-Based Runtime Verification of Android Applications}},
  journal         = {International Journal of Software Engineering and Knowledge Engineering},
  year            = {2018},
  volume          = {28},
  number          = {2},
  pages           = {239--257},
  abstract        = {With the wide-spread usage of Android systems, Android applications have become the target of mobile malwares. Therefore, an effective verification approach for Android applications is essential. Runtime verification based on monitors is one of the most promising techniques to check the software's behaviors. Currently, there are a number of monitoring approaches for Android applications. However, these approaches mainly have two limitations. First, there is no effective mechanism to reduce the load on Android applications caused by monitors. Second, these approaches mainly rely on logic-based specifications, which are complex and not intuitive for being used in practice. In order to address these two limitations, this paper proposes a scenario-based runtime verification approach for Android applications (called Android-SRV). The approach concentrates on providing a dynamic and usable solution for monitoring applications during execution with the help of aspect-oriented programming. It will translate the scenario-based specification (called property sequence charts (PSCs)) into multi-valued automata (MAs), and then generate AspectJ codes from the MA. Finally, these AspectJ codes are weaved into the target system as monitors. Considering the impact of the monitors on performance load in the Android system, the paper proposes local and cloud collaboration mechanisms to reduce the impact. The scenario-based specification is more intuitive than the traditional logic-based specifications. The approach is shown to be an effective means for monitoring Android applications with controlled overload. {\textcopyright} 2018 World Scientific Publishing Company.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1142/S0218194018500080},
  bytitledomenico = {doubt},
  doi             = {10.1142/S0218194018500080},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043288780{\&}doi=10.1142{\%}2FS0218194018500080{\&}partnerID=40{\&}md5=1dedd7a6c28a4a81f9fd5d09c506951c},
}

@Article{Wu20153859,
  author          = {Wu, J and Wu, Y and Wu, Z and Yang, M and Luo, T and Wang, Y},
  title           = {{AndroidFuzzer: Detecting android vulnerabilities in fuzzing cloud}},
  journal         = {Journal of Computational Information Systems},
  year            = {2015},
  volume          = {11},
  number          = {11},
  pages           = {3859--3866},
  abstract        = {Android system is suffering enormous security challenges. Although the permission and the sandbox secure policies have been proposed and deployed in Android, there are still many vulnerabilities. These vulnerabilities are caused by the limited security models, coarse permission system and code flaws, and lead to private information leakage, deny of service, potential costs, etc. Analysis and security testing methods have been presented to detect these vulnerabilities. However, most of these methods focus on certain aspects, for example, applications, permission, or capability leakage. In this paper, we proposed a new detection paradigm named AndroidFuzzer to detect vulnerabilities in the Android system. We first formally definite the fuzzing cloud and the cloud nodes, and investigate the architecture in detail. Then, the fuzzing test cases are designed for each layer of the Android system. Thirdly, enough fuzzing test cases aiming to cover more code branches are created in cloud nodes fuzzer with the endless capacity of processing power and storage in fuzzing cloud. Finally, the prototype of fuzzing cloud has been implemented, and some separated modules have been tested. The experiment results show that some vulnerabilities can be detected by the fuzzing cloud. It is also believed that after small extension, fuzzing cloud can detect vulnerabilities in other systems. {\textcopyright}, 2015, Binary Information Press. All right reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.12733/jcis14031},
  bytitledomenico = {yes},
  doi             = {10.12733/jcis14031},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84938365230{\&}doi=10.12733{\%}2Fjcis14031{\&}partnerID=40{\&}md5=b8a24e375a74ba2d3c69363daf224081},
}

@Article{FARUKI201566,
  author          = {Faruki, Parvez and Laxmi, Vijay and Bharmal, Ammar and Gaur, M S and Ganmoor, Vijay},
  title           = {{AndroSimilar: Robust signature for detecting variants of Android malware}},
  journal         = {Journal of Information Security and Applications},
  year            = {2015},
  volume          = {22},
  pages           = {66--80},
  issn            = {2214-2126},
  abstract        = {Android Smartphone popularity has increased malware threats forcing security researchers and AntiVirus (AV) industry to carve out smart methods to defend Smartphone against malicious apps. Robust signature based solutions to mitigate threats become necessary to protect the Smartphone and confidential user data. Here we present AndroSimilar, an approach which generates signatures by extracting statistically robust features, to detect malicious Android apps. Proposed method is effective against code obfuscation and repackaging, widely used techniques to propagate unseen variants of known malware by evading AV signatures. AndroSimilar is a syntactic foot-printing mechanism that finds regions of statistical similarity with known malware to detect those unknown, zero day samples. We also show that syntactic similarity considering whole app, rather than just embedded DEX file is more effective, contrary to known fuzzy hashing approach. We also apply clustering algorithm to identify small set of family signatures to reduce overall signature database size. Proposed approach can be refined to deploy as Smartphone AV.},
  annote          = {Special Issue on Security of Information and Networks},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2214212614001471},
  bdsk-url-2      = {https://doi.org/10.1016/j.jisa.2014.10.011},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.jisa.2014.10.011},
  keywords        = {Code obfuscation, Similarity digest, Statistical features,Android malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S2214212614001471},
}

@InProceedings{7976989,
  author          = {Shankar, V G and Somani, G and Gaur, M S and Laxmi, V and Conti, M},
  title           = {{AndroTaint: An efficient android malware detection framework using dynamic taint analysis}},
  booktitle       = {2017 ISEA Asia Security and Privacy (ISEASP)},
  year            = {2017},
  pages           = {1--13},
  abstract        = {Android operating system is widespread in today's smart-phone market due to its open source model, its easy functionality and huge number of Apps and App-Stores (the official and others). The coverage of some 90{\%} of the market, it is also the place-holder for user's personal as well as sensitive information (IMEI, IMSI, etc.). There is a tendency of Apps user to trust on Android OS for securing his/her data but it has been proved that Android OS is more vulnerable to exploitation either for fun or for monetary purpose. Malware detection for Android OS has become an upcoming research problem of interest. Dynamic Taint Analysis is an efficient analysis in existing Android malware detection analysis. The aim of this paper is to work towards Dynamic Taint Analysis of Android malware using automatic tagging and with out modification in Android platform. In order to do this, this paper surveys exhaustively the available literature and works related to dynamic taint analysis. This paper proposes some novel ideas to improve the existing solution with more accuracy. There are two phases of our novel algorithm, the first phase is training phase for feature extraction and the second phase is the analysis phase for automatic tagging and tainting. We have developed a framework named AndroTaint, which is working on Dynamic Taint Analysis. AndroTaint follows a novel supervised and unsupervised Anomaly Detection technique with high precision, recall and harmonic mean. Our Dynamic Taint Analysis algorithm categorizes the App is risky, benign, malicious or aggressive as per their feature and behaviour. We have measured AndroTaint effectiveness on the basis of timeline for building dataset and 10-fold cross validation. AndroTaint covers 90{\%} of malware and benign in analysis phase with less false positive and false negative.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ISEASP.2017.7976989},
  bytitledomenico = {yes},
  doi             = {10.1109/ISEASP.2017.7976989},
  keywords        = {Android (operating system);feature extraction;invasive software;Android malware detection framework;dynamic taint analysis;automatic tagging;feature extraction;AndroTaint;Android OS;operating system;unsupervised anomaly detection technique;supervised anomaly detection technique;Androids;Humanoid robots;Malware;Operating systems;Tools;Payloads;Tagging;Android;Taint Analysis;Smart-phone security;Malware analysis;Malware detection;Android Malware;Dynamic Taint Analysis},
}

@Article{SHANKAR2016587,
  author          = {Shankar, Venkatesh Gauri and Somani, Gaurav},
  title           = {{Anti-Hijack: Runtime Detection of Malware Initiated Hijacking in Android}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {78},
  pages           = {587--594},
  issn            = {1877-0509},
  abstract        = {According to studies, Android is having the highest market share in smartphone operating systems. The number of Android apps (i.e. applications) are increasing day by day. Consequent threats and attacks on Android are also rising. There are a large number of apps which bypass users by hiding their functionalities and send users sensitive information and data across the network. Due to flexibility and openness of Android operating system, attack surfaces are being introduced every other day. In this paper, we are addressing detection of two fatal malware attacks; intent based hijacking and authenticated session hijacking. We have used the concept of honey-pot in detection of these two authentication hijacking problems. In order to achieve this, we have tested various apps and their interaction with the honey-pot maintained by real device or an emulator. We have designed benign app as a honey framed app. We argue that hijacking malware can be detected with higher accuracy using our method at run-time as compared to the traditional machine learning methods. Our approach, Anti-Hijack, which has provided the detection accuracy as high as 96{\%}. This has been highly accurate to detect the unwanted interaction between hijacking malware and designed benign app. We have tested our approach on a strong data-set of Android apps for experiment and identifying vulnerable points. Our detection method Anti-Hijack is a novel contribution in this area which provides light weight, device operated run-time detection at hijacking malware.},
  annote          = {1st International Conference on Information Security {\&} Privacy 2015},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916001071},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.02.105},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.procs.2016.02.105},
  keywords        = {Anti-Hijack, honey-pot, intent, security, smartphone, vulnerabilities,Android malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916001071},
}

@Article{TALHA20151,
  author          = {Talha, Kabakus Abdullah and Alper, Dogru Ibrahim and Aydin, Cetin},
  title           = {{APK Auditor: Permission-based Android malware detection system}},
  journal         = {Digital Investigation},
  year            = {2015},
  volume          = {13},
  pages           = {1--14},
  issn            = {1742-2876},
  abstract        = {Android operating system has the highest market share in 2014; making it the most widely used mobile operating system in the world. This fact makes Android users the biggest target group for malware developers. Trend analyses show large increase in mobile malware targeting the Android platform. Android's security mechanism is based on an instrument that informs users about which permissions the application needs to be granted before installing them. This permission system provides an overview of the application and may help gain awareness about the risks. However, we do not have enough information to conclude that standard users read or digital investigators understand these permissions and their implications. Digital investigators need to be on the alert for the presence of malware when examining Android devices, and can benefit from supporting tools that help them understand the capabilities of such malicious code. This paper presents a permission-based Android malware detection system, APK Auditor that uses static analysis to characterize and classify Android applications as benign or malicious. APK Auditor consists of three components: (1) A signature database to store extracted information about applications and analysis results, (2) an Android client which is used by end-users to grant application analysis requests, and (3) a central server responsible for communicating with both signature database and smartphone client and managing whole analysis process. To test system performance, 8762 applications in total, 1853 benign applications from Google's Play Store and 6909 malicious applications from different sources were collected and analyzed by the system developed. The results show that APK Auditor is able to detect most well-known malwares and highlights the ones with a potential in approximately 88{\%} accuracy with a 0.925 specificity.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S174228761500002X},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2015.01.001},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.diin.2015.01.001},
  keywords        = {Malware, Mobile security, Smartphone, Static analysis,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S174228761500002X},
}

@Conference{Wu2017253,
  author          = {Wu, G and Cao, Y and Chen, W and Wei, J and Zhong, H and Huang, T},
  title           = {{AppCheck: A Crowdsourced Testing Service for Android Applications}},
  booktitle       = {Proceedings - 2017 IEEE 24th International Conference on Web Services, ICWS 2017},
  year            = {2017},
  pages           = {253--260},
  abstract        = {It is well known that the fragmentation of Android ecosystem has caused severe compatibility issues. Therefore, for Android apps, cross-platform testing (the apps must be tested on a multitude of devices and operating system versions) is particularly important to assure their quality. Although lots of cross-platform testing techniques have been proposed, there are still some limitations: 1) it is time-consuming and error-prone to encode platform-agnostic tests manually, 2) test scripts generated by existing record/replay techniques are brittle and will break when replayed on different platforms, 3) Developers, and even test vendors have not equipped some special Android devices. As a result, apps have not been tested sufficiently, leading to many compatibility issues after releasing. To address these limitations, this paper proposes AppCheck, a crowdsourced testing service for Android apps. To generate tests that will explore different behavior of the app automatically, AppCheck crowdsources event trace collection over the Internet, and various touch events will be captured when real users interact with the app. The collected event traces are then transformed into platform-agnostic test scripts, and directly replayed on the devices of real users. During the replay, various data (e.g., screenshots and layout information) will be extracted to identify compatibility issues. Our empirical evaluation shows that AppCheck is effective and improves the state of the art. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICWS.2017.40},
  bytitledomenico = {yes},
  doi             = {10.1109/ICWS.2017.40},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032348865{\&}doi=10.1109{\%}2FICWS.2017.40{\&}partnerID=40{\&}md5=c976429bb6af397e7c6c24a7facf6edc},
}

@Article{MCDONALD200643,
  author          = {McDonald, J Todd and Yasinsac, Alec},
  title           = {{Application Security Models for Mobile Agent Systems}},
  journal         = {Electronic Notes in Theoretical Computer Science},
  year            = {2006},
  volume          = {157},
  number          = {3},
  pages           = {43--59},
  issn            = {1571-0661},
  abstract        = {Mobile agents are a distributed computing paradigm based on mobile autonomous programs. Mobile applications must balance security requirements with available security mechanisms in order to meet application level security goals. We introduce a trust framework to reason about application security requirements, trust expression, and agent protection mechanisms. We develop application security models that capture initial trust relationships and consider their use for mobile agent security.},
  annote          = {Proceedings of the First International Workshop on Security and Trust Management (STM 2005)},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1571066106002921},
  bdsk-url-2      = {https://doi.org/10.1016/j.entcs.2005.09.041},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.entcs.2005.09.041},
  keywords        = {application requirements, frameworks, models, security, software protection, trust,Mobile agents},
  url             = {http://www.sciencedirect.com/science/article/pii/S1571066106002921},
}

@InProceedings{5954462,
  author          = {Krishnan, P and Hafner, S and Zeiser, A},
  title           = {{Applying Security Assurance Techniques to a Mobile Phone Application: An Initial Approach}},
  booktitle       = {2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops},
  year            = {2011},
  pages           = {545--552},
  abstract        = {As users download applications to their mobile phones, security is a critical issue. In this paper we present a process for the security assurance of applications. It uses existing vulnerability databases and application development guidelines to identify potential security issues. The identified issues are then validated using a variety of techniques including black-box testing, unit testing code inspection and static analysis. This process is illustrated using an application for the Android platform.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSTW.2011.10},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICSTW.2011.10},
  keywords        = {database management systems;mobile computing;mobile radio;operating systems (computers);program diagnostics;program testing;telecommunication security;security assurance techniques;mobile phone application;vulnerability databases;application development guidelines;security issues;black-box testing;unit testing code inspection;static analysis;Android platform;Security;Guidelines;Testing;Androids;Mobile handsets;Databases;Humanoid robots;Android;Assurance;Security;QA process},
}

@Conference{Lee201736,
  author          = {Lee, S.-H. and Kim, S.-H. and Kim, S and Jin, S.-H.},
  title           = {{Appwrapping Providing fine-grained security policy enforcement per method unit in android}},
  booktitle       = {Proceedings - 2017 IEEE 28th International Symposium on Software Reliability Engineering Workshops, ISSREW 2017},
  year            = {2017},
  pages           = {36--39},
  abstract        = {Enterprise mobility management (EMM) solution is widely used to securely protect confidential information stored on an individual's smartphone, while increasing the efficiency because of BYOD policy. The application wrapping (Appwrapping) technology is one way to be applied EMM solutions, by modifying binary applications without the original source code. In the past, Appwrapping was performed to control permissions or APIs to protect privacy on Android. This method is applied collectively to the whole section, not a specific section of the app, so it is difficult to control the section (flow) desired by the user or the manager. In addition, system overhead can occur because the control is applied to the whole section of the app. In this paper, we propose a method to insert an additional security policy code at a certain interval position in the intermediate code of a binary app, so that it can be controlled at a specific interval rather than the whole interval of the app. The proposed method extracts and saves the security policy intermediate code and the related file in advance and then adds the security policy code to the specific method on the intermediate code of the specific activity acquired by decompiling the target app. Finally, the additional security policy code is modified to avoid errors caused by the additional code. We create an automation tool for performance verification, experiment with five commercial office apps, and confirm that the apps work properly with the added EMM security functions. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ISSREW.2017.25},
  bytitledomenico = {no},
  doi             = {10.1109/ISSREW.2017.25},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040635182{\&}doi=10.1109{\%}2FISSREW.2017.25{\&}partnerID=40{\&}md5=bc795f96b3cdfa9e579f809ee1053481},
}

@Article{Salva2015201,
  author          = {Salva, S and Zafimiharisoa, S R},
  title           = {{APSET, an Android aPplication SEcurity Testing tool for detecting intent-based vulnerabilities}},
  journal         = {International Journal on Software Tools for Technology Transfer},
  year            = {2015},
  volume          = {17},
  number          = {2},
  pages           = {201--221},
  abstract        = {The Android messaging system, called intent, is a mechanism that ties components together to build applications for smartphones. Intents are kinds of messages composed of actions and data, sent by a component to another component to perform several operations, e.g. launching a user interface. The intent mechanism offers a lot of flexibility for developing Android applications, but it might also be used as an entry point for security attacks. The latter can be easily sent with intents to components, that can indirectly forward attacks to other components and so on. In this context, this paper proposes APSET, a tool for Android aPplication SEcurity Testing, which aims at detecting intent-based vulnerabilities. It takes as inputs Android applications and intent-based vulnerabilities formally expressed with models called vulnerability patterns. Then, and this is the originality of our approach, class diagrams and partial specifications are automatically generated from applications with algorithms reflecting some knowledge of the Android documentation. These partial specifications avoid false positives and refine the test result with special verdicts notifying that a component is not compliant to its specification. Furthermore, we propose a test case execution framework which supports the receipt of any exception, the detection of application crashes, and provides a final XML test report detailing the test case verdicts. The vulnerability detection effectiveness of APSET is evaluated with experimentations on randomly chosen Android applications of the Android Market. {\textcopyright} 2014, Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s10009-014-0303-8},
  bytitledomenico = {yes},
  doi             = {10.1007/s10009-014-0303-8},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924852367{\&}doi=10.1007{\%}2Fs10009-014-0303-8{\&}partnerID=40{\&}md5=0d2dd45161c18f9d4fe2c05f6f3908cb},
}

@Article{FARINA2016268,
  author          = {Farina, Paolo and Cambiaso, Enrico and Papaleo, Gianluca and Aiello, Maurizio},
  title           = {{Are mobile botnets a possible threat? The case of SlowBot Net}},
  journal         = {Computers {\&} Security},
  year            = {2016},
  volume          = {58},
  pages           = {268--283},
  issn            = {0167-4048},
  abstract        = {In virtue of the large-scale diffusion of smartphones and tablets, a possible exploitation of such devices to execute cyber-attacks should be evaluated. This scenario is rarely considered by cyber-criminals, since mobile devices commonly represent a target of attacks, instead of an exploitable resource. In this paper we analyze the possibility to execute distributed denial of service attacks from mobile phones. We introduce SlowBot Net, a botnet infrastructure designed to involve mobile agents, and we compare it with Low-Orbit Ion Cannon (also called LOIC), a well-known botnet adopted by cyber-hacktivists on the Internet. Results prove that SlowBot Net requires fewer resources to the attacker and it is effectively deployable on mobile nodes. Since research related to mobile botnets is still immature, the proposed work should be considered a valuable resource enriching the cyber-security field.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404816300086},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2016.02.005},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2016.02.005},
  keywords        = {Android, Distributed attacks, LOIC, Offensive security, Slow DoS attack, Smartphone,Denial of service},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404816300086},
}

@Article{Zhang2013147,
  author          = {Zhang, Q and Li, X and Yu, X and Feng, Z},
  title           = {{ASF: Improving android security with layered structure instrumentation}},
  journal         = {Communications in Computer and Information Science},
  year            = {2013},
  volume          = {332},
  pages           = {147--157},
  abstract        = {Due to the third-party applications that provide Smartphone users with functional extensions, more and more privacy leak events occur. While the existing security mechanism informs the user of the resources the application requires, it does not involve the usage of sensitive privacies. This paper presents Android Security Framework (ASF): a security framework for Android that guarantees the security of user privacy. In the framework layer, ASF is integrated for monitoring the operations that third-party applications perform on user privacies, and in the application layer, detectors inspect the safety of these operations based on ASF. Our security framework is implemented through layered structure, with minimal change to the existing Android code. A case study is presented as a preliminary validation of the security framework that helps users protect privacies. {\textcopyright} 2012 Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879196786%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=f847ea4d3e60ff26580e82990d748758},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879196786{\&}partnerID=40{\&}md5=f847ea4d3e60ff26580e82990d748758},
}

@Conference{Dilhara201867,
  author          = {Dilhara, M and Cai, H and Jenkins, J},
  title           = {{Automated detection and repair of incompatible uses of runtime permissions in Android apps}},
  booktitle       = {Proceedings - International Conference on Software Engineering},
  year            = {2018},
  pages           = {67--71},
  abstract        = {The runtime permission model of Android enhances security yet also constitutes a source of incompatibility issues that impedes the productivity of mobile developers. This paper presents a novel analysis that detects the incompatible permission uses in a given app and repairs them when found, hence automatically adapting the app to the runtime permission model. The key approach is to check and enforce the app's conformance to the runtime permission use protocol through static control flow analysis and bytecode transformation. We implemented our technique as an open-source tool, ARPDROID, and initially evaluated it on 20 incompatible and 3 compatible real-world apps, assisted by manual ground truth and verification. Our results show that ARPDROID achieved 100{\%} detection accuracy, 90{\%} repair success rate, and 91.3{\%} overall adaptation success rate at an average time cost of about two minutes. {\textcopyright} 2018 ACM.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1145/3197231.3197255},
  bytitledomenico = {yes},
  doi             = {10.1145/3197231.3197255},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051672480{\&}doi=10.1145{\%}2F3197231.3197255{\&}partnerID=40{\&}md5=5c33ce82ab86e5747cac54619dfe858b},
}

@InProceedings{Moran:2017:AGT:3098344.3098518,
  author          = {Moran, Kevin and Linares-V{\'{a}}squez, Mario and Poshyvanyk, Denys},
  title           = {{Automated GUI Testing of Android Apps: From Research to Practice}},
  booktitle       = {Proceedings of the 39th International Conference on Software Engineering Companion},
  year            = {2017},
  series          = {ICSE-C '17},
  pages           = {505--506},
  address         = {Piscataway, NJ, USA},
  publisher       = {IEEE Press},
  abstract        = {The last decade has seen tremendous proliferation of mobile computing in our society. Billions of users have access to millions of mobile apps that can be installed directly on their mobile devices, electrical appliances, and watches. Factors such as new monetization/revenue models, programming models, and distribution infrastructures contribute to an "attractive" movement that captivates new and traditional developers, as well as a crowd of other professionals that explore, design, and implement mobile apps. Also, the need for "enterprise apps" that support start-ups or serve as a new front-end for traditional companies is pushing software-related professionals to embrace mobile technologies. However, the nature of the economy (devices, apps, markets) imposes new challenges on how mobile apps are envisioned, designed, implemented, tested, released, and maintained. This technology briefing aims to help address the challenges of testing and maintaining mobile apps by providing participants from both academic and industrial backgrounds with information on the state-of-art and state-of-practice mobile testing techniques. Specifically, we aim to (i) highlight new techniques and methodologies for making effective automated testing of mobile apps practical and accessible to developers, and (ii) discuss open academic research questions related to such technology transfer.},
  bdsk-url-1      = {https://doi.org/10.1109/ICSE-C.2017.166},
  bdsk-url-2      = {http://dx.doi.org/10.1109/ICSE-C.2017.166},
  bytitledomenico = {no},
  doi             = {10.1109/ICSE-C.2017.166},
  isbn            = {978-1-5386-1589-8},
  keywords        = {GUI, apps, automation, testing,Android},
  url             = {https://doi.org/10.1109/ICSE-C.2017.166},
}

@Article{ISI:000440521100005,
  author          = {Chen, Xiupeng and Mu, Rongzeng and Yan, Yuepeng},
  title           = {{Automated identification of callbacks in Android framework using machine learning techniques}},
  journal         = {INTERNATIONAL JOURNAL OF EMBEDDED SYSTEMS},
  year            = {2018},
  volume          = {10},
  number          = {4, SI},
  pages           = {301--312},
  issn            = {1741-1068},
  abstract        = {The number of malicious Android applications has grown explosively,
leaking massive privacy sensitive information. Nevertheless, the
existing static code analysis tools relying on imprecise callbacks list
will miss high numbers of leaks, which is demonstrated in the paper.
This paper presents a machine learning approach to identifying callbacks
automatically in Android framework. As long as it is given a training
set of hand-annotated callbacks, the proposed approach can detect all of
them in the entire framework. A series of experiments are conducted to
identify 20,391 callbacks on Android 4.2. This proposed approach,
verified by a ten-fold
cross-validation, is effective and efficient in terms of precision and
recall, with an average of more than 91{\%}. The evaluation results shows
that many of newly discovered callbacks are indeed used, which
furthermore confirms that the approach is suitable for all Android
framework versions.},
  bdsk-url-1      = {http://dx.doi.org/10.1504/IJES.2018.10014926},
  bytitledomenico = {doubt},
  doi             = {10.1504/IJES.2018.10014926},
}

@Article{GUIDO2013S96,
  author          = {Guido, Mark and Ondricek, Jared and Grover, Justin and Wilburn, David and Nguyen, Thanh and Hunt, Andrew},
  title           = {{Automated identification of installed malicious Android applications}},
  journal         = {Digital Investigation},
  year            = {2013},
  volume          = {10},
  pages           = {S96 -- S104},
  issn            = {1742-2876},
  abstract        = {Increasingly, Android smartphones are becoming more pervasive within the government and industry, despite the limited ways to detect malicious applications installed to these phones' operating systems. Although enterprise security mechanisms are being developed for use on Android devices, these methods cannot detect previously unknown malicious applications. As more sensitive enterprise information becomes available and accessible on these smartphones, the risk of data loss inherently increases. A malicious application's actions could potentially leave sensitive data exposed with little recourse. Without an effective corporate monitoring solution in place for these mobile devices, organizations will continue to lack the ability to determine when a compromise has occurred. This paper presents research that applies traditional digital forensic techniques to remotely monitor and audit Android smartphones. The smartphone sends changed file system data to a remote server, allowing for expensive forensic processing and the offline application of traditional tools and techniques rarely applied to the mobile environment. The research aims at ascertaining new ways of identifying malicious Android applications and ultimately attempts to improve the state of enterprise smartphone monitoring. An on-phone client, server, database, and analysis framework was developed and tested using real mobile malware. The results are promising that the developed detection techniques identify changes to important system partitions; recognize file system changes, including file deletions; and find persistence and triggering mechanisms in newly installed applications. It is believed that these detection techniques should be performed by enterprises to identify malicious applications affecting their phone infrastructure.},
  annote          = {The Proceedings of the Thirteenth Annual DFRWS Conference},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287613000571},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2013.06.011},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.diin.2013.06.011},
  keywords        = {Enterprise, Mobile forensics, Monitoring, Periodic,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287613000571},
}

@InProceedings{Coppola:2016:AMU:2945404.2945406,
  author          = {Coppola, Riccardo and Raffero, Emanuele and Torchiano, Marco},
  title           = {{Automated Mobile UI Test Fragility: An Exploratory Assessment Study on Android}},
  booktitle       = {Proceedings of the 2Nd International Workshop on User Interface Test Automation},
  year            = {2016},
  series          = {INTUITEST 2016},
  pages           = {11--20},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Automated UI testing suffers from fragility due to continuous -although minor- changes in the UI of applications. Such fragility has been shown especially for the web domain, though no clear evidence is available for mobile applications. Our goal is to perform an exploratory assessment of the extent and causes of the fragiliy of UI automated tests for mobile applications. For this purpose, we analyzed a small test suite -that we developed using five different testing frameworks for an Android application (K-9 Mail) and observed the changes induced in the tests by the evolution of the UI. We found that up to 75% of code-based tests, and up to 100% of image recognition tests, had to be adapted because of the changes induced by the evolution of the application between two different versions. In addition we identified the main causes of such fragility: changes of identifiers, text or graphics, removal or relocation of elements, activity flow variation, execution time variation, and usage of physical buttons. The preliminary assessment showed that the fragility of UI tests can be a relevant issue also for mobile applications. A few common causes were found that can be used as the basis for providing guidelines for fragility avoidance and repair.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2945404.2945406},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2945404.2945406},
  bytitledomenico = {doubt},
  doi             = {10.1145/2945404.2945406},
  isbn            = {978-1-4503-4412-8},
  keywords        = {Empirical, Fragility, Test, UI,Automated},
  url             = {http://doi.acm.org/10.1145/2945404.2945406},
}

@InProceedings{ISI:000390237000026,
  author          = {Baek, Young-Min and Bae, Doo-Hwan},
  title           = {{Automated Model-Based Android GUI Testing using Multi-level GUI Comparison Criteria}},
  booktitle       = {2016 31ST IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE)},
  year            = {2016},
  editor          = {{Lo, D and Apel, S and Khurshid, S}},
  series          = {IEEE ACM International Conference on Automated Software Engineering},
  pages           = {238--249},
  organization    = {IEEE; ACM; ACM Special Interest Grp Software Engn; ACM SIGAI; Singapore Management Univ; LEE Fdn; Singapore Management Univ, Sch Informat Syst; Living Analyt Res Ctr; Software Analyt Res Ctr; Tata Consultancy Serv; Microsoft Res; NEC; FUJITSU},
  abstract        = {Automated Graphical User Interface (GUI) testing is one of the most
widely used techniques to detect faults in mobile applications (apps)
and to test functionality and usability. GUI testing exercises behaviors
of an application under test (AUT) by executing events on GUIs and
checking whether the app behaves correctly. In particular, because
Android leads in market share of mobile OS platforms, a lot of research
on automated Android GUI testing techniques has been performed. Among
various techniques, we focus on model-based Android GUI testing that
utilizes a GUI model for systematic test generation and effective
debugging support. Since test inputs are generated based on the
underlying model, accurate GUI modeling of an AUT is the most crucial
factor in order to generate effective test inputs. However, most modern
Android apps contain a number of dynamically constructed GUIs that make
accurate behavior modeling more challenging. To address this problem, we
propose a set of multi-level GUI Comparison Criteria (GUICC) that
provides the selection of multiple abstraction levels for GUI model
generation. By using multilevel GUICC, we conducted empirical
experiments to identify the influence of GUICC on testing effectiveness.
Results show that our approach, which performs model-based testing with
multi-level GUICC, achieved higher effectiveness than activity-based GUI
model generation. We also found that multi-level GUICC can alleviate the
inherent state explosion problems of existing a single-level GUICC for
behavior modeling of real-world Android apps by flexibly manipulating
GUICC.},
  annote          = {31st IEEE/ACM International Conference on Automated Software Engineering (ASE), Singapore, SINGAPORE, SEP 03-07, 2016},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2970276.2970313},
  bytitledomenico = {yes},
  doi             = {10.1145/2970276.2970313},
  isbn            = {978-1-4503-3845-5},
  issn            = {1527-1366},
}

@Article{Ali2018,
  author          = {Ali, A and Maghawry, H A and Badr, N},
  title           = {{Automated parallel GUI testing as a service for mobile applications}},
  journal         = {Journal of Software: Evolution and Process},
  year            = {2018},
  volume          = {30},
  number          = {10},
  abstract        = {Recently, testing mobile applications is gaining much attention due to the widespread of smartphones and the tremendous number of mobile applications development. It is essential to test mobile applications before being released for the public use. Graphical user interface (GUI) testing is a type of mobile applications testing conducted to ensure the proper functionality of the GUI components. Typically, GUI testing requires a lot of effort and time whether manual or automatic. Cloud computing is an emerging technology that can be used in the software engineering field to overcome the defects of the traditional testing approaches by using cloud computing resources. As a result, testing-as-a-service is introduced as a service model that conducts all testing activities in a fully automated manner. In this paper, a system for mobile applications GUI testing based on testing-as-a-service architecture is proposed. The proposed system performs all testing activities including automatic test case generation and simultaneous test execution on multiple virtual nodes for testing Android-based applications. The proposed system reduces testing time and meets fast time-to market constraint of mobile applications. Moreover, the proposed system architecture addresses many issues such as maximizing resource utilization, continuous monitoring to ensure system reliability, and applying fault-tolerance approach to handle occurrence of any failure. Copyright {\textcopyright} 2018 John Wiley {\&} Sons, Ltd.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1002/smr.1963},
  bytitledomenico = {doubt},
  doi             = {10.1002/smr.1963},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055214444{\&}doi=10.1002{\%}2Fsmr.1963{\&}partnerID=40{\&}md5=1f3a8eb8333bd8b6169f8b78bb1c336c},
}

@Article{CHEN2018326,
  author          = {Chen, Sen and Xue, Minhui and Fan, Lingling and Hao, Shuang and Xu, Lihua and Zhu, Haojin and Li, Bo},
  title           = {{Automated poisoning attacks and defenses in malware detection systems: An adversarial machine learning approach}},
  journal         = {Computers {\&} Security},
  year            = {2018},
  volume          = {73},
  pages           = {326--344},
  issn            = {0167-4048},
  abstract        = {The evolution of mobile malware poses a serious threat to smartphone security. Today, sophisticated attackers can adapt by maximally sabotaging machine-learning classifiers via polluting training data, rendering most recent machine learning-based malware detection tools (such as Drebin, DroidAPIMiner, and MaMaDroid) ineffective. In this paper, we explore the feasibility of constructing crafted malware samples; examine how machine-learning classifiers can be misled under three different threat models; then conclude that injecting carefully crafted data into training data can significantly reduce detection accuracy. To tackle the problem, we propose KuafuDet, a two-phase learning enhancing approach that learns mobile malware by adversarial detection. KuafuDet includes an offline training phase that selects and extracts features from the training set, and an online detection phase that utilizes the classifier trained by the first phase. To further address the adversarial environment, these two phases are intertwined through a self-adaptive learning scheme, wherein an automated camouflage detector is introduced to filter the suspicious false negatives and feed them back into the training phase. We finally show that KuafuDet can significantly reduce false negatives and boost the detection accuracy by at least 15{\%}. Experiments on more than 250,000 mobile applications demonstrate that KuafuDet is scalable and can be highly effective as a standalone system.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817302444},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.11.007},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2017.11.007},
  keywords        = {Adversarial machine learning, KD, Manipulation, Poisoning attacks,Malware detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817302444},
}

@Conference{Adetunji2018,
  author          = {Adetunji, A O and Butakov, S and Zavarsky, P},
  title           = {{Automated Security Configuration Checklist for Apple iOS Devices Using SCAP v1.2}},
  booktitle       = {2018 International Conference on Platform Technology and Service, PlatCon 2018},
  year            = {2018},
  abstract        = {The security content automation includes configurations of large number of systems, installation of patches securely, verification of security-related configuration settings, compliance with security policies and regulatory requirements, and ability to respond quickly when new threats are discovered [1]. Although humans are important in information security management, humans sometimes introduce errors and inconsistencies in an organization due to manual nature of their tasks [2]. Security Content Automation Protocol was developed by the U.S. NIST to automate information security management tasks such as vulnerability and patch management, and to achieve continuous monitoring of security configurations in an organization. In this paper, SCAP is employed to develop an automated security configuration checklist for use in verifying Apple iOS device configuration against the defined security baseline to enforce policy compliance in an enterprise. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/PlatCon.2018.8472773},
  bytitledomenico = {doubt},
  doi             = {10.1109/PlatCon.2018.8472773},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055670069{\&}doi=10.1109{\%}2FPlatCon.2018.8472773{\&}partnerID=40{\&}md5=644d7da58dae226406e13881a3c63c95},
}

@Article{ISI:000401431300122,
  author          = {Cui, Kai and Zhou, Kuanjiu and Song, Houbing and Li, Mingchu},
  title           = {{Automated Software Testing Based on Hierarchical State Transition Matrix for Smart TV}},
  journal         = {IEEE ACCESS},
  year            = {2017},
  volume          = {5},
  pages           = {6492--6501},
  issn            = {2169-3536},
  abstract        = {Smart TV in China as an important component of the smart home, does not
only have the functions of the traditional TV, but also have the
functions, such as distance education, remote monitoring, E-business,
and media playing, which brings about its software to be more complex in
structure and larger in scale, accordingly, the total testing efficiency
becomes lower when using traditional testing methods, and the
deep-hidden software defects cannot be detected efficiently and
effectively. A novel automatic software testing method based on system
design specifications is proposed to improve the smart TV software
testing efficiency. First, the behavior of the smart TV is modeled,
based on the system design specification with hierarchical state
transition matrixes (HSTMs). The scale of the state model of the smart
TV is lowered by setting the group state according to the choice of the
key nodes based on the importance of the nodes in the network; then, the
HSTM model is converted into an expanded regular expression (ERE) with
the memory property. Second, every closure operator in the ERE is
replaced recursively with a certain integral value, according to the
cyclomatic complexity of an ERE in the closure to generate a simplified
ERE. Then, a test case is generated from the simplified ERE. Finally,
the test cases are converted into python script, and a test platform is
designed to send the python script to the Android smart TV automatically
through its android debug bridge interface. The practical application
shows that the test period is shortened, and comparing with the
traditional manual test methods, more errors can be tested.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ACCESS.2017.2694880},
  bytitledomenico = {doubt},
  doi             = {10.1109/ACCESS.2017.2694880},
}

@Article{Yusop201697,
  author          = {Yusop, N and Kamalrudin, M and Sidek, S and Grundy, J},
  title           = {{Automated support to capture and validate security requirements for mobile apps}},
  journal         = {Communications in Computer and Information Science},
  year            = {2016},
  volume          = {671},
  pages           = {97--112},
  abstract        = {Mobile application usage has become widespread and significant as it allows interactions between people and services anywhere and anytime. However, issues related to security have become a major concern among mobile users as insecure applications may lead to security vulnerabilities that make them easily compromised by hackers. Thus, it is important for mobile application developers to validate security requirements of mobile apps at the earliest stage to prevent potential security problems. In this paper, we describe our automated approach and tool, called MobiMEReq that helps to capture and validate the security attributes requirements of mobile apps. We employed the concept of Test Driven Development (TDD) with a model-based testing strategy using Essential Use Cases (EUCs) and Essential User Interface (EUI) models. We also conducted an evaluation to compare the performance and correctness of our tool in various application domains. The results of the study showed that our tool is able to help requirements engineers to easily capture and validate security-related requirements of mobile applications. {\textcopyright} Springer Nature Singapore Pte Ltd. 2016.},
  annote          = {cited By 4},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-981-10-3256-1_7},
  bytitledomenico = {yes},
  doi             = {10.1007/978-981-10-3256-1_7},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84996644411{\&}doi=10.1007{\%}2F978-981-10-3256-1{\_}7{\&}partnerID=40{\&}md5=e681e14e3b84555448f843d41047fd9f},
}

@Conference{Zheng2017253,
  author          = {Zheng, H and Li, D and Liang, B and Zeng, X and Zheng, W and Deng, Y and Lam, W and Yang, W and Xie, T},
  title           = {{Automated test input generation for android: Towards getting there in an industrial case}},
  booktitle       = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track, ICSE-SEIP 2017},
  year            = {2017},
  pages           = {253--262},
  abstract        = {Monkey, a random testing tool from Google, has been popularly used in industrial practices for automatic test input generation for Android due to its applicability to a variety of application settings, e.g., ease of use and compatibility with different Android platforms. Recently, Monkey has been under the spotlight of the research community: Recent studies found out that none of the studied tools from the academia were actually better than Monkey when applied on a set of open source Android apps. Our recent efforts performed the first case study of applying Monkey on WeChat, a popular messenger app with over 800 million monthly active users, and revealed many limitations of Monkey along with developing our improved approach to alleviate some of these limitations. In this paper, we explore two optimization techniques to improve the effectiveness and efficiency of our previous approach. We also conduct manual categorization of not-covered activities and two automatic coverage-analysis techniques to provide insightful information about the not-covered code entities. Lastly, we present findings of our empirical studies of conducting automatic random testing on WeChat with the preceding techniques. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 8},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSE-SEIP.2017.32},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICSE-SEIP.2017.32},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026753603{\&}doi=10.1109{\%}2FICSE-SEIP.2017.32{\&}partnerID=40{\&}md5=f68710a8cddba770b45712dd5da8c4b7},
}

@Article{Madeja201880,
  author          = {Madeja, Matej and Poruban, Jaroslav and Porub{\"{a}}n, J},
  title           = {{Automated testing environment and assessment of assignments for Android MOOC}},
  journal         = {OPEN COMPUTER SCIENCE},
  year            = {2018},
  volume          = {8},
  number          = {1},
  pages           = {80--92},
  issn            = {2299-1093},
  abstract        = {This paper describes the design of a testing environment for massive
assessment of assignments for Android application programming courses.
Specific testing methods and tool suggestions are continuously consulted
with Wirecard company, dedicated to the development of mobile
applications. The paper also analyzes the most common mistakes of
students and suggests ways to uncover them through tests. Based on
these, it creates tests, compares the performance of the emulator and
real device tests, and the proposed tools are partially retrospectively
tested on assignments from the previous run of a particular Android
application programming course. From partial results the paper suggests
changes for the course in relation to the testing environment and
deploys it in the background of the course alongside the manual
evaluation. It describes testing experience, analyzes the results and
suggests changes for the future.},
  annote          = {From Duplicate 1 (Automated testing environment and assessment of assignments for Android MOOC - Madeja, M; Porub{\"{a}}n, J) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1515/comp-2018-0007},
  bytitledomenico = {doubt},
  doi             = {10.1515/comp-2018-0007},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050982537{\&}doi=10.1515{\%}2Fcomp-2018-0007{\&}partnerID=40{\&}md5=4437f7d76814cf283151d0db6f6de0fa},
}

@Conference{Saad2014,
  author          = {Saad, N H and {Awang Abu Bakar}, N S},
  title           = {{Automated testing tools for mobile applications}},
  booktitle       = {2014 the 5th International Conference on Information and Communication Technology for the Muslim World, ICT4M 2014},
  year            = {2014},
  abstract        = {Software Testing is known as an important part in software development as the product needs to meet the user's expectations and requirements. The testing tool is developed along with the development of automated software testing to act as a medium to test the software, and the existence of these tools eventually cut down the human's effort, energy, and time. Software testing tools are the key assets of a project that can improve productivity and software quality. As there are many tools in the market nowadays, the process of selecting the tool should be explained in detail and specific towards its functions and efficiency. This paper aims to help the authors in making the tool selection from the various versions of testing tools. This study finally chose the most suitable tool according to the research needs. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICT4M.2014.7020665},
  bytitledomenico = {no},
  doi             = {10.1109/ICT4M.2014.7020665},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84946687028{\&}doi=10.1109{\%}2FICT4M.2014.7020665{\&}partnerID=40{\&}md5=6f83fec37a559f8cd550e5f21df2a255},
}

@Conference{Kluth2014149,
  author          = {Kluth, W and Krempels, K.-H. and Samsel, C},
  title           = {{Automated usability testing for mobile applications}},
  booktitle       = {WEBIST 2014 - Proceedings of the 10th International Conference on Web Information Systems and Technologies},
  year            = {2014},
  volume          = {2},
  pages           = {149--156},
  abstract        = {In this paper we discuss the design and implementation of an automated usability evaluation method for iOS applications. In contrast to common usability testing methods, it is not explicitly necessary to involve an expert or subjects. These circumstances reduce costs, time and personnel expenditures. Professionals are replaced by the automation tool while test participants are exchanged with consumers of the launched application. Interactions of users are captured via a fully automated capturing framework which creates a record of user interactions for each session and sends them to a central server. A usability problem is defined as a sequence of interactions and pattern recognition specified by interaction design patterns is applied to find these problems. Nevertheless, it falls back to the user input for accurate results. Similar to the problem, the solution of the problem is based on the HCI design pattern. An evaluation shows the functionality of our approach compared to a traditional usability evaluation method.},
  annote          = {cited By 4},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902386283%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=d9c5472fb716ec4f466318647c5b14f5},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902386283{\&}partnerID=40{\&}md5=d9c5472fb716ec4f466318647c5b14f5},
}

@Article{Braghin200737,
  author          = {Braghin, C and Sharygina, N and Barone-Adesi, K},
  title           = {{Automated verification of security policies in mobile code}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2007},
  volume          = {4591 LNCS},
  pages           = {37--53},
  abstract        = {This paper describes an approach for the automated verification of mobile programs. Mobile systems are characterized by the explicit notion of locations (e.g., sites where they run) and the ability to execute at different locations, yielding a number of security issues. We give formal semantics to mobile systems as Labeled Kripke Structures, which encapsulate the notion of the location net. The location net summarizes the hierarchical nesting of threads constituting a mobile program and enables specifying security policies. We formalize a language for specifying security policies and show how mobile programs can be exhaustively analyzed against any given security policy by using model checking techniques. We developed and experimented with a prototype framework for analysis of mobile code, using the SATABS model checker. Our approach relies on SATABS's support for unbounded thread creation and enhances it with location net abstractions, which are essential for verifying large mobile programs. Our experimental results on various benchmarks are encouraging and demonstrate advantages of the model checking-based approach, which combines the validation of security properties with other checks, such as for buffer overflows. {\textcopyright} Springer-Verlag Berlin Heidelberg 2007.},
  annote          = {cited By 4},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-38149050539%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=7021b628d001809e008f787f2925d1df},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-38149050539{\&}partnerID=40{\&}md5=7021b628d001809e008f787f2925d1df},
}

@Article{Kamalrudin2014246,
  author          = {Kamalrudin, M and Noraiza, M and Grundy, J and Hosking, J and Robinson, M},
  title           = {{Automatic acceptance test case generation from essential use cases}},
  journal         = {Frontiers in Artificial Intelligence and Applications},
  year            = {2014},
  volume          = {265},
  pages           = {246--255},
  abstract        = {Requirements validation is a crucial process to determine whether client-stakeholders' needs and expectations of a product are sufficiently correct and complete. Various requirements validation techniques have been used to evaluate the correctness and quality of requirements, but most of these techniques are tedious, expensive and time consuming. Accordingly, most project members are reluctant to invest their time and efforts in the requirements validation process. Moreover, automated tool supports that promote effective collaboration between the client-stakeholders and the engineers are still lacking. In this paper, we describe a novel approach that combines prototyping and test-based requirements techniques to improve the requirements validation process and promote better communication and collaboration between requirements engineers and clientstakeholders. To justify the potential of this prototype tool, we also present three types of evaluation conducted on the prototpye tool, which are the usability survey, 3-tool comparison analysis and expert reviews. {\textcopyright} 2014 The authors and IOS Press. All rights reserved.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.3233/978-1-61499-434-3-246},
  bytitledomenico = {doubt},
  doi             = {10.3233/978-1-61499-434-3-246},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948771900{\&}doi=10.3233{\%}2F978-1-61499-434-3-246{\&}partnerID=40{\&}md5=5a12105b401fd01c4a8986ebb841b12c},
}

@Article{ISI:000419409200041,
  author          = {Costa, Gabriele and Merlo, Alessio and Verderame, Luca and Armando, Alessandro},
  title           = {{Automatic security verification of mobile app configurations}},
  journal         = {FUTURE GENERATION COMPUTER SYSTEMS-THE INTERNATIONAL JOURNAL OF ESCIENCE},
  year            = {2018},
  volume          = {80},
  pages           = {519--536},
  month           = {mar},
  issn            = {0167-739X},
  abstract        = {The swift and continuous evolution of mobile devices is encouraging both
private and public organizations to adopt the Bring Your Own Device
(BYOD) paradigm. As a matter of fact, the BYOD paradigm drastically
reduces costs and increases productivity by allowing employees to carry
out business tasks on their personal devices. However, it also increases
the security concerns, since a compromised device could disruptively
access the resources of the organization. The current mobile application
distribution model based on application markets does not cope with this
issue. In a previous work the concept of secure meta-market has been
introduced as a mean to distribute mobile applications always guaranteed
to comply with any given BYOD policy. This is achieved through a
suitable combination of static analysis (i.e. model checking) and code
instrumentation techniques. Although crucial, enforcing security
policies over individual applications is not sufficient in general.
Indeed, several well documented threats arise from the malicious
interaction among applications which are harmless if isolated. In this
paper, a novel technique for the security verification of groups of
mobile app is proposed. The approach relies on partial model checking
(PMC) to extend the existing security guarantees to groups of
applications. The experimental results demonstrate the viability of the
approach. Moreover, we show through a case study that even a fairly
simple security policy can be violated by applications which are
compliant if considered one by one. (C) 2016 Elsevier B.V. All rights
reserved.},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.future.2016.06.014},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.future.2016.06.014},
}

@Conference{Hu201177,
  author          = {Hu, C and Neamtiu, I},
  title           = {{Automating GUI testing for android applications}},
  booktitle       = {Proceedings - International Conference on Software Engineering},
  year            = {2011},
  pages           = {77--83},
  abstract        = {Users increasingly rely on mobile applications for computational needs. Google Android is a popular mobile platform, hence the reliability of Android applications is becoming increasingly important. Many Android correctness issues, however, fall outside the scope of traditional verification techniques, as they are due to the novelty of the platform and its GUI-oriented application construction paradigm. In this paper we present an approach for automating the testing process for Android applications, with a focus on GUI bugs. We first conduct a bug mining study to understand the nature and frequency of bugs affecting Android applications; our study finds that GUI bugs are quite numerous. Next, we present techniques for detecting GUI bugs by automatic generation of test cases, feeding the application random events, instrumenting the VM, producing log/trace files and analyzing them post-run. We show how these techniques helped to re-discover existing bugs and find new bugs, and how they could be used to prevent certain bug categories. We believe our study and techniques have the potential to help developers increase the quality of Android applications. {\textcopyright} 2011 ACM.},
  annote          = {cited By 142},
  bdsk-url-1      = {http://dx.doi.org/10.1145/1982595.1982612},
  bytitledomenico = {doubt},
  doi             = {10.1145/1982595.1982612},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959449597{\&}doi=10.1145{\%}2F1982595.1982612{\&}partnerID=40{\&}md5=b45f9883459a5bca5af610a195c57e2e},
}

@InProceedings{Hesenius:2014:AUT:2628363.2628391,
  author          = {Hesenius, Marc and Griebe, Tobias and Gries, Stefan and Gruhn, Volker},
  title           = {{Automating UI Tests for Mobile Applications with Formal Gesture Descriptions}},
  booktitle       = {Proceedings of the 16th International Conference on Human-computer Interaction with Mobile Devices {\&}{\#}38; Services},
  year            = {2014},
  series          = {MobileHCI '14},
  pages           = {213--222},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Touch- and gesture-based interfaces are common in applications for mobile devices. By evolving into mass market products, smartphones and tablets created an increased need for specialized software engineering methods. To ensure high quality applications, constant and efficient testing is crucial in software development. However, testing mobile applications is still cumbersome, time-consuming and error-prone. One reason is the devices' focus on touch-based interaction - gestures cannot be easily incorporated into automated application tests. We present an extension to the popular Calabash testing framework solving this problem by allowing to describe gestures with a formal language in tests scripts.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2628363.2628391},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2628363.2628391},
  bytitledomenico = {yes},
  doi             = {10.1145/2628363.2628391},
  isbn            = {978-1-4503-3004-6},
  keywords        = {gestures, mobile applications, software engineering, test automation, testing,gesture formalization},
  url             = {http://doi.acm.org/10.1145/2628363.2628391},
}

@Article{YANG20199,
  author          = {Yang, Yafang and Guo, Bin and Wang, Zhu and Li, Mingyang and Yu, Zhiwen and Zhou, Xingshe},
  title           = {{BehaveSense: Continuous authentication for security-sensitive mobile apps using behavioral biometrics}},
  journal         = {Ad Hoc Networks},
  year            = {2019},
  volume          = {84},
  pages           = {9--18},
  issn            = {1570-8705},
  abstract        = {With the emergence of smartphones as an essential part of our daily lives, continuous authentication becomes an urgent need which could efficiently protect user security and privacy. However, only a small percentage of apps contain sensitive data. To save energy and protect user security, we propose BehaveSense, an accurate and efficient continuous authentication method for security-sensitive mobile apps using touch-based behavioral biometrics. By exploring four different types of touch operations, we train the owner model using One-Class SVM (OCSVM) and isolation forest (iForest), and calculate the accuracy of each type with the model. Afterwards, we calculate the confidence level of each type using the Bayesian theorem. Finally, we obtain the accuracy of a touch operation sequence with an improved expectedprob algorithm. To validate the effectiveness of the proposed method, we conduct a series of experiments. We collect the WeChat app data of 45 volunteers during two weeks. Experimental results show that our method can recognize user identity efficiently. Specifically, our method achieves average accuracy of approaching 95.85{\%} for touch operation sequence, when considering 9 touch operations. Our method is very promising to authenticate user.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1570870518306899},
  bdsk-url-2      = {https://doi.org/10.1016/j.adhoc.2018.09.015},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.adhoc.2018.09.015},
  keywords        = {Anomaly detection, Authentication, Bayesian theorem, Human behavior understanding,Smartphone sensing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1570870518306899},
}

@Conference{Amin2016,
  author          = {Amin, M R and Zaman, M and Hossain, M S and Atiquzzaman, M},
  title           = {{Behavioral malware detection approaches for Android}},
  booktitle       = {2016 IEEE International Conference on Communications, ICC 2016},
  year            = {2016},
  abstract        = {Android, the fastest growing mobile operating system released in November 2007, boasts of a staggering 1.4 billion active users. Android users are susceptible to malicious applications that can hack into their personal data due to the lack of careful monitoring of their in-device security. There have been numerous works on devising malware detection methods. However, none of earlier works are conclusive enough for direct application and lack experimental validation. In this paper, we have investigated the natures and identities of malicious applications and devised two novel detection approaches for detection: network-based detection and system call based detection approaches. To evaluate our proposed approaches, we performed experiments on a subset of 1260 malwares, acquired from Android Malware Genome Project, a malware database created by Y. Zhou et al. [1] and 227 non-malware (benign) applications. Results show that our system call based approach is able to detect malwares with an accuracy of 87{\%} which is quite significant in general malware detection context. Our proposed detection approaches along with the experimental results will provide security professionals with more precise and quantitative approaches in their investigations of mobile malwares on Android systems. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICC.2016.7511573},
  bytitledomenico = {yes},
  doi             = {10.1109/ICC.2016.7511573},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84981313545{\&}doi=10.1109{\%}2FICC.2016.7511573{\&}partnerID=40{\&}md5=20c2c90790655e17ea9da96d0192796f},
}

@Article{VALCKE20169,
  author          = {Valcke, Jan},
  title           = {{Best practices in mobile security}},
  journal         = {Biometric Technology Today},
  year            = {2016},
  volume          = {2016},
  number          = {3},
  pages           = {9--11},
  issn            = {0969-4765},
  abstract        = {Mobile services are changing the landscape of banking (and other industries). They offer the potential to create new revenue opportunities and drive increased customer retention and cost savings: for example, over 60{\%} of smartphone and tablet users report that mobile banking capabilities are `important' or `extremely important' in their decision to switch banks1. But while financial institutions that introduce more mobile services can simultaneously shift transactions away from higher-cost channels and also retain and attract more customers, they need to pay close attention to the security of mobile apps and consumers, without impacting the user experience.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0969476516300510},
  bdsk-url-2      = {https://doi.org/10.1016/S0969-4765(16)30051-0},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S0969-4765(16)30051-0},
  url             = {http://www.sciencedirect.com/science/article/pii/S0969476516300510},
}

@Article{ZHANG2017516,
  author          = {Zhang, Xiaolu and Baggili, Ibrahim and Breitinger, Frank},
  title           = {{Breaking into the vault: Privacy, security and forensic analysis of Android vault applications}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {70},
  pages           = {516--531},
  issn            = {0167-4048},
  abstract        = {In this work we share the first account for the forensic analysis, security and privacy of Android vault applications. Vaults are designed to be privacy enhancing as they allow users to hide personal data but may also be misused to hide incriminating files. Our work has already helped law enforcement in the state of Connecticut to reconstruct 66 incriminating images and 18 videos in a single criminal case. We present case studies and results from analyzing 18 Android vault applications (accounting for nearly 220 million downloads from the Google Play store) by reverse engineering them and examining the forensic artifacts they produce. Our results showed that 1218 obfuscated their code and 518 applications used native libraries hindering the reverse engineering process of these applications. However, we still recovered data from the applications without root access to the Android device as we were able to ascertain hidden data on the device without rooting for 1018 of the applications. 618 of the vault applications were found to not encrypt photos they stored, and 818 were found to not encrypt videos. 718 of the applications were found to store passwords in cleartext. We were able to also implement a swap attack on 518 applications where we achieved unauthorized access to the data by swapping the files that contained the password with a self-created one. In some cases, our findings illustrate unfavorable security implementations of privacy enhancing applications, but also showcase practical mechanisms for investigators to gain access to data of evidentiary value. In essence, we broke into the vaults.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817301529},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.07.011},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2017.07.011},
  keywords        = {Android, Mobile applications, Privacy, Security, Vault applications,Forensics},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817301529},
}

@Article{SHAULOV20165,
  author          = {Shaulov, Michael},
  title           = {{Bridging mobile security gaps}},
  journal         = {Network Security},
  year            = {2016},
  volume          = {2016},
  number          = {1},
  pages           = {5--8},
  issn            = {1353-4858},
  abstract        = {Moving targets may be harder for attackers to hit, but the allure of cold hard cash and geopolitical influence are powerful incentives for them to improve their aim. In the past year, the rate of attacks on iOS devices has escalated rapidly, including nine major attacks like WireLurker, PawnStorm and XCodeGhost. On Android, the situation is much more dire with over 10 new, sophisticated attacks in four months alone including Ghostpush and Braintest. Hackers and cyber-criminals are now focusing much of their efforts on mobile platforms, often as a first step to breaking into corporate networks. There are plenty of point solutions offered by the security industry, but many of the vulnerabilities lie in the gaps in the protections they offer. Michael Shaulov of Check Point examines what protective measures exist and how to fill those gaps to give the right balance of protection, mobility and productivity.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S135348581630006X},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(16)30006-X},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1353-4858(16)30006-X},
  url             = {http://www.sciencedirect.com/science/article/pii/S135348581630006X},
}

@Article{Tao20161605,
  author          = {Tao, Chuanqi and Gao, Jerry},
  title           = {{Building a Model-Based GUI Test Automation System for Mobile Applications}},
  journal         = {INTERNATIONAL JOURNAL OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING},
  year            = {2016},
  volume          = {26},
  number          = {9-10},
  pages           = {1605--1615},
  issn            = {0218-1940},
  abstract        = {With the rapid advance of mobile computing technology and wireless networking, there is a significant increase of mobile applications (apps). This brings new business requirements and demands in mobile software testing, and causes new issues and challenges in mobile test automation. Existing mobile application testing approaches mostly concentrate on GUI-based testing, load and performance testing without considering large-scale concurrent mobile app test automation, and model-based test coverage analysis. In this paper, a mobile hierarchical GUI model is proposed to present mobile operation scenario flows and gesture features in a hierarchical manner, in order to facilitate test dependency analysis in test automation. Mobile app test coverage analysis is performed based on GUI ripping models. The paper also presents a developed system that provides a test automation solution using GUI models. Finally, the paper reports a case study to indicate the feasibility and effectiveness of the proposed approach. {\textcopyright} 2016 World Scientific Publishing Company.},
  annote          = {From Duplicate 1 (Building a Model-Based GUI Test Automation System for Mobile Applications - Tao, C; Gao, J) cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1142/S0218194016710042},
  bytitledomenico = {doubt},
  doi             = {10.1142/S0218194016710042},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013324766{\&}doi=10.1142{\%}2FS0218194016710042{\&}partnerID=40{\&}md5=18c256f130aaf93de8a0bca52b49d271},
}

@Article{MARTIN2018121,
  author          = {Mart{\'{i}}n, Alejandro and Rodr{\'{i}}guez-Fern{\'{a}}ndez, V{\'{i}}ctor and Camacho, David},
  title           = {{CANDYMAN: Classifying Android malware families by modelling dynamic traces with Markov chains}},
  journal         = {Engineering Applications of Artificial Intelligence},
  year            = {2018},
  volume          = {74},
  pages           = {121--133},
  issn            = {0952-1976},
  abstract        = {Malware writers are usually focused on those platforms which are most used among common users, with the aim of attacking as many devices as possible. Due to this reason, Android has been heavily attacked for years. Efforts dedicated to combat Android malware are mainly concentrated on detection, in order to prevent malicious software to be installed in a target device. However, it is equally important to put effort into an automatic classification of the type, or family, of a malware sample, in order to establish which actions are necessary to mitigate the damage caused. In this paper, we present CANDYMAN, a tool that classifies Android malware families by combining dynamic analysis and Markov chains. A dynamic analysis process allows to extract representative information of a malware sample, in form of a sequence of states, while a Markov chain allows to model the transition probabilities between the states of the sequence, which will be used as features in the classification process. The space of features built is used to train classical Machine Learning, including methods for imbalanced learning, and Deep Learning algorithms, over a dataset of malware samples from different families, in order to evaluate the proposed method. Using a collection of 5,560 malware samples grouped into 179 different families (extracted from the Drebin dataset), and once made a selection based on a minimum number of relevant and valid samples, a final set of 4,442 samples grouped into 24 different malware families was used. The experimental results indicate a precision performance of 81.8{\%} over this dataset.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0952197618301374},
  bdsk-url-2      = {https://doi.org/10.1016/j.engappai.2018.06.006},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.engappai.2018.06.006},
  keywords        = {Classification, Deep Learning, Dynamic analysis, Markov chains,Android malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S0952197618301374},
}

@Conference{McAfee2017213,
  author          = {McAfee, P and {Wiem Mkaouer}, M and Krutz, D E},
  title           = {{CATE: Concolic Android Testing Using Java PathFinder for Android Applications}},
  booktitle       = {Proceedings - 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2017},
  year            = {2017},
  pages           = {213--214},
  abstract        = {Like all software, Android applications are not immune to bugs, security vulnerabilities, and a wide range of other issues. Concolic analysis, a hybrid software verification technique which performs symbolic execution along with a concrete execution path, has been used for a variety of purposes including software testing, code clone detection, and security-related activities. We created a new publicly available concolic analysis tool for analyzing Android applications: Concolic Android TEster (CATE). Building on Java Path Finder (JPF-SPF), this tool performs concolic analysis on a raw Android application file (or source code) and provides output in a useful and easy to understand format. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/MOBILESoft.2017.35},
  bytitledomenico = {no},
  doi             = {10.1109/MOBILESoft.2017.35},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027022510{\&}doi=10.1109{\%}2FMOBILESoft.2017.35{\&}partnerID=40{\&}md5=36f059f8d89d1200d458974f42a1dacf},
}

@InProceedings{Naik:2014:CCP:2593501.2593504,
  author          = {Naik, Kshirasagar and Ali, Yasir and Mahinthan, Veluppillai and Singh, Ajit and Abogharaf, Abdulhakim},
  title           = {{Categorizing Configuration Parameters of Smartphones for Energy Performance Testing}},
  booktitle       = {Proceedings of the 9th International Workshop on Automation of Software Test},
  year            = {2014},
  series          = {AST 2014},
  pages           = {15--21},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Energy performance testing in smartphones is a challenging task and the extent of exhaustive testing depends on the system configurations for different parameters and applications. In this paper, we propose a technique to classify the configuration parameters of a smartphone by partitioning them into two groups based on their maximum differential power (impact on power consumption). We validate the technique by applying it to four different smartphones: BlackBerry Bold 9700, BlackBerry Z10, Apple iPhone 3GS and Samsung Galaxy Nexus. The four devices represent a wide spectrum of devices with four operating systems (BB7, BB10, iOS, and Android), three makers (BlackBerry, Apple and Samsung), four hardware platforms, and relatively old and new devices.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2593501.2593504},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2593501.2593504},
  bytitledomenico = {doubt},
  doi             = {10.1145/2593501.2593504},
  isbn            = {978-1-4503-2858-6},
  keywords        = {energy performance, software testing,Smartphone},
  url             = {http://doi.acm.org/10.1145/2593501.2593504},
}

@Conference{Ma2016711,
  author          = {Ma, S and Lo, D and Li, T and Deng, R H},
  title           = {{CDRep: Automatic repair of cryptographic misuses in android applications}},
  booktitle       = {ASIA CCS 2016 - Proceedings of the 11th ACM Asia Conference on Computer and Communications Security},
  year            = {2016},
  pages           = {711--722},
  abstract        = {Cryptography is increasingly being used in mobile applications to provide various security services; from user authentication, data privacy, to secure communications. However, there are plenty of mistakes that developers could accidentally make when using cryptography in their mobile apps and such mistakes can lead to a false sense of security. Recent research efforts indeed show that a significant portion of mobile apps in both Android and iOS platforms misused cryptographic APIs. In this paper, we present CDRep, a tool for automatically repairing cryptographic misuse defects in Android apps. We classify such defects into seven types and manually assemble the corresponding fix patterns based on the best practices in cryptographic implementations. CDRep consists of two phases, a detection phase which identifies defect locations in a mobile app and a repair phase which repairs the vulnerable app automatically. In our validation, CDRep is able to successfully repair 94.5{\%} of 1,262 vulnerable apps. Furthermore, CDRep is lightweight, the average runtime to generate a patch is merely 19.3 seconds and the size of a repaired app increases by only 0.667{\%} on average. {\textcopyright} 2016 ACM.},
  annote          = {cited By 9},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2897845.2897896},
  bytitledomenico = {doubt},
  doi             = {10.1145/2897845.2897896},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979701187{\&}doi=10.1145{\%}2F2897845.2897896{\&}partnerID=40{\&}md5=2e855005ab4e4a44446f127274779831},
}

@Article{Wu2018231,
  author          = {Wu, Z and Chen, X and Du, X and Yang, Z},
  title           = {{CDroid: practically implementation a formal-analyzed CIFC model on Android}},
  journal         = {Computers and Security},
  year            = {2018},
  volume          = {78},
  pages           = {231--244},
  abstract        = {Decentralized information flow control (DIFC) operating systems provide mechanisms for applications to handle the secrecy and integrity of their data by themselves. DIFC adapts to the distributed systems well, but not for the centralized authorization systems where an administrator manages all the privileges. For example, Android is full of untrusted third-party applications. A phone user may want to specify what kind of application can deal with what kind of private data by enforcing information flow control. To address this, we proposed a novel formal-described and security-proofed centralized information flow control (CIFC) model. In CIFC, taint tag of private data and capability label of applications are designed to support fine-grained and user-defined information flow control. Differs from DIFC and classic information flow control models, CIFC model controls information flow according to the relation between tag and label rather than the relation between two labels of applications. We use Value-passing Security Process Algebra (VSPA) to clarify the formal semantics of CIFC model. The verification of system equivalence proves that the model guarantees the noninterference security property in virtue of Checker of Persistent Security (CoPS) tool. We also implemented CDroid, a prototype of the CIFC model which can track and control information flow at runtime. CDroid is demonstrated to be an accurate system to achieve the security goal through several function test experiments. Furthermore, CDroid has 5{\%} lead in memory consumption and 17{\%} overhead of runtime performance compared to Android. {\textcopyright} 2018 Elsevier Ltd},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.cose.2018.07.005},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.cose.2018.07.005},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050566968{\&}doi=10.1016{\%}2Fj.cose.2018.07.005{\&}partnerID=40{\&}md5=08595b082fe6e5a8890bceef013e588c},
}

@InCollection{CHENG2017203,
  author          = {Cheng, Bo-Chao},
  title           = {{Chapter 10 - Exploring Mobile Data Security with Energy Awareness}},
  booktitle       = {Adaptive Mobile Computing},
  publisher       = {Academic Press},
  year            = {2017},
  editor          = {Migliardi, Mauro and Merlo, Alessio and Baddar, Sherenaz Al-Haj},
  series          = {Intelligent Data-Centric Systems},
  pages           = {203--215},
  address         = {Boston},
  isbn            = {978-0-12-804603-6},
  abstract        = {With always-on connectivity and portability features, mobile devices have become essential computing platforms for today's user applications, giving access to a wide range of services. However, security issues are still an open topic and a major concern in mobile applications. Moreover, mobile devices have system limitations such as limited battery capacity. This means that security management requires a good understanding of the context of the device (such as energy awareness, security threats, and security policies for encryption/authentication/authorization). Many approaches to provide network security under an energy budget have been proposed, and each approach provides different levels of energy savings and security protections in their respective aspects. This chapter reviews and discusses recent developments of affordable methods for dealing with potential security challenges while considering the energy budget and ongoing security requirements for mobile data.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780128046036000103},
  bdsk-url-2      = {https://doi.org/10.1016/B978-0-12-804603-6.00010-3},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-0-12-804603-6.00010-3},
  keywords        = {Energy awareness, Energy constraints, Mobile security, Vulnerability,Mobile data},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780128046036000103},
}

@InCollection{COSTA2017217,
  author          = {Costa, Gabriele and Armando, Alessandro and Verderame, Luca and Biondo, Daniele and Bocci, Gianluca and Mammoliti, Rocco and Toma, Alessandra},
  title           = {{Chapter 11 - Effective Security Assessment of Mobile Apps with MAVeriC: Design, Implementation, and Integration of a Unified Analysis Environment for Mobile Apps}},
  booktitle       = {Adaptive Mobile Computing},
  publisher       = {Academic Press},
  year            = {2017},
  editor          = {Migliardi, Mauro and Merlo, Alessio and Baddar, Sherenaz Al-Haj},
  series          = {Intelligent Data-Centric Systems},
  pages           = {217--235},
  address         = {Boston},
  isbn            = {978-0-12-804603-6},
  abstract        = {Mobile applications, aka apps, mark the perimeter of the ecosystems of many service providers. Thus, their security assessment is crucial for any company aiming at protecting both customer data and other strategic assets. In fact, software analysts face an extremely hard problem due to, for example, continuous and fast development of new apps and the specific threat model of their organizations. For these reasons, new methodologies and tools are urgently required to drive and possibly automatize the process. In the last years, Poste Italiane carried out several initiatives to reduce the security incidents response time. More recently, MAVeriC was proposed as a unified security analysis platform for Android apps. MAVeriC was designed to achieve a seamless integration of both dynamic and static analysis techniques. In this chapter we present the integration of MAVeriC within the industrial business processes of Poste Italiante. We show how MAVeriC contributed to improve the effectiveness and efficiency of the threat identification as well as the reaction procedures. In particular, we discuss how the automatic security analysis was exploited for two distinct activities. Finally, we describe the application of MAVeriC to a case study involving a real-world application. Such case study is also important for identifying and discussing current limitations and future directions of this research line.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780128046036000115},
  bdsk-url-2      = {https://doi.org/10.1016/B978-0-12-804603-6.00011-5},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-0-12-804603-6.00011-5},
  keywords        = {Dynamic analysis, Security assessment, Static analysis,Mobile apps security},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780128046036000115},
}

@InCollection{HARMENING2017421,
  author          = {Harmening, Jim},
  title           = {{Chapter 25 - Security Management Systems}},
  booktitle       = {Computer and Information Security Handbook (Third Edition)},
  publisher       = {Morgan Kaufmann},
  year            = {2017},
  editor          = {Vacca, John R},
  pages           = {421--426},
  address         = {Boston},
  edition         = {Third Edition},
  isbn            = {978-0-12-803843-7},
  abstract        = {Today, when most companies and government agencies rely on computer networks to store and manage their organizations' data, it is essential that measures be put in place to secure those networks and keep them functioning optimally. Network administrators need to define their security management systems to cover all parts of their computer and network resources. With a plethora of storage devices, including iPads, Android tablets, universal serial bus drives, watches, televisions, digital video recorders, smartphones, Apple TV appliances, Xboxes, and household appliances, management becomes even more difficult. This chapter focuses on security management systems, which are sets of policies put into place by an organization to maintain the security of its computer and network resources. These policies are based on the types of resources that need to be secured, and they depend on the organization. Some groups of policies can be applied to entire industries; others are specific to an individual organization. A security management system starts as a set of policies that dictate the way in which computer resources can be used. The policies are then implemented by the organization's technical departments and enforced. This can be easy for smaller organizations, but it can require a team for larger international organizations that have thousands of business processes. Either way, measures need to be put in place to prevent, respond to, and fix security issues that arise in an organization. Standards that were in place 10years ago may not be adequate for current business practices. As an example, a strong password may have included fewer than 8 characters, whereas modern computers can easily break the password using brute force or rainbow table methods.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780128038437000259},
  bdsk-url-2      = {https://doi.org/10.1016/B978-0-12-803843-7.00025-9},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-0-12-803843-7.00025-9},
  keywords        = {Incident response, Integrity, Network access, Peer-to-peer applications, Remote control software, Risk assessment, Security controls, Security management, Security policies,Confidentiality},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780128038437000259},
}

@InCollection{ARLT2012183,
  author          = {Arlt, Stephan and Bertolini, Cristiano and Pahl, Simon and Sch{\"{a}}f, Martin},
  title           = {{Chapter 6 - Trends in Model-based GUI Testing}},
  publisher       = {Elsevier},
  year            = {2012},
  editor          = {Hurson, Ali and Memon, Atif},
  volume          = {86},
  series          = {Advances in Computers},
  pages           = {183--222},
  abstract        = {This chapter gives an overview of the recent advances in GUI testing. Considering the increasing popularity and fast software development cycles (e.g., desktop and mobile applications), GUI testing gains more importance as it allows us to verify the behavior of a system from the user's perspective. Thus, it can quickly uncover relevant bugs, which a user could face. Traditional capture-replay GUI testing approaches do not meet the demands of developers anymore. Therefore, there is an increasing research activity in model-based GUI testing, where the user interaction behavior is simulated using a graph-based model. In the following, we outline different graphical notations to describe feasible user interactions, and methods to generate and execute test cases from these models. We discuss the benefits and limitations of the state-of-the-art in GUI testing research and give a brief outlook about new trends and possibilities to improve the GUI testing automation.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780123965356000065},
  bdsk-url-2      = {https://doi.org/10.1016/B978-0-12-396535-6.00006-5},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-0-12-396535-6.00006-5},
  issn            = {0065-2458},
  keywords        = {Black-box testing, GUI testing, Gray-box testing, System testing,Software testing},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780123965356000065},
}

@InCollection{LI2017155,
  author          = {Li, X and Yu, L and Luo, X P},
  title           = {{Chapter 7 - On Discovering Vulnerabilities in Android Applications}},
  booktitle       = {Mobile Security and Privacy},
  publisher       = {Syngress},
  year            = {2017},
  editor          = {Au, Man Ho and Choo, Kim-Kwang Raymond},
  pages           = {155--166},
  address         = {Boston},
  isbn            = {978-0-12-804629-6},
  abstract        = {With the prosperity of the app economy, more than four million apps have been published in various markets, including Google Play, Apple Store, etc. However, recent studies show that many apps are vulnerable to various attacks for many reasons, such as a short development period, lack of security awareness, etc. In this chapter, we survey the vulnerabilities found in Android apps and the approaches for discovering the vulnerabilities, because Android occupies more than 80{\%} of global market. Besides introducing major vulnerabilities in Android apps, we model how to discover them as graph traversals. Moreover, we discuss the limitations of existing vulnerability detection approaches and suggest future directions of research.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/B9780128046296000079},
  bdsk-url-2      = {https://doi.org/10.1016/B978-0-12-804629-6.00007-9},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/B978-0-12-804629-6.00007-9},
  keywords        = {Android applications, Vulnerability discovery,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/B9780128046296000079},
}

@Article{WANG201730,
  author          = {Wang, Xing and Wang, Wei and He, Yongzhong and Liu, Jiqiang and Han, Zhen and Zhang, Xiangliang},
  title           = {{Characterizing Android apps' behavior for effective detection of malapps at large scale}},
  journal         = {Future Generation Computer Systems},
  year            = {2017},
  volume          = {75},
  pages           = {30--45},
  issn            = {0167-739X},
  abstract        = {Android malicious applications (malapps) have surged and been sophisticated, posing a great threat to users. How to characterize, understand and detect Android malapps at a large scale is thus a big challenge. In this work, we are motivated to discover the discriminatory and persistent features extracted from Android APK files for automated malapp detection at a large scale. To achieve this goal, firstly we extract a very large number of features from each app and categorize the features into two groups, namely, app-specific features as well as platform-defined features. These feature sets will then be fed into four classifiers (i.e., Logistic Regression, linear SVM, Decision Tree and Random Forest) for the detection of malapps. Secondly, we evaluate the persistence of app-specific and platform-defined features on classification performance with two data sets collected in different time periods. Thirdly, we comprehensively analyze the relevant features selected by Logistic Regression classifier to identify the contributions of each feature set. We conduct extensive experiments on large real-world app sets consisting of 213,256 benign apps collected from six app markets, 4,363 benign apps from Google Play market, and 18,363 malapps. The experimental results and our analysis give insights regarding what discriminatory features are most effective to characterize malapps for building an effective and efficient malapp detection system. With the selected discriminatory features, the Logistic Regression classifier yields the best true positive rate as 96{\%} with a false positive rate as 0.06{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X17307720},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2017.04.041},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.future.2017.04.041},
  keywords        = {Feature comparison, Malicious apps detection,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X17307720},
}

@Article{YANG201727,
  author          = {Yang, Xinli and Lo, David and Li, Li and Xia, Xin and Bissyand{\'{e}}, Tegawend{\'{e}} F and Klein, Jacques},
  title           = {{Characterizing malicious Android apps by mining topic-specific data flow signatures}},
  journal         = {Information and Software Technology},
  year            = {2017},
  volume          = {90},
  pages           = {27--39},
  issn            = {0950-5849},
  abstract        = {Context: State-of-the-art works on automated detection of Android malware have leveraged app descriptions to spot anomalies w.r.t the functionality implemented, or have used data flow information as a feature to discriminate malicious from benign apps. Although these works have yielded promising performance, we hypothesize that these performances can be improved by a better understanding of malicious behavior. Objective: To characterize malicious apps, we take into account both information on app descriptions, which are indicative of apps' topics, and information on sensitive data flow, which can be relevant to discriminate malware from benign apps. Method: In this paper, we propose a topic-specific approach to malware comprehension based on app descriptions and data-flow information. First, we use an advanced topic model, adaptive LDA with GA, to cluster apps according to their descriptions. Then, we use information gain ratio of sensitive data flow information to build so-called ``topic-specific data flow signatures''. Results: We conduct an empirical study on 3691 benign and 1612 malicious apps. We group them into 118 topics and generate topic-specific data flow signature. We verify the effectiveness of the topic-specific data flow signatures by comparing them with the overall data flow signature. In addition, we perform a deeper analysis on 25 representative topic-specific signatures and yield several implications. Conclusion: Topic-specific data flow signatures are efficient in highlighting the malicious behavior, and thus can help in characterizing malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S095058491730366X},
  bdsk-url-2      = {https://doi.org/10.1016/j.infsof.2017.04.007},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.infsof.2017.04.007},
  keywords        = {Data flow signature, Empirical study, Topic-specific,Malware characterization},
  url             = {http://www.sciencedirect.com/science/article/pii/S095058491730366X},
}

@InProceedings{Li:2018:CAD:3213846.3213857,
  author          = {Li, Li and Bissyand{\'{e}}, Tegawend{\'{e}} F and Wang, Haoyu and Klein, Jacques},
  title           = {{CiD: Automating the Detection of API-related Compatibility Issues in Android Apps}},
  booktitle       = {Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  year            = {2018},
  series          = {ISSTA 2018},
  pages           = {153--163},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The Android Application Programming Interface provides the necessary building blocks for app developers to harness the functionalities of the Android devices, including for interacting with services and accessing hardware. This API thus evolves rapidly to meet new requirements for security, performance and advanced features, creating a race for developers to update apps. Unfortunately, given the extent of the API and the lack of automated alerts on important changes, Android apps are suffered from API-related compatibility issues. These issues can manifest themselves as runtime crashes creating a poor user experience. We propose in this paper an automated approach named CiD for systematically modelling the lifecycle of the Android APIs and analysing app bytecode to flag usages that can lead to potential compatibility issues. We demonstrate the usefulness of CiD by helping developers repair their apps, and we validate that our tool outperforms the state-of-the-art on benchmark apps that take into account several challenges for automatic detection.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3213846.3213857},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3213846.3213857},
  bytitledomenico = {doubt},
  doi             = {10.1145/3213846.3213857},
  isbn            = {978-1-4503-5699-2},
  keywords        = {Android, CiD, Framework Base,API-related Compatibility Issue},
  url             = {http://doi.acm.org/10.1145/3213846.3213857},
}

@Article{DORAZIO2018247,
  author          = {D'Orazio, Christian J and Choo, Kim-Kwang Raymond},
  title           = {{Circumventing iOS security mechanisms for APT forensic investigations: A security taxonomy for cloud apps}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {79},
  pages           = {247--261},
  issn            = {0167-739X},
  abstract        = {Mobile devices and apps such as cloud apps are a potential attack vector in an advanced persistent threat (APT) incident, due to their capability to store sensitive data (e.g. backup of private and personal data in digital repositories) and access sensitive resources (e.g. compromising the device to access an organisational network). These devices and apps are, thus, a rich source of digital evidence. It is vital to be able to identify artefacts of forensic interest transmitted to/from and stored on the devices. However, security mechanisms in mobile platforms and apps can complicate the forensic acquisition of data. In this paper, we present techniques to circumvent security mechanisms and facilitate collection of artefacts from cloud apps. We then demonstrate the utility of the circumvention techniques using 18 popular iOS cloud apps as case studies. Based on the findings, we present the first iOS cloud app security taxonomy that could be used in the investigation of an APT incident.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X16305647},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2016.11.010},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.future.2016.11.010},
  keywords        = {iOS cloud apps, iOS cloud forensics, iOS security taxonomy,Advanced persistent threat investigations},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X16305647},
}

@InProceedings{7846970,
  author          = {Lin, Z and Wang, R and Jia, X and Zhang, S and Wu, C},
  title           = {{Classifying Android Malware with Dynamic Behavior Dependency Graphs}},
  booktitle       = {2016 IEEE Trustcom/BigDataSE/ISPA},
  year            = {2016},
  pages           = {378--385},
  abstract        = {Malware, a significant threat to maintain a healthy Android ecosystem, always receives considerable attentions. This paper proposes a new dynamic Android malware classification approach by constructing and analyzing the dynamic behavior dependency graphs together with both framework-level function call behaviors and their data dependencies. Features are extracted from behavior graphs of different malware families in an automated fashion, and are used to classify unknown Android apps. Towards verification, a prototype system is implemented, and both malicious and benign apps are used for test. The experiment results show that 94.7{\%} of the evaluated malware are correctly classified and our approach is robust and can defeat multiple attacks.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TrustCom.2016.0087},
  bytitledomenico = {no},
  doi             = {10.1109/TrustCom.2016.0087},
  issn            = {2324-9013},
  keywords        = {Android (operating system);feature extraction;graph theory;invasive software;pattern classification;dynamic Android malware classification;dynamic behavior dependency graphs;framework-level function call behaviors;feature extraction;Android apps;malicious apps;benign apps;Malware;Androids;Humanoid robots;Feature extraction;Data mining;Java;Monitoring;malware classification;Android;dynamic behavior dependency graph;framework-level function call},
}

@Article{ALMARDINI2014251,
  author          = {Al-Mardini, Mamoun and Aloul, Fadi and Sagahyroon, Assim and Al-Husseini, Luai},
  title           = {{Classifying obstructive sleep apnea using smartphones}},
  journal         = {Journal of Biomedical Informatics},
  year            = {2014},
  volume          = {52},
  pages           = {251--259},
  issn            = {1532-0464},
  abstract        = {Obstructive sleep apnea (OSA) is a serious sleep disorder which is characterized by frequent obstruction of the upper airway, often resulting in oxygen desaturation. The serious negative impact of OSA on human health makes monitoring and diagnosing it a necessity. Currently, polysomnography is considered the gold standard for diagnosing OSA, which requires an expensive attended overnight stay at a hospital with considerable wiring between the human body and the system. In this paper, we implement a reliable, comfortable, inexpensive, and easily available portable device that allows users to apply the OSA test at home without the need for attended overnight tests. The design takes advantage of a smatrphone's built-in sensors, pervasiveness, computational capabilities, and user-friendly interface to screen OSA. We use three main sensors to extract physiological signals from patients which are (1) an oximeter to measure the oxygen level, (2) a microphone to record the respiratory effort, and (3) an accelerometer to detect the body's movement. Finally, we examine our system's ability to screen the disease as compared to the gold standard by testing it on 15 samples. The results showed that 100{\%} of patients were correctly identified as having the disease, and 85.7{\%} of patients were correctly identified as not having the disease. These preliminary results demonstrate the effectiveness of the developed system when compared to the gold standard and emphasize the important role of smartphones in healthcare.},
  annote          = {Special Section: Methods in Clinical Research Informatics},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1532046414001518},
  bdsk-url-2      = {https://doi.org/10.1016/j.jbi.2014.07.004},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jbi.2014.07.004},
  keywords        = {Android, Oximeter, Physiological signals, Signal processing, Smartphones,Obstructive sleep apnea},
  url             = {http://www.sciencedirect.com/science/article/pii/S1532046414001518},
}

@Article{Paoletti:2018:CQV:3236466.3152767,
  author          = {Paoletti, Nicola and Patan{\`{e}}, Andrea and Kwiatkowska, Marta},
  title           = {{Closed-Loop Quantitative Verification of Rate-Adaptive Pacemakers}},
  journal         = {ACM Trans. Cyber-Phys. Syst.},
  year            = {2018},
  volume          = {2},
  number          = {4},
  pages           = {33:1----33:31},
  issn            = {2378-962X},
  abstract        = {Rate-adaptive pacemakers are cardiac devices able to automatically adjust the pacing rate in patients with chronotropic incompetence, i.e., whose heart is unable to provide an adequate rate at increasing levels of physical, mental, or emotional activity. These devices work by processing data from physiological sensors in order to detect the patient’s activity and update the pacing rate accordingly. Rate adaptation parameters depend on many patient-specific factors, and effective personalization of such treatments can only be achieved through extensive exercise testing, which is normally intolerable for a cardiac patient. In this work, we introduce a data-driven and model-based approach for the automated verification of rate-adaptive pacemakers and formal analysis of personalized treatments. To this purpose, we develop a novel dual-sensor pacemaker model where the adaptive rate is computed by blending information from an accelerometer, and a metabolic sensor based on the QT interval. Our approach enables personalization through the estimation of heart model parameters from patient data (electrocardiogram), and closed-loop analysis through the online generation of synthetic, model-based QT intervals and acceleration signals. In addition to personalization, we also support the derivation of models able to account for the varied characteristics of a virtual patient population, thus enabling safety verification of the device. To capture the probabilistic and nonlinear dynamics of the heart, we define a probabilistic extension of timed I/O automata with data and employ statistical model checking for quantitative verification of rate modulation. We evaluate our rate-adaptive pacemaker design on three subjects and a pool of virtual patients, demonstrating the potential of our approach to provide rigorous, quantitative insights into the closed-loop behavior of the device under different exercise levels and heart conditions.

},
  address         = {New York, NY, USA},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3152767},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3152767},
  bytitledomenico = {no},
  doi             = {10.1145/3152767},
  keywords        = {Quantitative verification,PTIOA},
  publisher       = {ACM},
  url             = {http://doi.acm.org/10.1145/3152767},
}

@InProceedings{Rojas:2016:CMA:2993288.2993301,
  author          = {Rojas, Isabel K Villanes and Meireles, Silvia and Dias-Neto, Arilo Claudio},
  title           = {{Cloud-Based Mobile App Testing Framework: Architecture, Implementation and Execution}},
  booktitle       = {Proceedings of the 1st Brazilian Symposium on Systematic and Automated Software Testing},
  year            = {2016},
  series          = {SAST},
  pages           = {10:1----10:10},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The growth in the use of mobile devices is notorious due to the multiple functionalities they offer. The time between the release of new device models and mobile platform updates is very short, and this has a direct influence on the quality of mobile applications, because these applications need to be compatible with new mobile devices and the different versions of mobile platforms. As a negative consequence, the quality of mobile apps would be lower than expected. Therefore, to ensure mobile application quality, many services for mobile test are offered as Cloud Testing. Thus, this work proposes a Mobile Cloud Testing Framework, called AM-TaaS, that meets these needs. AM-TaaS facilitates the test environment setup and configuration and covers a range of mobile devices and platforms. We also describe the architecture and implementation of the proposed framework. With the use of AM-TaaS framework, it is possible to perform mobile app testing on different mobile emulators/devices.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2993288.2993301},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2993288.2993301},
  bytitledomenico = {doubt},
  doi             = {10.1145/2993288.2993301},
  isbn            = {978-1-4503-4766-2},
  keywords        = {automated testing, mobile cloud testing,Mobile testing},
  url             = {http://doi.acm.org/10.1145/2993288.2993301},
}

@Article{SHAUKAT201618,
  author          = {Shaukat, Usman and Ahmed, Ejaz and Anwar, Zahid and Xia, Feng},
  title           = {{Cloudlet deployment in local wireless networks: Motivation, architectures, applications, and open challenges}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2016},
  volume          = {62},
  pages           = {18--40},
  issn            = {1084-8045},
  abstract        = {In past few years, advancement in mobile applications and their integration with Cloud computing services has introduced a new computing paradigm known as Mobile Cloud Computing. Although Cloud services support a wide range of mobile applications, access to these services suffers from several performance issues such as WAN latency, jitter, and packet losses. Cloudlet frameworks are proposed to overcome these performance issues. More specifically, Cloudlets aim to bring the Cloud or a specific part of the Cloud closer to the mobile device by utilizing proximate computing resources to perform compute-intensive tasks. This paper presents a comprehensive survey on the state-of-the-art mobile Cloudlet architectures. We also classify the state-of-the-art Cloudlet solutions by presenting a hierarchical taxonomy. Moreover, the areas of Cloudlet applications are also identified and presented. Cloudlet discovery, resource management, data security, mobility, application offloading, and most importantly incentives to deploy a Cloudlet are areas that still needs to be investigated by the research community. The critical aspects of the current Cloudlet frameworks in Mobile Cloud Computing are analyzed to determine the strengths and weaknesses of the frameworks. The similarities and differences of the frameworks based on the important parameters, such as scalability, mobility support, Internet dependency, dynamic configuration, energy savings, and execution cost, are also investigated. The requirements for deploying the Cloudlet in a Local Wireless Network are also highlighted and presented. We also discuss open research challenges that Cloudlet deployments face in Local Wireless Networks.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804515002817},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2015.11.009},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jnca.2015.11.009},
  keywords        = {Cloudlets, Local Wireless Networks, Mobile Device Augmentation,Mobile Cloud Computing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804515002817},
}

@Article{JI2017138,
  author          = {Ji, Houling and Lee, Victor C S and Chow, Chi-Yin and Liu, Kai and Wu, Guoqing},
  title           = {{Coding-based cooperative caching in on-demand data broadcast environments}},
  journal         = {Information Sciences},
  year            = {2017},
  volume          = {385-386},
  pages           = {138--156},
  issn            = {0020-0255},
  abstract        = {Data broadcasting has been commonly deployed in many emerging mobile applications such as intelligent transportation systems and location-based services, because it is a scalable approach to disseminating information from a mobile support station (MSS) to a large population of mobile hosts (MHs). To provide timely data access and better data availability, MHs can store data items broadcast by the MSS in their local caches and share cached data items cooperatively among neighboring peers via peer-to-peer (P2P) communication. However, if MHs are not neighbors, they cannot cooperate even if they have each other's requested data items in their own caches. Network coding is a technique, by which multiple MHs can decode out different requested data items from an encoded packet broadcast by the MSS in one broadcast time unit. In this work, we propose a network coding based solution to enable MHs which are not neighbors to cooperate indirectly. We formulate the Maximum Channel Efficiency Encoding (MCEE) problem by introducing network coding and cooperative caching techniques in on-demand data broadcast environments. We prove that MCEE is NP-hard by constructing a polynomial-time reduction from the Minimum Clique Cover (MCC) problem. Further, we propose two schemes (NCM and NCB) for on-demand data broadcasting using network coding. In each scheme, we propose two algorithms running at the MSS and MHs for making encoding decisions and decoding requested data items, respectively. We build the simulation model for performance evaluation and the simulation results demonstrate that the proposed schemes not only increase the bandwidth efficiency of the limited downlink communication channel, but also enhance the system performance by reducing the data access latency.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0020025517300245},
  bdsk-url-2      = {https://doi.org/10.1016/j.ins.2017.01.012},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.ins.2017.01.012},
  keywords        = {Cooperative caching, Network coding, Peer-to-peer communication,On-demand data broadcast},
  url             = {http://www.sciencedirect.com/science/article/pii/S0020025517300245},
}

@Conference{Ernst20141092,
  author          = {Ernst, M D and Just, R and Millstein, S and Dietl, W and Pernsteiner, S and Roesner, F and Koscher, K and Barros, P and Bhoraskar, R and Han, S and Vines, P and Wu, E X},
  title           = {{Collaborative verification of information flow for a high-assurance app store}},
  booktitle       = {Proceedings of the ACM Conference on Computer and Communications Security},
  year            = {2014},
  pages           = {1092--1104},
  abstract        = {Current app stores distribute some malware to unsuspecting users, even though the app approval process may be costly and timeconsuming. High-integrity app stores must provide stronger guarantees that their apps are not malicious. We propose a verification model for use in such app stores to guarantee that the apps are free of malicious information flows. In our model, the software vendor and the app store auditor collaborate - each does tasks that are easy for her/him, reducing overall verification cost. The software vendor provides a behavioral specification of information flow (at a finer granularity than used by current app stores) and source code annotated with information-flow type qualifiers. A flow-sensitive, context-sensitive information-flow type system checks the information flow type qualifiers in the source code and proves that only information flows in the specification can occur at run time. The app store auditor uses the vendor-provided source code to manually verify declassifications. We have implemented the information-flow type system for Android apps written in Java, and we evaluated both its effectiveness at detecting information-flow violations and its usability in practice. In an adversarial Red Team evaluation, we analyzed 72 apps (576,000 LOC) for malware. The 57 Trojans among these had been written specifically to defeat a malware analysis such as ours. Nonetheless, our information-flow type system was effective: it detected 96{\%} of malware whose malicious behavior was related to information flow and 82{\%} of all malware. In addition to the adversarial evaluation, we evaluated the practicality of using the collaborative model. The programmer annotation burden is low: 6 annotations per 100 LOC. Every sound analysis requires a human to review potential false alarms, and in our experiments, this took 30 minutes per 1,000 LOC for an auditor unfamiliar with the app. Copyright 2014 ACM.},
  annote          = {cited By 37},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2660267.2660343},
  bytitledomenico = {yes},
  doi             = {10.1145/2660267.2660343},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910609863{\&}doi=10.1145{\%}2F2660267.2660343{\&}partnerID=40{\&}md5=eb324cf8594d9bc9e9ec93235c0d5354},
}

@Article{NAIR2011317,
  author          = {Nair, Arun and Ward, Julia and Lipworth, Brian J},
  title           = {{Comparison of bronchodilator response in patients with asthma and healthy subjects using spirometry and oscillometry}},
  journal         = {Annals of Allergy, Asthma {\&} Immunology},
  year            = {2011},
  volume          = {107},
  number          = {4},
  pages           = {317--322},
  issn            = {1081-1206},
  abstract        = {Background
Impulse oscillometry (IOS) is an effort-independent and patient-friendly pulmonary function technique, but limited data are available that correlate the bronchodilator response using spirometry and IOS in adult asthmatic and healthy subjects.
Objective
To compare spirometry and IOS in ongoing bronchodilator response.
Methods
The study was a prospective evaluation of patients with asthma and healthy subjects attending screening at a research unit in a university teaching hospital. Reversibility testing was carried out using standardized American Thoracic Society/European Respiratory Society (ATS/ERS) criteria after administering 400 $\mu$g salbutamol by AccuhalerTM. Impulse oscillometry measurements (resistance at 5 Hz [R5], resistance at 20 Hz [R20], reactance at 5 Hz [X5]) and spirometry (forced expiratory volume in 1 second [FEV1], forced vital capacity [FVC], forced expiratory flow from 25{\%} to 75{\%} of vital capacity [FEF25-75]) were recorded pre and postbronchodilator.
Results
Ninety-five asthmatic and 61 healthy subjects underwent screening. Mean percent (standard error of the mean [SEM]) baseline prebronchodilator FEV1 was 83.99 (2.23) for patients with asthma, and 99.25 (1.72) for healthy subjects. Baseline percent predicted IOS indices in the group with asthma were 162.22 (7.5) for R5; 154.73 (4.71) for R20; and 441.72 (173.86) for X5. In healthy volunteers, corresponding values were 111.01 (3.96), 127.75 (4.12), and −229.80 (125.75). R5 was the only IOS measure that showed correlation with spirometry (FEV1) in both groups. The mean percent (SEM) predicted postbronchodilator change in FEV1 and R5 in patients with asthma was 6.35 (0.65) and −33.78 (4.43); correspondingly in healthy subjects it was 2.24 (0.32) and −14.91 (2.48). A negative correlation was demonstrated (r = -0.40, P {\textless} .001 between the 2 indices in patients with asthma. Linear regression modeling demonstrated that 1 unit change in {\%}FEV1 corresponds to a 2.5{\%} change in {\%}R5.
Conclusions
Low-frequency IOS as R5 and spirometry as FEV1 correlate in patients with asthma and healthy subjects, with changes that can be predicted by linear regression.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1081120611005576},
  bdsk-url-2      = {https://doi.org/10.1016/j.anai.2011.07.011},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.anai.2011.07.011},
  url             = {http://www.sciencedirect.com/science/article/pii/S1081120611005576},
}

@Conference{Zhang2015179,
  author          = {Zhang, T and Gao, J and Cheng, J and Uehara, T},
  title           = {{Compatibility testing service for mobile applications}},
  booktitle       = {Proceedings - 9th IEEE International Symposium on Service-Oriented System Engineering, IEEE SOSE 2015},
  year            = {2015},
  volume          = {30},
  pages           = {179--186},
  abstract        = {As more and more mobile applications are developed, mobile app testing and quality assurance have become very important. Due to the diversity of mobile devices and platforms, compatibility testing for mobile apps has been identified as one urgent and challenging issue. There are two major reasons contributing to this issue. They are: a) the large number of mobile devices with diverse features and platforms which are upgraded frequently; b) a higher cost and complexity in mobile app compatibility testing. This paper proposes one optimized compatibility testing strategy using a statistical approach to reduce test costs, and improve engineer's operation efficiency. The paper provides a solution to generate an optimized compatibility test sequence for mobile apps using the K-Means statistical algorithm. A compatibility testing service has been proposed for mobile apps. Moreover, two case study results are reported to demonstrate its potential application and effectiveness. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 11},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SOSE.2015.35},
  bytitledomenico = {yes},
  doi             = {10.1109/SOSE.2015.35},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84990998492{\&}doi=10.1109{\%}2FSOSE.2015.35{\&}partnerID=40{\&}md5=76f48e8af4ab6e126e077a9af99dab1a},
}

@Article{ISI:000246043400002,
  author          = {Chi, Lei and Holsapple, Clyde W and Srinivasan, Cidambi},
  title           = {{Competitive dynamics in electronic networks: A model and the case of interorganizational systems}},
  journal         = {INTERNATIONAL JOURNAL OF ELECTRONIC COMMERCE},
  year            = {2007},
  volume          = {11},
  number          = {3},
  pages           = {7--49},
  issn            = {1086-4415},
  abstract        = {Interorganizational systems (IOS)-distributed computing systems that
support processes shared by two or more firms-have become fundamental to
business operations, opening avenues to unprecedented collaborative
linkages, even among competitors, and to growing ``co-opetition.{\{}''{\}} As
the role of IOS expands, electronic networks have become more complex
and dense. This paper introduces competitive dynamics research and
social network analysis into the study of IOS. A model of the
associations between the constructs of IOS use, competitive action, and
network structure is developed, and hypotheses are advanced about the
relationships among the constructs. As a step toward external
validation, measures are devised for operationalizing the constructs and
examining the linkages suggested by the hypotheses in the context of an
IOS-intensive network consisting of sports car makers and their
value/supply-chain partners. The study (1) addresses interactive firm
behaviors in e-business and highlights the value of competitor analysis,
(2) provides new operational measures that can be generalized and thus
enables systematic analysis of 105 use, and (3) identifies new roles of
IOS in influencing firm behavior and performance beyond its traditional
focus on efficiency and power functions.},
  bdsk-url-1      = {http://dx.doi.org/10.2753/JEC1086-4415110301},
  bytitledomenico = {no},
  doi             = {10.2753/JEC1086-4415110301},
}

@Article{Gunawan201375,
  author          = {Gunawan, L A and Herrmann, P},
  title           = {{Compositional verification of application-level security properties}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2013},
  volume          = {7781 LNCS},
  pages           = {75--90},
  abstract        = {Automatic model checking can be employed to verify that security properties are fulfilled by a system model. However, since security requirements constrain most, if not all, functional modules of a system, such a proof needs to consider nearly all of the system's control and data flows. For complex real-life applications, that leads to a large state space to be explored effectively restricting the applicability of a model checker. To deal with this problem, we advocate a compositional approach utilizing the features of our model-based engineering technique SPACE. Both functional behavior and security-related aspects are specified using UML 2 activities. Further, we supplement each activity with an interface behavior description which will be extended by a security contract modeling certain security properties to be fulfilled by the activity. This enables us to verify application-level security properties by using contracts instead of their respective activities in model checker runs so that the number of states to be checked is significantly reduced. The approach is exemplified by an Android application example in which one's location must only be shared with certain recipients. {\textcopyright} Springer-Verlag Berlin Heidelberg 2013.},
  annote          = {cited By 5},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-36563-8_6},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-642-36563-8_6},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893126507{\&}doi=10.1007{\%}2F978-3-642-36563-8{\_}6{\&}partnerID=40{\&}md5=a6b2fddb6d213521c04d3d1d768f44ba},
}

@Conference{Zhang201775,
  author          = {Zhang, T and Gao, J and Cheng, J},
  title           = {{Crowdsourced Testing Services for Mobile Apps}},
  booktitle       = {Proceedings - 11th IEEE International Symposium on Service-Oriented System Engineering, SOSE 2017},
  year            = {2017},
  pages           = {75--80},
  abstract        = {Recent publications have pointed out a number of challenges and challenges for when engineers validate mobile apps using a conventional way inside a testing laboratory. Top two issues include: a) higher test costs due to the diversity of mobile devices and platforms, b) difficulty in conducting large-sale user-oriented performance and usability testing. A new testing approach, known as crowdsourced testing, provides a promising way to address these challenges and issues. This paper provides a comprehensive tutorial on crowdsourced test services, and informative concepts, insights, and detailed discussion about common questions raised by engineers and managers. It presents a clear comparative view between mobile crowdsourced testing with traditional lab-based mobile testing. In addition, it also summarizes and compares different major players, their commercial products, and solutions in mobile crowdsourced test services. Furthermore, it examines the major issues, challenges, and needs. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 4},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SOSE.2017.28},
  bytitledomenico = {no},
  doi             = {10.1109/SOSE.2017.28},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85022200093{\&}doi=10.1109{\%}2FSOSE.2017.28{\&}partnerID=40{\&}md5=0d1d6baf247afb996f526d89022c5f66},
}

@Article{ENIGO2016316,
  author          = {Enigo, V S Felix and Kumar, T M Vinoth and Vijay, S and Prabu, K G},
  title           = {{CrowdSourcing Based Online Petitioning System for Pothole Detection Using Android Platform}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {87},
  pages           = {316--321},
  issn            = {1877-0509},
  abstract        = {To make city smarter every citizen is given an opportunity to selectively connect to the governing bodies in their location for sharing public views and issues that contributes to the general well being of the city. With this objective, this paper proposes an online petitioning system using smart phone that works on crowdsourcing process and image processing algorithms to inform about the pothole damages in the roads to the concerned authorities to take necessary actions. We show that the process involved in crowdsourcing such as data collection, data selection and data assessment can be applied to identify the potholes in the roads without redundancy. Further, we have tested our system for different types of input images and the detection accuracy is found to be better than normal image processing approach.},
  annote          = {Fourth International Conference on Recent Trends in Computer Science {\&} Engineering (ICRTCSE 2016)},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916305075},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.05.167},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.procs.2016.05.167},
  keywords        = {CrowdSourcing, Image Processing, Potholes,Petitioning},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916305075},
}

@Conference{Salva2013,
  author          = {Salva, S and Zafimiharisoa, S R},
  title           = {{Data vulnerability detection by security testing for Android applications}},
  booktitle       = {2013 Information Security for South Africa - Proceedings of the ISSA 2013 Conference},
  year            = {2013},
  abstract        = {The Android intent messaging is a mechanism that ties components together to build Mobile applications. Intents are kinds of messages composed of actions and data, sent by a component to another component to perform several operations, e.g., launching a user interface. The intent mechanism eases the writing of Mobile applications, but it might also be used as an entry point for security attacks. The latter can be easily sent with intents to components, that can indirectly forward attacks to other components and so on. In this context, this paper proposes a Model-based security testing approach to attempt to detect data vulnerabilities in Android applications. In other words, this approach generates test cases to check whether components are vulnerable to attacks, sent through intents, that expose personal data. Our method takes Android applications and intent-based vulnerabilities formally expressed with models called vulnerability patterns. Then, and this is the originality of our approach, partial specifications are automatically generated from configuration files and component codes. Test cases are then automatically generated from vulnerability patterns and the previous specifications. A tool, called APSET, is presented and evaluated with experimentations on some Android applications. {\textcopyright} 2013 IEEE.},
  annote          = {cited By 10},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ISSA.2013.6641043},
  bytitledomenico = {yes},
  doi             = {10.1109/ISSA.2013.6641043},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84890841326{\&}doi=10.1109{\%}2FISSA.2013.6641043{\&}partnerID=40{\&}md5=a81573f9a5027964984d5aece276ef6d},
}

@Conference{Chen2016130,
  author          = {Chen, C.-F. and Lee, G G and Sritapan, V and Lin, C.-Y.},
  title           = {{Deep Convolutional Neural Network on iOS mobile devices (Invited Paper)}},
  booktitle       = {IEEE Workshop on Signal Processing Systems, SiPS: Design and Implementation},
  year            = {2016},
  pages           = {130--135},
  abstract        = {Deep Convolutional Neural Network (CNN) draws significant attention in the computer vision community by facilitating machines with more intelligence in understanding visual signals; however, its computation complexity has also increased significantly. To achieve ubiquitous machine intelligence, deep CNN is required to be ported onto local devices rather than cloud-based solution due to low latency consideration. Hence, in this paper, we propose a method to explore the design space for porting deep CNN onto iOS mobile devices, with attempts in maximizing data reusability, which alleviates the high bandwidth burden in the convolution layers of CNN. Furthermore, effective data reuse also makes possible the parallelization of all computing threads without data loading latency. On the other hand, deep CNN is usually over-parametrized with many unused convolution kernels. Based on Algorithm/Architecture Co-Exploration, we introduced a method in pruning redundant kernels in deep CNN with ignorable performance degradation on validation dataset (0.06{\%} loss). This reduces 29{\%} of operations and 34{\%} of storage size on a 16-layer CNN. We used iPhone 6s and iPad Pro for case studies, and ported 8-layer and 16-layer CNNs onto targeted devices. The data reusability strategy improves computation speed up to 1.3×; and redundant kernel removal increases computation speed to 1.43×. As a result, we achieved high computation efficiency and have thus enhanced the capability of machine intelligence on local mobile devices. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SiPS.2016.31},
  bytitledomenico = {no},
  doi             = {10.1109/SiPS.2016.31},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013192807{\&}doi=10.1109{\%}2FSiPS.2016.31{\&}partnerID=40{\&}md5=f3a2ce6b4786b85ee3b25d76ae8c9686},
}

@Conference{Gudeth201133,
  author          = {Gudeth, K and Pirretti, M and Hoeper, K and Buskey, R},
  title           = {{Delivering secure applications on commercial mobile devices: The case for bare metal hypervisors}},
  booktitle       = {Proceedings of the ACM Conference on Computer and Communications Security},
  year            = {2011},
  pages           = {33--38},
  abstract        = {A problem faced by security sensitive mobile applications is assurance of correct execution on a commercial device. Prior approaches typically address this problem by assuming a trusted operating system (OS) as part of their trusted computing base (TCB). However, the vast amount of privileged code running in a typical mobile OS makes the presence of system vulnerabilities inevitable. As an alternative, we recommend the use of a bare metal hypervisor, which typically consists of orders of magnitude fewer lines of code than a full OS. This makes formal verification practical. Thus bare metal hypervisors are much more suitable for the basis of a TCB. We shall present a bare metal hypervisor-based architecture that enables trusted apps on mobile devices to be protected despite: OS compromise, malicious applications, and the inability of the end user to distinguish between trusted and untrusted apps. {\textcopyright} 2011 ACM.},
  annote          = {cited By 15},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2046614.2046622},
  bytitledomenico = {no},
  doi             = {10.1145/2046614.2046622},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-80755127066{\&}doi=10.1145{\%}2F2046614.2046622{\&}partnerID=40{\&}md5=b3bd1590aa09e58d2b2e42a24a9ad16e},
}

@InProceedings{8328366,
  author          = {Sun, Y and Xie, Y and Qiu, Z and Pan, Y and Weng, J and Guo, S},
  title           = {{Detecting Android Malware Based on Extreme Learning Machine}},
  booktitle       = {Proceedings - 2017 IEEE 15th International Conference on Dependable, Autonomic and Secure Computing, 2017 IEEE 15th International Conference on Pervasive Intelligence and Computing, 2017 IEEE 3rd International Conference on Big Data Intelligence and Computing and 2017 IEEE Cyber Science and Technology Congress, DASC-PICom-DataCom-CyberSciTec 2017},
  year            = {2017},
  volume          = {2018-January},
  pages           = {47--53},
  month           = {nov},
  abstract        = {To relieve increasingly prominent security issues of Android applications, static malware-detection techniques have become essential, due to their rapid and convenient detection processes which do not require running the detected applications. Most of current commercial anti-malware tools utilize signatures of known malicious Android codes for static detection, but are unable to find out unknown, especially newly created, malware. Many existing malware-detection researches rely on traditional machine learning techniques to analyze some static features of Android applications such as permissions and API calls, but the detection approaches still have room for improvement with respect to simplicity, effectiveness or efficiency. To overcome the limitations of the above detection techniques, we propose a novel static approach to detect malicious Android applications by proposing a set of Android program features, consisting of sensitive permissions and sensitive API calls, and by utilizing Extreme Learning Machine. We implemented our approach with an automated testing tool called WaffleDetector. Controlled experiments have been conducted to compare our approach and the existing ones on detecting malicious Android applications, and the results show that our approach excels the existing ones with minimal human intervention, better detection effectiveness and less detection time.},
  annote          = {From Duplicate 1 (Detecting Android Malware Based on Extreme Learning Machine - Sun, Y; Xie, Y; Qiu, Z; Pan, Y; Weng, J; Guo, S) cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/DASC-PICom-DataCom-CyberSciTec.2017.24},
  bytitledomenico = {yes},
  doi             = {10.1109/DASC-PICom-DataCom-CyberSciTec.2017.24},
  keywords        = {,Android,Android (operating system),Android Malware,Android program features,Androids,Extreme Learning Mchine,Feature extraction,Humanoid robots,Malware,Malware Detection,Sensitive API,Sensitive Permission,Smart phones,Tools,application program interfaces,commercial anti-malware tools,convenient detection processes,existing malware-detection researches,extreme learning machine,invasive software,known malicious Android codes,learning (artificial intelligence),malicious Android applications,prominent security issues,rapid detection processes,sensitive API calls,static detection,static features,static malware-detection techniques,traditional machine},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85038013132{\&}doi=10.1109{\%}2FDASC-PICom-DataCom-CyberSciTec.2017.24{\&}partnerID=40{\&}md5=0feea7b2eeeb357a048c2c63310bb867},
}

@InProceedings{Canfora:2015:DAM:2804345.2804349,
  author          = {Canfora, Gerardo and Medvet, Eric and Mercaldo, Francesco and Visaggio, Corrado Aaron},
  title           = {{Detecting Android Malware Using Sequences of System Calls}},
  booktitle       = {Proceedings of the 3rd International Workshop on Software Development Lifecycle for Mobile},
  year            = {2015},
  series          = {DeMobile 2015},
  pages           = {13--20},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The increasing diffusion of smart devices, along with the dynamism of the mobile applications ecosystem, are boosting the production of malware for the Android platform. So far, many different methods have been developed for detecting Android malware, based on either static or dynamic analysis. The main limitations of existing methods include: low accuracy, proneness to evasion techniques, and weak validation, often limited to emulators or modified kernels. We propose an Android malware detection method, based on sequences of system calls, that overcomes these limitations. The assumption is that malicious behaviors (e.g., sending high premium rate SMS, cyphering data for ransom, botnet capabilities, and so on) are implemented by specific system calls sequences: yet, no apriori knowledge is available about which sequences are associated with which malicious behaviors, in particular in the mobile applications ecosystem where new malware and non-malware applications continuously arise. Hence, we use Machine Learning to automatically learn these associations (a sort of "fingerprint" of the malware); then we exploit them to actually detect malware. Experimentation on 20000 execution traces of 2000 applications (1000 of them being malware belonging to different malware families), performed on a real device, shows promising results: we obtain a detection accuracy of 97%. Moreover, we show that the proposed method can cope with the dynamism of the mobile apps ecosystem, since it can detect unknown malware.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2804345.2804349},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2804345.2804349},
  bytitledomenico = {yes},
  doi             = {10.1145/2804345.2804349},
  isbn            = {978-1-4503-3815-8},
  keywords        = {dynamic analysis, machine learning, malware, security,Android},
  url             = {http://doi.acm.org/10.1145/2804345.2804349},
}

@InProceedings{Hecht:2015:DAA:2825041.2825078,
  author          = {Hecht, Geoffrey and Rouvoy, Romain and Moha, Naouel and Duchien, Laurence},
  title           = {{Detecting Antipatterns in Android Apps}},
  booktitle       = {Proceedings of the Second ACM International Conference on Mobile Software Engineering and Systems},
  year            = {2015},
  series          = {MOBILESoft '15},
  pages           = {148--149},
  address         = {Piscataway, NJ, USA},
  publisher       = {IEEE Press},
  abstract        = {Mobile apps are becoming complex software systems that must be developed quickly and evolve continuously to fit new user requirements and execution contexts. However, addressing these constraints may result in poor design choices, known as antipatterns, which may incidentally degrade software quality and performance. Thus, the automatic detection of antipatterns is an important activity that eases both maintenance and evolution tasks. Moreover, it guides developers to refactor their applications and thus, to improve their quality. While antipatterns are well-known in object-oriented applications, their study in mobile applications is still in their infancy. In this paper, we propose a tooled approach, called Paprika, to analyze Android applications and to detect object-oriented and Androidspecific antipatterns from binaries of mobile apps. We validate the effectiveness of our approach on a set of popular mobile apps downloaded from the Google Play Store.

},
  bdsk-url-1      = {http://dl.acm.org/citation.cfm?id=2825041.2825078},
  bytitledomenico = {no},
  isbn            = {978-1-4799-1934-5},
  url             = {http://dl.acm.org/citation.cfm?id=2825041.2825078},
}

@InProceedings{7102585,
  author          = {Wan, M and Jin, Y and Li, D and Halfond, W G J},
  title           = {{Detecting Display Energy Hotspots in Android Apps}},
  booktitle       = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)},
  year            = {2015},
  pages           = {1--10},
  month           = {apr},
  abstract        = {Energy consumption of mobile apps has become an important consideration as the underlying devices are constrained by battery capacity. Display represents a significant portion of an app's energy consumption. However, developers lack techniques to identify the user interfaces in their apps for which energy needs to be improved. In this paper, we present a technique for detecting display energy hotspots - user interfaces of a mobile app whose energy consumption is greater than optimal. Our technique leverages display power modeling and automated display transformation techniques to detect these hotspots and prioritize them for developers. In an evaluation on a set of popular Android apps, our technique was very accurate in both predicting energy consumption and ranking the display energy hotspots. Our approach was also able to detect display energy hotspots in 398 Android market apps, showing its effectiveness and the pervasiveness of the problem. These results indicate that our approach represents a potentially useful technique for helping developers to detect energy related problems and reduce the energy consumption of their mobile apps.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICST.2015.7102585},
  bytitledomenico = {yes},
  doi             = {10.1109/ICST.2015.7102585},
  issn            = {2159-4848},
  keywords        = {Android (operating system);mobile computing;power aware computing;user interfaces;display energy hotspots detection;user interfaces;mobile app;energy consumption;display power modeling;automated display transformation techniques;Android market apps;Color;Energy consumption;User interfaces;Power demand;Mobile communication;Smart phones;Monitoring},
}

@InProceedings{ISI:000452049800051,
  author          = {Banerjee, Abhijeet and Chong, Lee Kee and Chattopadhyay, Sudipta and Roychoudhury, Abhik},
  title           = {{Detecting Energy Bugs and Hotspots in Mobile Apps}},
  booktitle       = {22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014)},
  year            = {2014},
  pages           = {588--598},
  organization    = {Assoc Comp Machinery Special Interest Grp Software Engn; CVIC SE; NSF; Microsoft Res; Huawei; Neusoft; Siemens; Yonyou; Hong Kong Univ Sci {\&} Technol; Google; Radica; Samsung Res Amer; IBM Res; TCL; CCC},
  abstract        = {Over the recent years, the popularity of smartphones has increased
dramatically. This has lead to a widespread availability of smartphone
applications. Since smartphones operate on a limited amount of battery
power, it is important to develop tools and techniques that aid in
energy-efficient application development. Energy inefficiencies in
smartphone applications can broadly be categorized into energy hotspots
and energy bugs. An energy hotspot can be described as a scenario where
executing an application causes the smartphone to consume abnormally
high amount of battery power, even though the utilization of its
hardware resources is low. In contrast, an energy bug can be described
as a scenario where a malfunctioning application prevents the smartphone
from becoming idle, even after it has completed execution and there is
no user activity.
In this paper, we present an automated test generation framework that
detects energy hotspots/bugs in Android applications. Our framework
systematically generates test inputs that are likely to capture energy
hotspots/bugs. Each test input captures a sequence of user interactions
(e.g. touches or taps on the smartphone screen) that leads to an energy
hotspot/bug in the application. Evaluation with 30 freely-available
Android applications from Google Play/F-Droid shows the efficacy of our
framework in finding hotspots/bugs. Manual validation of the
experimental results shows that our framework reports reasonably low
number of false positives. Finally, we show the usage of the generated
results by improving the energy-efficiency of some Android applications.},
  annote          = {22nd ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE), Hong Kong, HONG KONG, NOV 16-21, 2014},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2635868.2635871},
  bytitledomenico = {yes},
  doi             = {10.1145/2635868.2635871},
  isbn            = {978-1-4503-3056-5},
}

@Article{Zhang2015454,
  author          = {Zhang, L and Zhang, Y and Zang, T},
  title           = {{Detecting malicious behaviors in repackaged android apps with loosely-coupled payloads filtering scheme}},
  journal         = {Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST},
  year            = {2015},
  volume          = {152},
  pages           = {454--462},
  abstract        = {Recently, the security problem of Android applications has been increasingly prominent. In this paper, we propose a novel approach to detect malicious behaviors in loosely-coupled repackaged Android apps. We extract and modify the FCG of an app based on its loosely-coupled property, and divide it into several sub-graphs to identify primary module and its related modules. In each remaining sub-graph, API calls are added and sensitive API paths are extracted for dynamic instrumentation on top of APIMonitor. The experiments are conducted with 438 malwares and 1529 apps from two third-party Android markets. Through manual verification, we confirm 5 kinds of malwares in 16 apps detected by our approach. And the detection rate of collected malwares reaches 99.77{\%}. The reduction rate of monitored functions reaches 42.95{\%} with 98.79{\%} of malicious functions being successfully saved. The time spent on static and dynamic analysis is 74.9 s and 16.0 s on average. {\textcopyright} Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2015.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-23829-6_31},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-23829-6_31},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948154951{\&}doi=10.1007{\%}2F978-3-319-23829-6{\_}31{\&}partnerID=40{\&}md5=587ccd78d5d74b8e0c2d139fa7ebc9b5},
}

@Article{STANGE201511,
  author          = {Stange, Szilard},
  title           = {{Detecting malware across operating systems}},
  journal         = {Network Security},
  year            = {2015},
  volume          = {2015},
  number          = {6},
  pages           = {11--14},
  issn            = {1353-4858},
  abstract        = {The AlienSpy RAT made headlines recently.1 It is an alarmingly sophisticated cross-platform delivery method giving new life to the well-known Citadel trojan, a Zeus variant that has been in circulation since early 2012.2 AlienSpy can target Windows, Linux, Android and Mac OS X devices and boasts at least 12 separate spying plugins that cyber-attackers can use to steal data, gain remote desktop access or even capture webcam sessions. Given the increasing frequency of cross-platform malware exploits, a frequently asked question is whether anti-malware engines designed for Windows can detect Linux- and Android-based malware. Szilard Stange of OPSWAT details tests that show how Windows-oriented anti-malware solutions are actually very effective at detecting Linux and even Android malware. New cross-platform malware is being discovered every day, but by putting our focus on improving detection via the latest multi-scanning technologies, organisations can mitigate the damage caused by these sophisticated exploits.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485815300490},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(15)30049-0},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1353-4858(15)30049-0},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485815300490},
}

@Conference{Chen20141,
  author          = {Chen, C.-M. and Lin, J.-M. and Lai, G.-H.},
  title           = {{Detecting mobile application malicious behaviors based on data flow of source code}},
  booktitle       = {Proceedings - 1st International Conference on Trustworthy Systems and Their Applications, TSA 2014},
  year            = {2014},
  pages           = {1--6},
  abstract        = {Mobile devices have become powerful and popular. Most internet applications are ported to mobile platform. Confidential personal information such as credit card and passwords are stored in mobile device for convenience. Therefore, mobile devices become the attack targets due to financial gain. Mobile applications are published in many market platforms without verification, hence malicious mobile applications can be deployed in such marketplaces. Two approaches for detecting malware, dynamic and static analysis, are commonly used in the literature. Dynamic analysis requires is that analyst run suspicious apps in a controlled environment to observe the behavior of apps to determine if the app is malicious or not. However, Dynamic analysis is time consuming, as some mobile application might be triggered after certain amount of time or special input sequence. In this paper static analysis is adopted to detect mobile malware and sensitive information is tracked to check if it is been released or used by malicious malware. In this paper, we present a mobile malware detection approach which is based on data flow of the reversed source code of the application. The proposed system tracks the data flow to detect and identify malicious behavior of malware in Android system. To validate the performance of proposed system, 252 malware form 19 families and 50 free apps from Google Play are used. The results proved that our method can successfully detecting malicious behaviours of Android APPs with the TPR 91.6{\%}. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TSA.2014.10},
  bytitledomenico = {yes},
  doi             = {10.1109/TSA.2014.10},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84915781592{\&}doi=10.1109{\%}2FTSA.2014.10{\&}partnerID=40{\&}md5=b57c653c75b50c14dd705893a89432cc},
}

@Article{SEO201443,
  author          = {Seo, Seung-Hyun and Gupta, Aditi and Sallam, Asmaa Mohamed and Bertino, Elisa and Yim, Kangbin},
  title           = {{Detecting mobile malware threats to homeland security through static analysis}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2014},
  volume          = {38},
  pages           = {43--53},
  issn            = {1084-8045},
  abstract        = {Recent years have seen the significant increase in the popularity of smartphones. This popularity has been accompanied with an equally alarming rise in mobile malware. Recently released mobile malware targeting Android devices have been found to specifically focus on root exploits to obtain root-level access and execute instructions from a remote server. Thus, this kind of mobile malware presents a significant threat to Homeland Security. This is possible because smartphones can serve as zombie devices which are then controlled by hackers' via a C{\&}C server. In this paper, we discuss the defining characteristics inherent in mobile malware and show mobile attack scenarios which are feasible against Homeland Security. We also propose a static analysis tool, DroidAnalyzer, which identifies potential vulnerabilities of Android apps and the presence of root exploits. Then, we analyze various mobile malware samples and targeting apps such as banking, flight tracking and booking, home{\&}office monitoring apps to examine potential vulnerabilities by applying DroidAnalyzer.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804513001227},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2013.05.008},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.jnca.2013.05.008},
  keywords        = {Android OS, Homeland security, Smartphone,Mobile malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804513001227},
}

@InProceedings{7320419,
  author          = {Breaux, T D and Smullen, D and Hibshi, H},
  title           = {{Detecting repurposing and over-collection in multi-party privacy requirements specifications}},
  booktitle       = {2015 IEEE 23rd International Requirements Engineering Conference (RE)},
  year            = {2015},
  pages           = {166--175},
  abstract        = {Mobile and web applications increasingly leverage service-oriented architectures in which developers integrate third-party services into end user applications. This includes identity management, mapping and navigation, cloud storage, and advertising services, among others. While service reuse reduces development time, it introduces new privacy and security risks due to data repurposing and over-collection as data is shared among multiple parties who lack transparency into third-party data practices. To address this challenge, we propose new techniques based on Description Logic (DL) for modeling multiparty data flow requirements and verifying the purpose specification and collection and use limitation principles, which are prominent privacy properties found in international standards and guidelines. We evaluate our techniques in an empirical case study that examines the data practices of the Waze mobile application and three of their service providers: Facebook Login, Amazon Web Services (a cloud storage provider), and Flurry.com (a popular mobile analytics and advertising platform). The study results include detected conflicts and violations of the principles as well as two patterns for balancing privacy and data use flexibility in requirements specifications. Analysis of automation reasoning over the DL models show that reasoning over complex compositions of multi-party systems is feasible within exponential asymptotic timeframes proportional to the policy size, the number of expressed data, and orthogonal to the number of conflicts found.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/RE.2015.7320419},
  bytitledomenico = {yes},
  doi             = {10.1109/RE.2015.7320419},
  issn            = {1090-705X},
  keywords        = {data privacy;description logic;mobile computing;security of data;Web services;repurposing detection;over-collection detection;multiparty privacy requirements specifications;description logic;multiparty data flow requirements;use limitation principles;international standards;guidelines;Waze mobile application;Facebook login;Amazon Web Services;Flurry.com;data use flexibility;DL models;exponential asymptotic timeframes;Data privacy;Privacy;Terminology;Facebook;Limiting;Advertising;Data flow analysis;privacy principles;requirements validation},
}

@InProceedings{Zhang:2018:DEI:3236024.3236073,
  author          = {Zhang, Hailong and Wu, Haowei and Rountev, Atanas},
  title           = {{Detection of Energy Inefficiencies in Android Wear Watch Faces}},
  booktitle       = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  year            = {2018},
  series          = {ESEC/FSE 2018},
  pages           = {691--702},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {This work considers watch faces for Android Wear devices such as smartwatches. Watch faces are a popular category of apps that display current time and relevant contextual information. Our study of watch faces in an app market indicates that energy efficiency is a key concern for users and developers.

The first contribution of this work is the definition of several energy-inefficiency patterns of watch face behavior, focusing on two energy-intensive resources: sensors and displays. Based on these patterns, we propose a control-flow model and static analysis algorithms to identify instances of these patterns. The algorithms use interprocedural control-flow analysis of callback methods and the invocation sequences of these methods. Potential energy inefficiencies are then used for automated test generation and execution, where the static analysis reports are validated via run-time execution. Our experimental results and case studies demonstrate that the analysis achieves high precision and low cost, and provide insights into potential pitfalls faced by developers of watch faces.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3236024.3236073},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3236024.3236073},
  bytitledomenico = {doubt},
  doi             = {10.1145/3236024.3236073},
  isbn            = {978-1-4503-5573-5},
  keywords        = {energy, sensor, smartwatch, static analysis, testing,Android Wear},
  url             = {http://doi.acm.org/10.1145/3236024.3236073},
}

@Book{Salva2013397,
  title           = {{Detection of Intent-Based Vulnerabilities in Android Applications}},
  year            = {2013},
  author          = {Salva, S and Zafimiharisoa, S R},
  abstract        = {The intent mechanism of the Android platform is a powerful message-passing system that allows for sharing data among components and applications. Nevertheless, it might also be used as an entry point for security attacks if incautiously employed. Attacks can be easily sent through intents to components, which can indirectly forward them to other components, and so on. In this context, this chapter proposes a model-based security testing approach to attempt to detect data vulnerabilities in Android applications. In other words, this approach generates test cases to check whether components are vulnerable to attacks, sent through intents that expose personal data. Our method takes Android applications and intent-based vulnerabilities formally expressed with models called vulnerability patterns. Then, and this is the originality of our approach, partial specifications are automatically generated from Android applications with algorithms reflecting the Android documentation. These specifications avoid false positives and refine test verdicts. A tool called APSET is presented and evaluated with tests on some Android applications. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1016/B978-0-12-411474-6.00024-4},
  booktitle       = {Emerging Trends in ICT Security},
  bytitledomenico = {yes},
  doi             = {10.1016/B978-0-12-411474-6.00024-4},
  pages           = {397--417},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902238649{\&}doi=10.1016{\%}2FB978-0-12-411474-6.00024-4{\&}partnerID=40{\&}md5=02df65da781d0dc07987419470daadb4},
}

@Article{DiCerbo2011138,
  author          = {{Di Cerbo}, F and Girardello, A and Michahelles, F and Voronkova, S},
  title           = {{Detection of malicious applications on android OS}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2011},
  volume          = {6540 LNCS},
  pages           = {138--149},
  abstract        = {The paper presents a methodology for mobile forensics analysis, to detect "malicious" (or "malware") applications, i.e., those that deceive users hiding some of their functionalities. This methodology is specifically targeted for the Android mobile operating system, and relies on its security model features, namely the set of permissions exposed by each application. The methodology has been trained on more than 13,000 applications hosted on the Android Market, collected with AppAware. A case study is presented as a preliminary validation of the methodology. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 44},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-19376-7_12},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-642-19376-7_12},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952266600{\&}doi=10.1007{\%}2F978-3-642-19376-7{\_}12{\&}partnerID=40{\&}md5=07c25416affbf64892c2484249f95ef1},
}

@Article{ISI:000358163500008,
  author          = {Aldini, Alessandro and Martinelli, Fabio and Saracino, Andrea and Sgandurra, Daniele},
  title           = {{Detection of repackaged mobile applications through a collaborative approach}},
  journal         = {CONCURRENCY AND COMPUTATION-PRACTICE {\&} EXPERIENCE},
  year            = {2015},
  volume          = {27},
  number          = {11, SI},
  pages           = {2818--2838},
  issn            = {1532-0626},
  abstract        = {Repackaged applications are based on genuine applications, but they
subtlety include some modifications. In particular, trojanized
applications are one of the most dangerous threats for smartphones.
Malware code may be hidden inside applications to access private data or
to leak user credit. In this paper, we propose a contract-based approach
to detect such repackaged applications, where a contract specifies the
set of legal actions that can be performed by an application. Current
methods to generate contracts lack information from real usage
scenarios, thus being inaccurate and too coarse-grained. This may result
either in generating too many false positives or in missing misbehaviors
when verifying the compliance between the application and the contract.
In the proposed framework, application contracts are generated
dynamically by a central server merging execution traces collected and
shared continuously by collaborative users executing the application.
More precisely, quantitative information extracted from execution traces
is used to define a contract describing the expected application
behavior, which is deployed to the cooperating users. Then, every user
can use the received contract to check whether the related application
is either genuine or repackaged. Such a verification is based on an
enforcement mechanism that monitors the application execution at
run-time and compares it against the contract through statistical tests.
Copyright (c) 2014 John Wiley {\&} Sons, Ltd.},
  annote          = {International Conference on Collaboration Technologies and Systems (CTS), San Diego, CA, MAY 20-24, 2013},
  bdsk-url-1      = {http://dx.doi.org/10.1002/cpe.3447},
  bytitledomenico = {yes},
  doi             = {10.1002/cpe.3447},
  institution     = {IEEE; Intelligent Automat Inc; Knowledge Based Syst Inc; LexisNexis Corp; Ball Aerosp {\&} Technologies Corp; Intel Corp; Microsoft Res; Progeny Syst Corp; Springer Verlag},
}

@Article{LIN2014110,
  author          = {Lin, Yu-Cheng and Cheung, Weng-Fong and Siao, Fu-Cih},
  title           = {{Developing mobile 2D barcode/RFID-based maintenance management system}},
  journal         = {Automation in Construction},
  year            = {2014},
  volume          = {37},
  pages           = {110--121},
  issn            = {0926-5805},
  abstract        = {Effective maintenance management can be extremely difficult owing to various types of equipment and instruments in a construction lab. These equipment and instruments are required to provide a high level of precision and accuracy in their tests. Usually, maintenance staff will make hard copy records of inspections and maintenance results in a construction lab. Consequently, there are often difficulties in accessing information and data re-entry problems during the maintenance process. By using 2D barcode and Radio Frequency Identification (RFID) technologies, this study presents a novel system called Mobile 2D Barcode/RFID-based Maintenance Management (M-BRMM) system to improve lab equipment and instrument maintenance management and provides a maintenance information sharing platform. Integrating promising information technologies such as smart phones and RFID-enabled PDAs, the M-BRMM is then applied in a construction lab in Taiwan to verify our proposed methodology and demonstrates improvements to the maintenance process in a construction lab.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0926580513001611},
  bdsk-url-2      = {https://doi.org/10.1016/j.autcon.2013.10.004},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.autcon.2013.10.004},
  keywords        = {2D barcode, Construction lab, Information management system, Maintenance management, Mobile system, Web-based,RFID},
  url             = {http://www.sciencedirect.com/science/article/pii/S0926580513001611},
}

@Article{Madalinski201049,
  author          = {Madalinski, A and Nouioua, F and Dague, P},
  title           = {{Diagnosability verification with Petri net unfoldings}},
  journal         = {International Journal of Knowledge-Based and Intelligent Engineering Systems},
  year            = {2010},
  volume          = {14},
  number          = {2},
  pages           = {49--55},
  abstract        = {Complex systems increasingly require safety and robustness with regards to faults occurrences, and diagnosability is a key property to ensure this at design stage. This paper demonstrates how Petri net unfoldings, which have been proven to elevate the state explosion problem, can be applied to verify diagnosability by adapting the twin plant method. {\textcopyright} 2009 - IOS Press and the authors.},
  annote          = {cited By 14},
  bdsk-url-1      = {http://dx.doi.org/10.3233/KES-2010-0191},
  bytitledomenico = {doubt},
  doi             = {10.3233/KES-2010-0191},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013614903{\&}doi=10.3233{\%}2FKES-2010-0191{\&}partnerID=40{\&}md5=86b2c390dc52ee7987a5a15095241e95},
}

@Article{CENGIZEVCI199169,
  author          = {Evci, C Cengiz},
  title           = {{DPCM-AQB speech codecs employing autocorrelation based vector quantizers for mobile applications}},
  journal         = {Signal Processing},
  year            = {1991},
  volume          = {23},
  number          = {1},
  pages           = {69--77},
  issn            = {0165-1684},
  abstract        = {This paper presents the performance results of DPCM-AQB speech codecs using correlation coefficient based forward prediction technique. The predictor is selected with the aid of the predetermined autocorrelation coefficients resulting from a training sequence and stored in a look-up table (LUT). A set of correlation coefficients is calculated for each block of input speech. The computed correlation vector is compared one by one with the stored coefficient vectors. Towards the end of this paper, the results in terms of SNRSEG in dB and extra side information to be sent are compared to well-known methods for bit-rates of 16, 24 and 32 kbit/s.
Zusammenfassung
In der Veroffentlichung werden die Ergebnisse bez{\"{u}}glich der Leistungsf{\"{a}}higkeit eines DPCM-AQB Sprach-Codecs mitgeteilt, der in Verbindung mit einem adaptiven Vorwarts-Pr{\"{a}}dictor arbeitet. Die Pr{\"{a}}diktorauswahl st{\"{u}}tzt sich auf die zuvor bestimmten Autokorrelationskoeffizienten. Das Umschalten zwischen den Satzen der Korrelationskoeffizienten wird unter Verwendung des Kriteriums des kleinsten mittleren Fehlerquadrats durchgef{\"{u}}hrt. In einem weiteren Schritt wird ein Satz von Pr{\"{a}}diktor-Koeffizienten aus der gespeicherten Tabelle geholt. Die Ergebnisse in Form von SNRSEG und der speziell zu sendenden Nebeninformation werden f{\"{u}}r 16, 24 und 32 kbit/s mit bekannten Verfahren verglichen.
R{\'{e}}sum{\'{e}}
Ce papier pr{\'{e}}sente les performances des codecs de parole DPCM-AQB utilisant une technique de pr{\'{e}}diction fond{\'{e}}e sur les coefficients de corr{\'{e}}lation. La s{\'{e}}lection du pr{\'{e}}dicteur est bas{\'{e}}e sur des coefficients d'autocorr{\'{e}}lation pr{\'{e}}d{\'{e}}termin{\'{e}}s resultant d'une s{\'{e}}quence d'entrainement et stock{\'{e}}s dans une table (LUT). Un ensemble de coefficients d'autocorr{\'{e}}lation est calcul{\'{e}} pour chaque bloc de parole. Les vecteurs de corr{\'{e}}lation ainsi calcul{\'{e}}s sont ensuite compar{\'{e}}s un {\`{a}} un avec les vecteurs stock{\'{e}}s/ Les r{\'{e}}sultats en terme de RSBSEG et d'information auxiliaire sont compar{\'{e}}s {\`{a}} des m{\'{e}}thodes classiques pour des d{\'{e}}bits de 16, 24 et 32 kbit/s.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/0165168491901448},
  bdsk-url-2      = {https://doi.org/10.1016/0165-1684(91)90144-8},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/0165-1684(91)90144-8},
  keywords        = {adaptive predictors, vector quantizers,Speech coding},
  url             = {http://www.sciencedirect.com/science/article/pii/0165168491901448},
}

@Article{Zhu2018638,
  author          = {Zhu, H.-J. and You, Z.-H. and Zhu, Z.-X. and Shi, W.-L. and Chen, X and Cheng, L},
  title           = {{DroidDet: Effective and robust detection of android malware using static analysis along with rotation forest model}},
  journal         = {Neurocomputing},
  year            = {2018},
  volume          = {272},
  pages           = {638--646},
  abstract        = {The Android platform is becoming increasingly popular and various organizations have developed a variety of applications (App) to cater to market trends. Due to the characteristics of the Android platform, such as supporting the unofficial App stores, open source policy and the great tolerance for App verification, it is inevitable that it faces serious problems of malicious software intrusion. In order to protect the users from the serious damages caused by Android malware, we propose a low-cost and high-efficient method to extract permissions, sensitive APIs, monitoring system events and permission-rate as key features, and employ the ensemble Rotation Forest (RF) to construct a model to detect whether an Android App is malicious or not. Specifically, a dataset containing 2,130 samples is used to verify the performance of the proposed method. The experimental results show that the proposed method achieves an high accuracy of 88.26{\%} with 88.40{\%} sensitivity at the precision of 88.16{\%}. To further evaluate the performance of the proposed model, we also compare it with the state-of-the-art Support Vector Machine (SVM) model under the same experimental conditions, and the comparison results demonstrate that the proposed method improves the accuracy by 3.33{\%} compared to SVM. The experimental results show that the proposed model is extremely promising and could provide a cost-effective alternative for Android malware detection. {\textcopyright} 2017},
  annote          = {cited By 7},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.neucom.2017.07.030},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.neucom.2017.07.030},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025821067{\&}doi=10.1016{\%}2Fj.neucom.2017.07.030{\&}partnerID=40{\&}md5=99d7f6ad889ced982589caf7eed65293},
}

@Article{FAN2017224,
  author          = {Fan, Wenhao and Sang, Yaohui and Zhang, Daishuai and Sun, Ran and Liu, Yuan'an},
  title           = {{DroidInjector: A process injection-based dynamic tracking system for runtime behaviors of Android applications}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {70},
  pages           = {224--237},
  issn            = {0167-4048},
  abstract        = {As the most widely applied mobile operating system for smartphones, Android is challenged by fast growing security problems, which are caused by malicious applications (apps). Behaviors of malicious apps become more and more inconspicuous, which largely increase the difficulty of security detection. This paper provides a new dynamic method, called DroidInjector, to further enrich Android malware detection technologies. DroidInjector is a process injection-based dynamic tracking method for monitoring the behaviors of target app during its running period. Distinguished with existing works, 1) DroidInjector uses a ptrace-based technology to attach itself to the process of the target app, so tracking can be done on smartphones or emulators, and without modifying Android OS; 2) DroidInjector can monitor security-sensitive Java API calls in Android Runtime (Android Virtual Machine) by hooking the APIs related to Android component lifecycle phases, dynamic library loading, multi-threading, inter-component and inter-process communications, and system resources. Thus, DroidInjector supports flexible deployments, and is able to provide a fine-grained context-aware, flow-aware and library-aware API calls tracking for the target app. DroidInjector is validated in extensive experiments through performance evaluation, application evaluation and case evaluation for multiple malicious and benign apps running on several smartphones installed with standard or customized Android systems.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817301207},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.06.001},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2017.06.001},
  keywords        = {App behavior, Process injection, Security, Tracking,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817301207},
}

@Article{ALAM2017230,
  author          = {Alam, Shahid and Qu, Zhengyang and Riley, Ryan and Chen, Yan and Rastogi, Vaibhav},
  title           = {{DroidNative: Automating and optimizing detection of Android native code malware variants}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {65},
  pages           = {230--246},
  issn            = {0167-4048},
  abstract        = {According to the Symantec and F-Secure threat reports, mobile malware development in 2013 and 2014 has continued to focus almost exclusively ({\~{}}99{\%}) on the Android platform. Malware writers are applying stealthy mutations (obfuscations) to create malware variants, thwarting detection by signature-based detectors. In addition, the plethora of more sophisticated detectors making use of static analysis techniques to detect such variants operate only at the bytecode level, meaning that malware embedded in native code goes undetected. A recent study shows that 86{\%} of the most popular Android applications contain native code, making native code malware a plausible threat vector. This paper proposes DroidNative, an Android malware detector that uses specific control flow patterns to reduce the effect of obfuscations and provides automation. As far as we know, DroidNative is the first system that builds cross-platform (x86 and ARM) semantic-based signatures at the Android native code level, allowing the system to detect malware embedded in either bytecode or native code. When tested with a dataset of 5490 samples, DroidNative achieves a detection rate (DR) of 93.57{\%} and a false positive rate of 2.7{\%}. When tested with traditional malware variants, it achieves a DR of 99.48{\%}, compared to the DRs of academic and commercial tools that range from 8.33{\%} to 93.22{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S016740481630164X},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2016.11.011},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2016.11.011},
  keywords        = {Control flow analysis, Data mining, Malware analysis, Malware variant detection,Android native code},
  url             = {http://www.sciencedirect.com/science/article/pii/S016740481630164X},
}

@Conference{Suciu2017156,
  author          = {Suciu, D.-A. and Sion, R},
  title           = {{Droidsentry: Efficient Code Integrity and Control Flow Verification on TrustZone Devices}},
  booktitle       = {Proceedings - 2017 21st International Conference on Control Systems and Computer, CSCS 2017},
  year            = {2017},
  pages           = {156--158},
  abstract        = {The fast evolution of mobile devices has made them the center of attention for not only the research industry, but also malicious actors, as smartphones are used to store, transmit and process sensitive information. The diversity and number of typically installed applications create windows of opportunity for attackers. Attackers can use vulnerable applications to gain control over the device or change the behavior of applications relied on to manage user's finances or store their secret data. Thus, current mobile systems need application execution verification mechanisms. In consequence, we present a framework for current ARM mobile devices that can detect application control flow manipulation attempts by looking at the history of executed control flow altering instructions on the processor. This history examination provides enough information to implement the state-of-the-art fine-grained control policies, without additional binary instrumentation. Moreover, this framework is designed to work with existing hardware and have a minimal impact on performance. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CSCS.2017.28},
  bytitledomenico = {no},
  doi             = {10.1109/CSCS.2017.28},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027530534{\&}doi=10.1109{\%}2FCSCS.2017.28{\&}partnerID=40{\&}md5=0b51b9409a996d195294de437602e868},
}

@InProceedings{Hu:2014:DLI:2627393.2627404,
  author          = {Hu, Wenhui and Octeau, Damien and McDaniel, Patrick Drew and Liu, Peng},
  title           = {{Duet: Library Integrity Verification for Android Applications}},
  booktitle       = {Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless {\&}{\#}38; Mobile Networks},
  year            = {2014},
  series          = {WiSec '14},
  pages           = {141--152},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {In recent years, the Android operating system has had an explosive growth in the number of applications containing third-party libraries for different purposes. In this paper, we identify three library-centric threats in the real-world Android application markets: (i) the library modification threat, (ii) the masquerading threat and (iii) the aggressive library threat. These three threats cannot effectively be fully addressed by existing defense mechanisms such as software analysis, anti-virus software and anti-repackaging techniques. To mitigate these threats, we propose Duet, a library integrity verification tool for Android applications at application stores. This is non-trivial because the Android application build process merges library code and application-specific logic into a single binary file. Our approach uses reverse-engineering to achieve integrity verification. We implemented a full working prototype of Duet. In a dataset with 100,000 Android applications downloaded from Google Play between February 2012 and September 2013, we verify integrity of 15 libraries. On average, 80.50% of libraries can pass the integrity verification. In-depth analysis indicates that code insertion, obfuscation, and optimization on libraries by application developers are the primary reasons for not passing integrity verification. The evaluation results not only indicate that Duet is an effective tool to mitigate library-centric attacks, but also provide empirical insight into the library integrity situation in the wild.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2627393.2627404},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2627393.2627404},
  bytitledomenico = {doubt},
  doi             = {10.1145/2627393.2627404},
  isbn            = {978-1-4503-2972-9},
  keywords        = {library integrity verification, library-centric security threat, smartphone, third-party library,android},
  url             = {http://doi.acm.org/10.1145/2627393.2627404},
}

@Conference{Hay2015118,
  author          = {Hay, R and Tripp, O and Pistoia, M},
  title           = {{Dynamic detection of inter-application communication vulnerabilities in android}},
  booktitle       = {2015 International Symposium on Software Testing and Analysis, ISSTA 2015 - Proceedings},
  year            = {2015},
  pages           = {118--128},
  abstract        = {A main aspect of the Android platform is Inter-Application Communication (IAC), which enables reuse of functionality across apps and app components via message passing. While a powerful feature, IAC also constitutes a serious attack surface. A malicious app can embed a payload into an IAC message, thereby driving the recipient app into a potentially vulnerable behavior if the message is processed without its fields first being sanitized or validated. We present what to our knowledge is the first comprehensive testing algorithm for Android IAC vulnerabilities. Toward this end, we first describe a catalog, stemming from our field experience, of 8 concrete vulnerability types that can potentially arise due to unsafe handling of incoming IAC messages. We then explain the main challenges that automated discovery of Android IAC vulnerabilities entails, including in particular path coverage and custom data fields, and present simple yet surprisingly effective solutions to these challenges. We have realized our testing approach as the Intent-Droid system, which is available as a commercial cloud service. IntentDroid utilizes lightweight platform-level in-strumentation, implemented via debug breakpoints (to run atop any Android device without any setup or customization), to recover IAC-relevant app-level behaviors. Evaluation of IntentDroid over a set of 80 top-popular apps has revealed a total 150 IAC vulnerabilities | some already fixed by the developers following our report | with a recall rate of 92{\%} w.r.t. a ground truth established via manual auditing by a security expert. {\textcopyright} 2015 ACM.},
  annote          = {cited By 19},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2771783.2771800},
  bytitledomenico = {yes},
  doi             = {10.1145/2771783.2771800},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963711206{\&}doi=10.1145{\%}2F2771783.2771800{\&}partnerID=40{\&}md5=47d01a22bce7a25d618d5960de3aa998},
}

@Article{Zhao2017101,
  author          = {Zhao, R and Li, X and Xu, G and Feng, Z and Hao, J},
  title           = {{E-SSL: An SSL security-enhanced method for bypassing MITM attacks in mobile internet}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10189 LNCS},
  pages           = {101--120},
  abstract        = {In mobile internet, the Secure Sockets Layer (SSL) validation vulnerabilities of applications can be easily exploited through SSL Man-in-the-Middle (MITM) attacks, which are difficult to defeat. In this paper, an SSL Security-Enhanced method (E-SSL) is proposed to detect and defeat SSL MITM attacks, which improves the security of internet communication under malicious attacks. SSL proxy is used to find SSL certificate validation vulnerabilities and detect SSL MITM attacks. Based on randomness and hash theory, an SSL shared service with random port mapping is implemented to bypass SSL MITM attacks, the spatio-temporal randomization will increase the difficulty of attacker's correct guessing. We implement a prototype on Android platform, and verify its effectiveness and reliability with 650 apps under realistic SSL MITM attacks. Using the E-SSL approach, 185 apps out of 650 are detected with SSL certificate validation vulnerabilities. Furthermore, evaluation results show that the E-SSL approach enables these SSL certificate validation vulnerabilities apps to successfully bypass SSL MITM attacks, thus significantly increases the security of user data privacy in public mobile internet. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-57708-1_7},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-57708-1_7},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018669458{\&}doi=10.1007{\%}2F978-3-319-57708-1{\_}7{\&}partnerID=40{\&}md5=9ab7b03577c83ab6ed941e8d46107846},
}

@Article{WU201617,
  author          = {Wu, Songyang and Wang, Pan and Li, Xun and Zhang, Yong},
  title           = {{Effective detection of android malware based on the usage of data flow APIs and machine learning}},
  journal         = {Information and Software Technology},
  year            = {2016},
  volume          = {75},
  pages           = {17--25},
  issn            = {0950-5849},
  abstract        = {Context. Android has been ranked as the top smartphone platform nowadays. Studies show that Android malware have increased dramatically and that personal privacy theft has become a major form of attack in recent years. These critical security circumstances have generated a strong interest in developing systems that automatically detect malicious behaviour in Android applications (apps). However, most methods of detecting sensitive data leakage have certain shortcomings, including computational expensiveness and false positives. Objective. This study proposes an Android malware detecting system that provides highly accurate classification and efficient sensitive data transmission analysis. Method. The study adopts a machine learning approach that leverages the use of dataflow application program interfaces (APIs) as classification features to detect Android malware. We conduct a thorough analysis to extract dataflow-related API-level features and improve the k-nearest neighbour classification model. The dataflow-related API list is further optimized through machine learning, which enables us to improve considerably the efficiency of sensitive data transmission analysis, whereas analytical accuracy is approximated to that of the experiment using a full dataflow-related API list. Results. The proposed scheme is evaluated using 1160 benign and 1050 malicious samples. Results show that the system can achieve an accuracy rate of as high as 97.66{\%} in detecting unknown Android malware. Our experiment of static dataflow analysis shows that more than 85{\%} of sensitive data transmission paths can be determined using the refined API subset, whereas time of analysis decreases by nearly 40{\%}. Conclusion. The usage of dataflow-related APIs is a valid feature for identifying Android malware. The proposed scheme provides an efficient approach to detecting Android malware and investigating privacy violations in malicious apps.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0950584916300386},
  bdsk-url-2      = {https://doi.org/10.1016/j.infsof.2016.03.004},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.infsof.2016.03.004},
  keywords        = {Malware detection, Privacy leakage,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S0950584916300386},
}

@Article{BHANDARI2017525,
  author          = {Bhandari, Upasna and Neben, Tillmann and Chang, Klarissa and Chua, Wen Yong},
  title           = {{Effects of interface design factors on affective responses and quality evaluations in mobile applications}},
  journal         = {Computers in Human Behavior},
  year            = {2017},
  volume          = {72},
  pages           = {525--534},
  issn            = {0747-5632},
  abstract        = {Through this study we examined the effects of design factors, namely balance and originality on users' affective responses and subsequent quality evaluations. We effectively manipulated balance and originality to see how it independently and together affects two sub dimensions of emotions i.e. arousal and valance. After this we evaluated the impact of this affective response on pragmatic and hedonic quality perceptions. Experimental results confirmed a significant impact of design factors on emotions and quality perceptions. Usability studies can have a better understanding of how design influences user decision-making. It breaks the efficiency perspective further which has heavily shadowed human computer studies and suggests that affect is equally if not more important when it comes to having desired user reactions from app design.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0747563217301176},
  bdsk-url-2      = {https://doi.org/10.1016/j.chb.2017.02.044},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.chb.2017.02.044},
  keywords        = {Balance, Design, Emotions, Hedonic, Mobile apps, Pragmatic,Aesthetics},
  url             = {http://www.sciencedirect.com/science/article/pii/S0747563217301176},
}

@InProceedings{ISI:000417469700006,
  author          = {Song, Wei and Qian, Xiangxing and Huang, Jeff},
  title           = {{EHBDroid: Beyond GUI Testing for Android Applications}},
  booktitle       = {PROCEEDINGS OF THE 2017 32ND IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE'17)},
  year            = {2017},
  editor          = {{Rosu, G and DiPenta, M and Nguyen, TN}},
  series          = {IEEE ACM International Conference on Automated Software Engineering},
  pages           = {27--37},
  organization    = {IEEE; Assoc Comp Machinery; IEEE Comp Soc; ACM SIGSOFT; ACM SIGAI; Coll Engn; NASA; Microsoft; DENSO; Univ Minnesota; Runtime Verificat; Huawei; InputOutput; Google; Toyota Infotechnol Ctr; Fox Dev Corp; Galois},
  abstract        = {With the prevalence of Android-based mobile devices, automated testing
for Android apps has received increasing attention. However, owing to
the large variety of events that Android supports, test input generation
is a challenging task. In this paper, we present a novel approach and an
open source tool called EHBDroid for testing Android apps. In contrast
to conventional GUI testing approaches, a key novelty of EHBDroid is
that it does not generate events from the GUI, but directly invokes
callbacks of event handlers. By doing so, EHBDroid can efficiently
simulate a large number of events that are difficult to generate by
traditional UI-based approaches. We have evaluated EHBDroid on a
collection of 35 real-world large-scale Android apps and compared its
performance with two state-of-the-art UI-based approaches, Monkey and
Dynodroid. Our experimental results show that EHBDroid is significantly
more effective and efficient than Monkey and Dynodroid: in a much
shorter time, EHBDroid achieves as much as 22.3{\%} higher statement
coverage (11.1{\%} on average) than the other two approaches, and found 12
bugs in these benchmarks, including 5 new bugs that the other two failed
to find.},
  annote          = {32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), Univ Illinois Urbana Champaign, Urbana Champaign, IL, OCT 29-NOV 03, 2017},
  bytitledomenico = {doubt},
  isbn            = {978-1-5386-2684-9},
  issn            = {1527-1366},
}

@Article{Allix2016183,
  author          = {Allix, K and Bissyand{\'{e}}, T F and J{\'{e}}rome, Q and Klein, J and State, R and {Le Traon}, Y},
  title           = {{Empirical assessment of machine learning-based malware detectors for Android: Measuring the gap between in-the-lab and in-the-wild validation scenarios}},
  journal         = {Empirical Software Engineering},
  year            = {2016},
  volume          = {21},
  number          = {1},
  pages           = {183--211},
  abstract        = {To address the issue of malware detection through large sets of applications, researchers have recently started to investigate the capabilities of machine-learning techniques for proposing effective approaches. So far, several promising results were recorded in the literature, many approaches being assessed with what we call in the lab validation scenarios. This paper revisits the purpose of malware detection to discuss whether such in the lab validation scenarios provide reliable indications on the performance of malware detectors in real-world settings, aka in the wild. To this end, we have devised several Machine Learning classifiers that rely on a set of features built from applications' CFGs. We use a sizeable dataset of over 50 000 Android applications collected from sources where state-of-the art approaches have selected their data. We show that, in the lab, our approach outperforms existing machine learning-based approaches. However, this high performance does not translate in high performance in the wild. The performance gap we observed---F-measures dropping from over 0.9 in the lab to below 0.1 in the wild---raises one important question: How do state-of-the-art approaches perform in the wild? {\textcopyright} 2014, Springer Science+Business Media New York.},
  annote          = {cited By 20},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s10664-014-9352-6},
  bytitledomenico = {yes},
  doi             = {10.1007/s10664-014-9352-6},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955185163{\&}doi=10.1007{\%}2Fs10664-014-9352-6{\&}partnerID=40{\&}md5=efec207f34bf7f03efffe550ab162be5},
}

@Article{TUYSUZ201717,
  author          = {Tuysuz, Mehmet Fatih and U{\c{c}}an, Murat},
  title           = {{Energy-aware network/interface selection and handover application for android-based mobile devices}},
  journal         = {Computer Networks},
  year            = {2017},
  volume          = {113},
  pages           = {17--28},
  issn            = {1389-1286},
  abstract        = {Considering recent number of energy-hungry applications, large-screen mobile devices, fast processors, multiple hardware integrated network connectivity, high amount of data consumption and audio-video communication times, it is clear to say that high battery capacity is what users ask for. However, although processing power doubles roughly every two years, progress in battery technology did not even double in the last decade. In order to meet the ever growing demand, vendors can simply increase battery sizes of mobile devices or focus on novel energy-efficient hardware and software solutions. In this context, this paper11This work was supported by The Scientific and Technological Research Council of Turkey (T{\"{U}}B{\.I}TAK) under Grant No: 114E075. proposes an energy-aware network/interface selection and handover application for Android based mobile devices. The proposed application computes and reports power consumption levels of each Point of Attachment in the vicinity for various web-applications (e.g. Facebook, Twitter, Skype, etc.), making use of real packet measurements and realistic computations, and then enables stations to handover horizontally/vertically to optimize energy efficiency. Results of extensive tests clarify that the proposed scheme not only saves energy but also increases overall throughput and hence, provides a better service quality.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1389128616304157},
  bdsk-url-2      = {https://doi.org/10.1016/j.comnet.2016.11.021},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.comnet.2016.11.021},
  keywords        = {Android, Cellular networks, IEEE 802.11, Network selection, Wireless networks,Energy efficiency},
  url             = {http://www.sciencedirect.com/science/article/pii/S1389128616304157},
}

@InProceedings{Jabbarvand:2016:ETM:2931037.2931067,
  author          = {Jabbarvand, Reyhaneh and Sadeghi, Alireza and Bagheri, Hamid and Malek, Sam},
  title           = {{Energy-aware Test-suite Minimization for Android Apps}},
  booktitle       = {Proceedings of the 25th International Symposium on Software Testing and Analysis},
  year            = {2016},
  series          = {ISSTA 2016},
  pages           = {425--436},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The rising popularity of mobile apps deployed on battery-constrained devices has motivated the need for effective energy-aware testing techniques. Energy testing is generally more labor intensive and expensive than functional testing, as tests need to be executed in the deployment environment and specialized equipment needs to be used to collect energy measurements. Currently, there is a dearth of automatic mobile testing techniques that consider energy as a program property of interest. This paper presents an energy-aware test-suite minimization approach to significantly reduce the number of tests needed to effectively test the energy properties of an Android app. It relies on an energy-aware coverage criterion that indicates the degree to which energy-greedy segments of a program are tested. We describe and evaluate two complementary algorithms for test-suite minimization. Experiments over test suites provided for real-world apps have corroborated our ability to reduce the test suite size by 84% on average, while maintaining the effectiveness of test suite in revealing the great majority of energy bugs.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2931037.2931067},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2931037.2931067},
  bytitledomenico = {doubt},
  doi             = {10.1145/2931037.2931067},
  isbn            = {978-1-4503-4390-9},
  keywords        = {Coverage criterion, Green software engineering, Test-suite minimization,Android},
  url             = {http://doi.acm.org/10.1145/2931037.2931067},
}

@Article{MAN201429,
  author          = {Man, Yemao and Ngai, Edith C.-H.},
  title           = {{Energy-efficient automatic location-triggered applications on smartphones}},
  journal         = {Computer Communications},
  year            = {2014},
  volume          = {50},
  pages           = {29--40},
  issn            = {0140-3664},
  abstract        = {With the prevalence of localization techniques in smartphones, location-based applications on mobiles have become increasingly popular. However, only minorities of applications can be triggered automatically by the predefined locations of interest without any human interaction. One reason is that the inevitable operation of location detection by GPS is power-intensive. While existing work has focused on energy efficiency in continuous location tracking, energy-efficient location detection for matching predefined location of interest remains to be further explored. This paper proposes a unified framework that supports energy-efficient location detection for automatic location-triggered applications. Our framework triggers desired events only when the user is approaching the predefined locations of interest. Besides the efforts we make to reduce the number of GPS updates by cooperating with other types of on-device sensors, the framework also aims to coordinate multiple location-triggered applications to further reduce energy consumption on location updates. We implemented our framework as a middleware in the Android operating system and conducted extensive real experiments. The experimental results demonstrate that our framework can reduce the number of GPS requests and low the energy consumption of the smartphones significantly.},
  annote          = {Green Networking},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0140366414001200},
  bdsk-url-2      = {https://doi.org/10.1016/j.comcom.2014.03.023},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.comcom.2014.03.023},
  keywords        = {Data collection, Location-based services, Mobile applications,Energy-efficiency},
  url             = {http://www.sciencedirect.com/science/article/pii/S0140366414001200},
}

@Article{TEREFE201675,
  author          = {Terefe, Mati B and Lee, Heezin and Heo, Nojung and Fox, Geoffrey C and Oh, Sangyoon},
  title           = {{Energy-efficient multisite offloading policy using Markov decision process for mobile cloud computing}},
  journal         = {Pervasive and Mobile Computing},
  year            = {2016},
  volume          = {27},
  pages           = {75--89},
  issn            = {1574-1192},
  abstract        = {Mobile systems, such as smartphones, are becoming the primary platform of choice for a user's computational needs. However, mobile devices still suffer from limited resources such as battery life and processor performance. To address these limitations, a popular approach used in mobile cloud computing is computation offloading, where resource-intensive mobile components are offloaded to more resourceful cloud servers. Prior studies in this area have focused on a form of offloading where only a single server is considered as the offloading site. Because there is now an environment where mobile devices can access multiple cloud providers, it is possible for mobiles to save more energy by offloading energy-intensive components to multiple cloud servers. The method proposed in this paper differentiates the data- and computation-intensive components of an application and performs a multisite offloading in a data and process-centric manner. In this paper, we present a novel model to describe the energy consumption of a multisite application execution and use a discrete time Markov chain (DTMC) to model fading wireless mobile channels. We adopt a Markov decision process (MDP) framework to formulate the multisite partitioning problem as a delay-constrained, least-cost shortest path problem on a state transition graph. Our proposed Energy-efficient Multisite Offloading Policy (EMOP) algorithm, built on a value iteration algorithm (VIA), finds the efficient solution to the multisite partitioning problem. Numerical simulations show that our algorithm considers the different capabilities of sites to distribute appropriate components such that there is a lower energy cost for data transfer from the mobile to the cloud. A multisite offloading execution using our proposed EMOP algorithm achieved a greater reduction on the energy consumption of mobiles when compared to a single site offloading execution.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1574119215001923},
  bdsk-url-2      = {https://doi.org/10.1016/j.pmcj.2015.10.008},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.pmcj.2015.10.008},
  keywords        = {MDP, Mobile cloud, Offloading,Multisite},
  url             = {http://www.sciencedirect.com/science/article/pii/S1574119215001923},
}

@Article{Banerjee2018470,
  author          = {Banerjee, A and Chong, L K and Ballabriga, C and Roychoudhury, A},
  title           = {{EnergyPatch: Repairing Resource Leaks to Improve Energy-Efficiency of Android Apps}},
  journal         = {IEEE Transactions on Software Engineering},
  year            = {2018},
  volume          = {44},
  number          = {5},
  pages           = {470--490},
  abstract        = {Increased usage of mobile devices, such as smartphones and tablets, has led to widespread popularity and usage of mobile apps. If not carefully developed, such apps may demonstrate energy-inefficient behaviour, where one or more energy-intensive hardware components (such as Wifi, GPS, etc) are left in a high-power state, even when no apps are using these components. We refer to such kind of energy-inefficiencies as energy bugs. Executing an app with an energy bug causes the mobile device to exhibit poor energy consumption behaviour and a drastically shortened battery life. Since mobiles apps can have huge input domains, therefore exhaustive exploration is often impractical. We believe that there is a need for a framework that can systematically detect and fix energy bugs in mobile apps in a scalable fashion. To address this need, we have developed EnergyPatch, a framework that uses a combination of static and dynamic analysis techniques to detect, validate and repair energy bugs in Android apps. The use of a light-weight, static analysis technique enables EnergyPatch to quickly narrow down to the potential program paths along which energy bugs may occur. Subsequent exploration of these potentially buggy program paths using a dynamic analysis technique helps in validations of the reported bugs and to generate test cases. Finally, EnergyPatch generates repair expressions to fix the validated energy bugs. Evaluation with real-life apps from repositories such as F-droid and Github, shows that EnergyPatch is scalable and can produce results in reasonable amount of time. Additionally, we observed that the repair expressions generated by EnergyPatch could bring down the energy consumption on tested apps up to 60 percent. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TSE.2017.2689012},
  bytitledomenico = {doubt},
  doi             = {10.1109/TSE.2017.2689012},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047012040{\&}doi=10.1109{\%}2FTSE.2017.2689012{\&}partnerID=40{\&}md5=90975c442961d54a3871d02bc1433323},
}

@InProceedings{8463090,
  author          = {Froberg, B and Merkle, L D},
  title           = {{Ensuring Android Execution Containers with Formal Methods}},
  booktitle       = {2018 Annual Reliability and Maintainability Symposium (RAMS)},
  year            = {2018},
  pages           = {1--4},
  abstract        = {Cybersecurity seems to be a losing battle in the 21st century. As such, current methods of defense detect and respond to threats, which is an ex postfacto defense'' (i.e., after the fact defense). In contrast, this research investigates the alternative view that a more reliable defense is one that is preventative by default. Specifically, taking the view that security is a subset of reliability motivates the development and application of assured methods. In particular, the safe execution of unreliable or malicious software can be assured through the design and implementation of formally specified software containers. Devices across all operating systems are under siege from a constant threat of automated and directed cyberattacks. Android, being the most popular operating system of all time, is not shielded from cyberattacks. A new means to assure a device's security through reliable execution is needed to stop these threats. Assured Android Execution Environments (A2E2) is a proposed framework that will be formally verified to assure the reliability and security on Android devices.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/RAM.2018.8463090},
  bytitledomenico = {doubt},
  doi             = {10.1109/RAM.2018.8463090},
  issn            = {2577-0993},
  keywords        = {Android (operating system);computer crime;formal specification;formal verification;mobile computing;Assured Android Execution Environments;Android devices;formal methods;cybersecurity;reliability motivates;safe execution;unreliable software;malicious software;formally specified software containers;operating systems;constant threat;automated directed cyberattacks;operating system;Android Execution containers;Androids;Humanoid robots;Software;Software reliability;Security;Containers;Android;mobile security;software reliability;formal methods;assured software execution},
}

@InProceedings{Lee:2015:ESF:2750858.2807531,
  author          = {Lee, Seokjun and Jung, Wonwoo and Chon, Yohan and Cha, Hojung},
  title           = {{EnTrack: A System Facility for Analyzing Energy Consumption of Android System Services}},
  booktitle       = {Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing},
  year            = {2015},
  series          = {UbiComp '15},
  pages           = {191--202},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Energy accounting is an essential requirement for optimizing energy consumption on mobile devices. State-of-the-art approaches consider application processes and threads as the sole components of energy consumption. In this framework, the energy consumption of system services is unclear and has not been comprehensively studied. In this paper, we suggest that the energy consumption of system services should be investigated to understand the behavior of applications. We propose a fine-grained energy tracing scheme, EnTrack, to enhance the accuracy of energy tracing by identifying and incorporating the energy portions consumed by system services. We implemented EnTrack on the Android platform and validated its functionality and usefulness. In addition, practical usage cases of EnTrack, which uses it as an energy behavior analysis tool, were introduced. The case studies demonstrated that EnTrack enables an understanding of fine-grained energy consumption, especially in system services, which have previously been concealed.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2750858.2807531},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2750858.2807531},
  bytitledomenico = {doubt},
  doi             = {10.1145/2750858.2807531},
  isbn            = {978-1-4503-3574-4},
  keywords        = {energy optimization, mobile systems,energy consumption tracing},
  url             = {http://doi.acm.org/10.1145/2750858.2807531},
}

@Article{Coleti2017363,
  author          = {Coleti, T A and Souza, L S and Morandini, M and Allard, S and Correa, P L P},
  title           = {{ErgoMobile: A software to support usability evaluations in mobile devices using observation techniques}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10288 LNCS},
  pages           = {363--378},
  abstract        = {The characteristics of mobile devices and their applications have led to changes in the way these systems are developed and tested. Usability tests are stages of development that are under constant modifications, since it is being taken into account that traditional techniques may not be sufficient to accomplish the testing activity for mobile devices. For example, the User Observation and Filming/Verbalization techniques involve the use of secondary devices to record the data. This may be a problem as the testing activity can become more complex and less comfortable for the users/evaluators. Aiming to present a strategy to minimize this issue, we are presenting the ErgoMobile environment that was developed with the main objective of avoiding the use of secondary devices since it can be installed directly in the mobile device and can collect images from the camera, sounds from the microphone and store interface snapshots. Initial tests presented that this tool behaves well when working in conjunction with other mobile applications, collecting good amounts of data and working in the background and practically had not created any disturbances to the participant or to the evaluator. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-58634-2_27},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-58634-2_27},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025137833{\&}doi=10.1007{\%}2F978-3-319-58634-2{\_}27{\&}partnerID=40{\&}md5=3778b1c0e5e3ba92c7839f05c6b2d10f},
}

@InProceedings{ISI:000418466000250,
  author          = {Martinelli, Fabio and Marulli, Fiammetta and Mercaldo, Francesco},
  title           = {{Evaluating Convolutional Neural Network for Effective Mobile Malware Detection}},
  booktitle       = {KNOWLEDGE-BASED AND INTELLIGENT INFORMATION {\&} ENGINEERING SYSTEMS},
  year            = {2017},
  editor          = {{ZanniMerk, C and Frydman, C and Toro, C and Hicks, Y and Howlett, RJ and Jain, LC}},
  volume          = {112},
  series          = {Procedia Computer Science},
  pages           = {2372--2381},
  organization    = {Lab Sci Informat Syst; KES Int},
  abstract        = {In last years smartphone and tablet devices have been handling an
increasing variety of sensitive resources. As a matter of fact, these
devices store a plethora of information related to our every-day life,
from the contact list, the received email, and also our position during
the day (using not only the GPS chipset that can be disabled but only
the Wi-Fi/mobile connection it is possible to discover the device
geolocalization).
This is the reason why mobile attackers are producing a large number of
malicious applications targeting Android (that is the most diffused
mobile operating system), often by modifying existing applications,
which results in malware being organized in families, where each
application belonging to the same family exhibit the same malicious
behaviour. These behaviours are typically information gathering related,
for instance a very widespread malicious behaviour in mobile is
represented by sending personal information (as examples: the contact
list, the received and send SMSs, the browser history) to a remote
server managed by the attackers.
In this paper, we investigate whether deep learning algorithms are able
to discriminate between malicious and legitimate Android samples. To
this end, we designed a method based on convolutional neural network
applied to syscalls occurrences through dynamic analysis. We
experimentally evaluated the built deep learning classifiers on a recent
dataset composed of 7100 real-world applications, more than 3000 of
which are widespread malware belonging to several different families in
order to test the effectiveness of the proposed method, obtaining
encouraging results. (C) 2017 The Authors. Published by Elsevier B.V.},
  annote          = {21st International Conference on Knowledge - Based and Intelligent Information and Engineering Systems (KES), Aix Marseille Univ, St Charles Campus, Marseille, FRANCE, SEP 06-08, 2017},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.procs.2017.08.216},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.procs.2017.08.216},
  issn            = {1877-0509},
}

@InProceedings{Dudheria201840,
  author          = {Dudheria, R},
  title           = {{Evaluating Features and Effectiveness of Secure QR Code Scanners}},
  booktitle       = {Proceedings - 2017 International Conference on Cyber-Enabled Distributed Computing and Knowledge Discovery, CyberC 2017},
  year            = {2017},
  volume          = {2018-January},
  pages           = {40--49},
  abstract        = {As QR codes become ubiquitous, there is a prominent security threat of phishing and malware attacks that can be carried out by sharing rogue URLs through such codes. Several QR code scanner apps have become available in the past few years to combat such threats. Nevertheless, limited work exists in the literature evaluating such apps in the context of security. In this paper, we have investigated the status of existing secure QR code scanner apps for Android from a security point of view. We found that several of the so-called secure QR code scanner apps merely present the URL encoded in a QR code to the user rather than validating it against suitable threat databases. Further, many apps do not support basic security features such as displaying the URL to the user and asking for user confirmation before proceeding to open the URL in a browser. The most alarming issue that emerged during this study is that only two of the studied apps perform validation of the redirected URL associated with a QR code. We also tested the relevant apps with a set of benign, phishing and malware URLs collected from multiple sources. Overall, the results of our experiments imply that the protection offered by the examined secure QR code scanner apps against rogue URLs (especially malware URLs) is limited. Based on the findings of our investigation, we have distilled a set of key lessons and proposed design recommendations to enhance the security aspects of such apps. {\textcopyright} 2017 IEEE.},
  annote          = {From Duplicate 2 (Evaluating features and effectiveness of secure QR code scanners - Dudheria, R) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CyberC.2017.23},
  bytitledomenico = {no},
  doi             = {10.1109/CyberC.2017.23},
  keywords        = {,Browsers,Google,Malware,Mobile communication,Phishing,QR code scanner,QR codes,Security,Smartphone,Uniform resource locators,benign URL,invasive software,malware URL,mobile computing,phishing URL,rogue URL,secure QR code scanner application,security features,security threat,smart phones},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050493720{\&}doi=10.1109{\%}2FCyberC.2017.23{\&}partnerID=40{\&}md5=d1e829bb37104ee226651c18278d9a59},
}

@Article{DECLEVAFARTO20153,
  author          = {{de Cleva Farto}, Guilherme and Endo, Andre Takeshi},
  title           = {{Evaluating the Model-Based Testing Approach in the Context of Mobile Applications}},
  journal         = {Electronic Notes in Theoretical Computer Science},
  year            = {2015},
  volume          = {314},
  pages           = {3--21},
  issn            = {1571-0661},
  abstract        = {The popularity of portable devices has grown rapidly in recent years. Due to the high number and diversity of users, new testing approaches are necessary to reduce the occurrence of faults and ensure better quality in mobile applications. The major objective of this paper is to evaluate the use of Model-Based Testing (MBT) in the construction and implementation of automated tests to verify and validate mobility solutions developed in the Google Android platform. The research proposal is guided by three questions: (Q1) -- ``Can the concepts of MBT be used in its current state to verify and validate functional requirements in mobile applications?''; (Q2) -- ``What are the results and challenges identified from adoption of MBT in mobile applications?''; and (Q3) -- ``How effective were the models and test cases generated, implemented and executed in the mobile application evaluated?''. The results obtained from an experimental evaluation are discussed and related to questions of this research.},
  annote          = {CLEI 2014, the XL Latin American Conference in Informatic},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1571066115000250},
  bdsk-url-2      = {https://doi.org/10.1016/j.entcs.2015.05.002},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.entcs.2015.05.002},
  keywords        = {Android, mobile applications, model-based testing,automated testing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1571066115000250},
}

@InProceedings{6549308,
  author          = {Anandhavalli, S and Srivatsa, S K},
  title           = {{Evaluating the quality of test data under the influence of vigilance parameter in flexfis}},
  booktitle       = {International Conference on Software Engineering and Mobile Application Modelling and Development (ICSEMA 2012)},
  year            = {2012},
  pages           = {1--8},
  abstract        = {In this paper, we determine the influence of the vigilance parameter using a modified version of vector quantization used in Flexible Fuzzy Inference System (FLEXFIS) specifically for Takagi Sugeno fuzzy model. FLEXFIS adopts a single pass incremental learning approach for the antecedent parts of the rules' learning process. In order to achieve this learning process, an evolving version of vector quantization is used to either update or evolve new clusters or rules. It helps in the elimination of the outliers (samples with low dense region of the feature space). The use of vigilance parameter steers a tradeoff between plasticity and stability dilemma during the learning process. This is accomplished by selecting the best parameter grid search scenario in association with the cross validation procedure. This ensures some of the desired properties while training the systems during online operational mode such as computational complexity, robustness, preparametrizing of the number of clusters.It also overcomes the problem of cluster projection concept. The adopted algorithm calculates the distance from a new data point to the surface instead of centers as in conventional vector quantization. An evaluation is done on the test data of weather forecasting. A comparative study of the performance analysis for both the conventional and incremental version of vector quantization is also presented in this paper.},
  bdsk-url-1      = {http://dx.doi.org/10.1049/ic.2012.0144},
  bytitledomenico = {doubt},
  doi             = {10.1049/ic.2012.0144},
  keywords        = {computational complexity;fuzzy reasoning;geophysics computing;learning (artificial intelligence);weather forecasting;FLEXFIS;vigilance parameter;vector quantization;flexible fuzzy inference system;Takagi Sugeno fuzzy model;single pass incremental learning approach;stability dilemma;plasticity dilemma;best parameter grid search scenario;cross validation procedure;online operational mode;computational complexity;weather forecasting;Vigilance parameter;FLEXFIS;Takagi Sugeno Fuzzy Model;stability plasticity dilemma;vector quantization},
}

@Article{ISI:000368296000010,
  author          = {Aguado, Juan-Miguel and Martinez, Inmaculada J and Canete-Sanz, Laura},
  title           = {{Evolutionary trends of digital content in mobile applications}},
  journal         = {PROFESIONAL DE LA INFORMACION},
  year            = {2015},
  volume          = {24},
  number          = {6},
  pages           = {787--795},
  issn            = {1386-6710},
  abstract        = {In recent years, mobile applications have come to constitute an
ecosystem of their own, becoming an important driver for innovation. The
consolidation of mobile applications as the prevalent interface for
content access has consequences for the production, distribution and
consumption of content, merging the functional spheres of digital
content: performance, creation, management and communication. This paper
proposes a functional typology of mobile content applications, along
with an evolutionary analysis model. It analyses the functional
evolution of 153 versions of 12 relevant applications developed during
two years (March 2013 through March 2015). Though statistical
representativeness is limited, the sample analysis allowed validation of
the model. The results point to intervention capacity and communication
capacity over content as important value-added drivers in mobile content
applications, although not in homogeneous terms for all the kinds of
mobile applications analysed.},
  bdsk-url-1      = {http://dx.doi.org/10.3145/epi.2015.nov.10},
  bytitledomenico = {no},
  doi             = {10.3145/epi.2015.nov.10},
}

@Article{ZHANG20163,
  author          = {Zhang, Bingxue and Yin, Chuantao and David, Bertrand and Xiong, Zhang and Niu, Wei},
  title           = {{Facilitating professionals' work-based learning with context-aware mobile system}},
  journal         = {Science of Computer Programming},
  year            = {2016},
  volume          = {129},
  pages           = {3--19},
  issn            = {0167-6423},
  abstract        = {Work-based learning refers to the learning process occurring at workplace as acquiring knowledge and skills or developing approaches to solve problems. It is a crucial approach to promote professionals' working efficiency. However, the majority of research on professional learning concentrates on holding trainings (off-the-job or on-the-job), seminars and workshops, or on implementing systems for distributing training materials or facilitating communication. Few effort has been paid to support work-based learning which has the characteristics like informal, spontaneous, work-related and just-in-time. The purpose of our work is to facilitate professionals' work-based learning with a context-aware mobile system. This system can guide professionals to engage in work-based learning activities, which are arranged properly based on our online survey results. It can also provide learning supports which are adapted to current engaged work, professionals' learning needs, personal characteristics, environmental situations, etc. In this paper, we present successively the work-based learning activity design, the system structure design, the system technical implementation, the system functionalities and evaluation of learning achievement, and the user attitude and acceptance about this system. With the proposed system, professionals can use their mobile devices to get personalized, adaptive and just-in-time learning supports in real working environment.},
  annote          = {Special issue on eLearning Software Architectures},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167642316000459},
  bdsk-url-2      = {https://doi.org/10.1016/j.scico.2016.01.008},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.scico.2016.01.008},
  keywords        = {Context-aware, Evaluation of user attitude and acceptance, Mobile learning, System design and implementation,Work-based learning},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167642316000459},
}

@Article{QIAN2015101,
  author          = {Qian, Jian-ping and Yang, Xin-ting and Wu, Xiao-ming and Xing, Bin and Wu, Bao-guo and Li, Ming},
  title           = {{Farm and environment information bidirectional acquisition system with individual tree identification using smartphones for orchard precision management}},
  journal         = {Computers and Electronics in Agriculture},
  year            = {2015},
  volume          = {116},
  pages           = {101--108},
  issn            = {0168-1699},
  abstract        = {An orchard precision management system plays an important role in improvement at the management level and the enhancement of decision abilities. A single orchard tree or an orchard tree microcommunity is the basic management unit, and bidirectional information on the environment and plants is the important content for precision management. A type of RFID label was applied with a UHF chip in the core and a QR code in the surface for single tree identification. A bidirectional acquisition system for orchard production, which included farming information collection for the forward direction and environmental information acquisition for the backward direction, was designed with smart phones. In the farming information collection part, information collection flow that included QR code image acquisition, image preprocessing, barcode decoding and farming information collection was established. An improved local threshold method was adopted to improve the QR code identification rate in the smart phone platform. In the environment information acquisition part, a sensor search rule on the single tree position and a multi-point environment value model were designed. The orchard information bidirectional acquisition system was developed on an Android platform with the Java language, which has the function of QR decoding, farm record information collection, environment information acquisition, data uploading and statistical analysis. The system was tested in an apple orchard. A total of 144 trees were chosen to decode the QR codes in the tree label. The success rate was approximately 96.52{\%}. The identification time of 85{\%} of the trees was less than 4s for the 20 chosen trees. In taking the temperature, for example, the difference between the computed temperature value and the measured temperature value around each tree was small. The system could decrease the cost of the professional equipment, such as portable RFID readers and writers, which was a low-cost and high-efficiency solution for orchard production information collection.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S016816991500160X},
  bdsk-url-2      = {https://doi.org/10.1016/j.compag.2015.06.003},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.compag.2015.06.003},
  keywords        = {Orchard precision management, QR decoding, RFID, Smart phone, Tree identification,Information acquisition},
  url             = {http://www.sciencedirect.com/science/article/pii/S016816991500160X},
}

@Article{ISI:000318242100025,
  author          = {Denker, R and Muhtaroglu, A},
  title           = {{Feasibility analysis and proof of concept for thermoelectric energy harvesting in mobile computers}},
  journal         = {JOURNAL OF RENEWABLE AND SUSTAINABLE ENERGY},
  year            = {2013},
  volume          = {5},
  number          = {2},
  month           = {mar},
  issn            = {1941-7012},
  abstract        = {Thermoelectric (TE) energy harvesting in compact microelectronic systems
necessitates detailed upfront analysis to ensure unacceptable
performance degradation is avoided. TE integration into a notebook
computer is empirically investigated in this work for energy harvesting.
A detailed finite element model was constructed first for thermal
simulations. The model outputs were then correlated with the thermal
validation results of the selected system. In parallel, a commercial TE
micro-module was empirically characterized to quantify maximum power
generation opportunity from the combined system and component data set.
Next, suitable ``warm spots{\{}''{\}} were identified within the mobile
computer model to extract TE power with minimum or no notable impact to
system performance, as measured by simulated thermal changes in the
system. The prediction was validated by integrating a TE micro-module to
the mobile system under test. Measured TE power generation density in
the vicinity of the heat pipe was 1.26 mW/cm(3) using high CPU load. The
generated power scales down with lower CPU activity, and will scale up
in proportion to the utilized opportunistic space within the system. The
technical feasibility of TE energy harvesting in mobile computers has
hence been experimentally proven for the first time. (C) 2013 American
Institute of Physics. {\{}[{\}}http://dx.doi.org/10.1063/1.4794751]},
  bdsk-url-1      = {http://dx.doi.org/10.1063/1.4794751},
  bytitledomenico = {no},
  doi             = {10.1063/1.4794751},
}

@Article{ATHILINGAM2016156,
  author          = {Athilingam, Ponrathi and Labrador, Miguel A and Remo, Elizabeth Frances J and Mack, Laureen and Juan, Alyanna Bianca San and Elliott, Amanda F},
  title           = {{Features and usability assessment of a patient-centered mobile application (HeartMapp) for self-management of heart failure}},
  journal         = {Applied Nursing Research},
  year            = {2016},
  volume          = {32},
  pages           = {156--163},
  issn            = {0897-1897},
  abstract        = {Background
Mobile health technologies have emerged as a way to actively engage patients in their healthcare decision-making process. One who is well informed and motivated is thought to engage in self-management activities. Thus, the conceptual framework included ``information, motivation, and behavioral change'' model, with patient engagement as a mediator in the development and assessment of a mobile health application ``HeartMapp'' for chronic heart failure (CHF) self-management.
Purpose
To describe the development and features of the HeartMapp and preliminary assessment of the usability of HeartMapp.
Method
A descriptive survey design was employed. A total of 37 participants (25 patients with CHF and 12 health care workers) navigated the HeartMapp and completed self-confidence and usability questionnaires.
Results
More than half of the patients used mobile phones to obtain health information. Patients reported moderate self-confidence (mean 26.60$\pm$12.18) in using HeartMapp. One in five patients reported a lack of confidence in using the chest-worn Bluetooth device. The observational data indicated that all patients completed the task of navigating the HeartMapp with little or no help. The health care members (n=12) demonstrated high confidence in recommending HeartMapp to patients (mean 4.58$\pm$0.67) and in utilizing data from HeartMapp for clinical decision making (mean 4.50$\pm$0.67). The self-confidence and usability questionnaires showed good reliability in this sample.
Conclusion
Having access to CHF symptom monitoring and education readily available in a mobile app may motivate individuals to engage in the prescribed self-management skills to ultimately attain desired outcomes, which warrants further exploration.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0897189716300520},
  bdsk-url-2      = {https://doi.org/10.1016/j.apnr.2016.07.001},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.apnr.2016.07.001},
  keywords        = {HeartMapp usability, IMB model, Mobile application, Patient engagement, Self-management,Heart failure},
  url             = {http://www.sciencedirect.com/science/article/pii/S0897189716300520},
}

@Article{ISI:000393581000050,
  author          = {Shan, Zhiyong and Azim, Tanzirul and Neamtiu, Iulian},
  title           = {{Finding Resume and Restart Errors in Android Applications}},
  journal         = {ACM SIGPLAN NOTICES},
  year            = {2016},
  volume          = {51},
  number          = {10},
  pages           = {864--880},
  issn            = {0362-1340},
  abstract        = {Smartphone apps create and handle a large variety of ``instance{\{}''{\}} data
that has to persist across runs, such as the current navigation route,
workout results, antivirus settings, or game state. Due to the nature of
the smartphone platform, an app can be paused, sent into background, or
killed at any time. If the instance data is not saved and restored
between runs, in addition to data loss, partially-saved or corrupted
data can crash the app upon resume or restart. While smartphone
platforms offer API support for data-saving and data-retrieving
operations, the use of this API is ad-hoc: left to the programmer,
rather than enforced by the compiler. We have observed that several
categories of bugs-including data loss, failure to resume/restart or
resuming/restarting in the wrong state-are due to incorrect handling of
instance data and are easily triggered by just pressing the `Home' or
`Back' buttons. To help address this problem, we have constructed a tool
chain for Android (the KREfinder static analysis and the KREreproducer
input generator) that helps find and reproduce such incorrect handling.
We have evaluated our approach by running the static analysis on 324
apps, of which 49 were further analyzed manually. Results indicate that
our approach is (i) effective, as it has discovered 49 bugs, including
in popular Android apps, and (ii) efficient, completing on average in 61
seconds per app. More generally, our approach helps determine whether an
app saves too much or too little state.},
  annote          = {ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), Amsterdam, NETHERLANDS, NOV 02-04, 2016},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2983990.2984011},
  bytitledomenico = {doubt},
  doi             = {10.1145/2983990.2984011},
  institution     = {Assoc Comp Machinery; ACM SIGPLAN},
}

@Article{MOSCHETTA2010128,
  author          = {Moschetta, Eduardo and Antunes, Rodolfo S and Barcellos, Marinho P},
  title           = {{Flexible and secure service discovery in ubiquitous computing}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2010},
  volume          = {33},
  number          = {2},
  pages           = {128--140},
  issn            = {1084-8045},
  abstract        = {The realization of ubiquitous computing requires achieving seamless service provisioning for users and devices everywhere. However, potentially uneven conditions imposed (by heterogeneous, overlapping environments) and a high degree of user autonomy pose long-term challenges for mobile application design and implementation. In this context, service discovery protocols can be used as a building block to foster peer collaboration, allowing user-provided services to be found and used. Promoting user collaboration, in turn, raises issues regarding security and privacy. Interacting peers (i.e. users) may belong to multiple domains, and authentication cannot always rely on an infrastructure provided by an administrative domain. Thus, user privacy, security, and collaboration may be regarded as conflicting goals. This paper presents a flexible protocol for service discovery in ubiquitous systems whose peer-to-peer design enables the dynamic choice among the levels of collaboration, security and privacy desired by participants. The proposed approach is based on decentralized mechanisms that harness well-known trust management principles to control the exposure of service information. The resulting protocol is called Flexible and Secure Service Discovery (FSSD). An evaluation with a simple prototype was conducted to support our claims of flexibility (e.g. allowing run-time decisions). Results demonstrate that the proposed approach can reflect well the balance among the conflicting goals of security, privacy and user collaboration.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804509001349},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2009.11.001},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jnca.2009.11.001},
  keywords        = {Network security, Peer-to-peer, Service discovery,Ubiquitous computing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804509001349},
}

@InProceedings{7272677,
  author          = {Nakajima, S},
  title           = {{Formal Analysis of Android Application Behavior with Real-Time Maude}},
  booktitle       = {2015 IEEE 3rd International Conference on Cyber-Physical Systems, Networks, and Applications},
  year            = {2015},
  pages           = {7--12},
  abstract        = {Model-based analysis is a method to study energy consumption issues at early stages of development. While hardware components are direct consumers of a battery, application programs to request these components are responsible for the total consumption. Since the behavior of these multi-thread programs is concurrent and asynchronous, the analysis on the energy consumption behavior is complicated. This paper uses Real-Time Maude for analyzing energy consumption of a whole system behavior consisting of hardware components and application programs as well as the framework. Example scenarios on detecting energy bugs demonstrate that the time-bounded analysis method using Real-Time Maude is effective.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CPSNA.2015.11},
  bytitledomenico = {doubt},
  doi             = {10.1109/CPSNA.2015.11},
  keywords        = {formal specification;formal verification;mobile computing;multi-threading;program debugging;rewriting systems;smart phones;formal analysis;Android application behavior;real-time Maude;model-based analysis;multithread program;energy consumption;energy bug detection;time-bounded analysis;mobile computing;IEEE 802.11 Standard;Principal component analysis;Real-time systems;Androids;Humanoid robots;Energy consumption;Automata;Activity Lifecycle;Energy Consumption;Hybrid Automaton;Reachability Analysis},
}

@Article{ISI:000398352000002,
  author          = {Betarte, Gustavo and Campo, Juan and Luna, Carlos and Romano, Agustin},
  title           = {{Formal Analysis of Android's Permission-Based Security Model}},
  journal         = {SCIENTIFIC ANNALS OF COMPUTER SCIENCE},
  year            = {2016},
  volume          = {26},
  number          = {1},
  pages           = {27--68},
  issn            = {1843-8121},
  abstract        = {In this work we present a comprehensive formal specification of an
idealized formulation of Android's permission model. Permissions in
Android are basically tags that developers declare in their
applications, more precisely in the so-called application manifest, to
gain access to sensitive resources. Several analyses have recently been
carried out concerning the security of the Android system. Few of them,
however, pay attention to the formal aspects of the permission enforcing
framework. We provide a complete and uniform formulation of several
security properties using the higher order logic of the Calculus of
Inductive Constructions and sketch the proofs that have been developed
and verified using the Coq proof assistant. We also analyze how the
changes introduced in the latest version of Android, that allows to
manage permissions at runtime, impact the presented model.},
  bdsk-url-1      = {http://dx.doi.org/10.7561/SACS.2016.1.27},
  bytitledomenico = {doubt},
  doi             = {10.7561/SACS.2016.1.27},
}

@Article{Borgert201420,
  author          = {Borgert, S and M{\"{u}}hlh{\"{a}}user, M},
  title           = {{Formal based correctness check for ePASS-IoS 1.1 process models with integrated user support for error correcting}},
  journal         = {Lecture Notes in Business Information Processing},
  year            = {2014},
  volume          = {170 LNBIP},
  pages           = {20--40},
  abstract        = {To ensure the correctness of business process models, automatic and manual methods are applied. Since the manual checks are time consuming and expensive, the automatic methods should be as effective as possible. An established verification check is the check for the interaction soundness, i.e. the process model can be executed without deadlocks. Normally, these approaches compile the graph based models to expressions of a formal language which is passed on to a model checking tool for verification. The drawback with this methods is that the results are hard to use for analyzing the causes of errors. In this paper, we present an integrated approach that is able to find important error patterns, and supports the user in correcting errors while still having a high performance. {\textcopyright} Springer International Publishing Switzerland 2014.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-06065-1},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-06065-1},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904577442{\&}doi=10.1007{\%}2F978-3-319-06065-1{\&}partnerID=40{\&}md5=68c2204bfd77199ed3f7f148298da114},
}

@InProceedings{1357251,
  author          = {Chen, Taolue and Han, Tingting and Lu, Jian},
  title           = {{Framework of performance evaluation for mobile process based on mobile ambient}},
  booktitle       = {The Fourth International Conference onComputer and Information Technology, 2004. CIT '04.},
  year            = {2004},
  pages           = {540--545},
  abstract        = {Formal methodology for distributed and concurrent system, especially computation system with mobility, is increasingly important both in the theory and the practice. Based on the calculus of mobile ambient (MA), a widely studied formal mechanism for mobile computation, this paper focuses on the quantitative analysis of mobile computation system and provides a framework of performance evaluation for it. In details, this paper introduces an enhanced labelled transition system as the system model, and assigns rate to each label through so-called cost function. Based on it, the labelled transition system can be mapped to continuous time Markov chains and thus performance evaluation can be carried out by standard numerical techniques and tools. In some sense the main work of this paper can be regarded as integrating behavior and performance analysis in a compositional formal framework, which provides some basis of unified formal methodology for the development of mobile system.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CIT.2004.1357251},
  bytitledomenico = {doubt},
  doi             = {10.1109/CIT.2004.1357251},
  keywords        = {mobile computing;calculus of communicating systems;performance evaluation;formal verification;performance evaluation;mobile process;formal method;distributed system;concurrent system;computation system;mobile ambient calculus;mobile computation;cost function;labelled transition system;continuous time Markov chains;mobile system;software quantity;process algebra;Performance analysis;Mobile computing;Distributed computing;Calculus;Cost function;Laboratories;Concurrent computing;Software performance;Algebra;Computer science},
}

@Conference{Kim2012539,
  author          = {Kim, H K},
  title           = {{Frameworks for validation of mobile software project performance}},
  booktitle       = {Lecture Notes in Engineering and Computer Science},
  year            = {2012},
  volume          = {1},
  pages           = {539--544},
  abstract        = {Prediction of various attributes like cycle time, cost, effort, resource requirements, safety and reliability are of paramount importance to project managers. Advance knowledge of such attributes at intermediate stages during the project development not only provides the manager with the knowledge about the status of the project but also negative indicators warn of possible risks so that preventive measures could be initiated to minimize their impacts. Effective estimation of attributes such as the above not only requires a solid technical basis, but also knowledge of various parameters specific to the organization. However, in a realistic situation, much of the information about past projects which should help in the estimation of project parameters is unknown or uncertain. Mobile software organizations are in need of methods to understand, structure, and improve the data they are collection. In this paper, we present model-based performance prediction at mobile software development time in order to optimize a project of organization and strengthen control of it. {\textcopyright} 2012 Newswood Limited. All rights reserved.},
  annote          = {cited By 1},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928723441%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=784a8b8728ffa0527e9fe14678ca8144},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928723441{\&}partnerID=40{\&}md5=784a8b8728ffa0527e9fe14678ca8144},
}

@Article{KUMAR2017124,
  author          = {Kumar, Satish and Mehrotra, Seema},
  title           = {{Free mobile apps on depression for Indian users: A brief overview and critique}},
  journal         = {Asian Journal of Psychiatry},
  year            = {2017},
  volume          = {28},
  pages           = {124--130},
  issn            = {1876-2018},
  abstract        = {The present study aimed at identifying the nature of mobile apps available to Indian android phone users who might search for free apps to help them deal with depression. The specific objectives were to examine the available interactive self-care apps in terms of guidance provided to users to make decisions regarding use of app, inclusion of elements that encourage professional help-seeking, guidance regarding managing psychological crisis and the range of therapeutic strategies incorporated. Using the search term `depression', 278 apps were identified in the first step and these spanned a wide range of categories. Information on coping with depression and stand alone screening tools formed the two largest types of free apps. Features of interactive self-care apps (N = 33) were reviewed further and this exercise showed that less than 10{\%} of the apps incorporated explicit delineation of their scope or initial screening for suitability. Guidance regarding managing suicidal crisis were incorporated in only about 12{\%} of the interactive apps. Slightly more than one third of these apps included content aimed at encouraging professional help seeking when needed or an explicit mention of their theoretical or empirical basis. Monitoring moods, thoughts and behaviors were the commonest therapeutic strategies incorporated in these apps, in addition, to a wide range of other strategies such as behavioral activation, identifying and correcting cognitive errors, mindfulness exercises, cultivation of gratitude, and medication management. The challenges for a potential user of these apps are discussed and ways to address the same are highlighted.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1876201816306013},
  bdsk-url-2      = {https://doi.org/10.1016/j.ajp.2017.03.031},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.ajp.2017.03.031},
  keywords        = {Android applications, Mobile apps, Self-care, Self-help, mHealth,Depression},
  url             = {http://www.sciencedirect.com/science/article/pii/S1876201816306013},
}

@Article{Bollini2016369,
  author          = {Bollini, L and Cicchin{\`{e}}, G},
  title           = {{From bicycle to bites: Indoor vs. outdoor user testing methodologies of georeferenced mobile apps}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2016},
  volume          = {9788},
  pages           = {369--382},
  abstract        = {The paper is aimed to explore and discuss the way we evaluate, asses and test with users mobile applications---which main interaction modality is GPS and geo-referenced data---both in-lab and en plein air. The research intends to asses user experience evaluating methodologies to have better insight to understand how to design and plan spatial interactions among people, mobile devices, the physical environment and the digital space of geo-located information. The study adopts user test task-based methodologies coming from the user-centered design qualitative methods comparing infield research and usability lab conditions. The paper proposes experimental evidences coming from the indoor experiences---where geo-localization is simulated, but other research parameters are in control---with outdoor situation---where geo-localization is the real driver of interactions, but many variables interferes with some parameters and measurement observation---to understand experimental variables and bias to prevent them in the design process, using the field of cycling as a case study. {\textcopyright} Springer International Publishing Switzerland 2016.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-42111-7_29},
  bytitledomenico = {no},
  doi             = {10.1007/978-3-319-42111-7_29},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978264787{\&}doi=10.1007{\%}2F978-3-319-42111-7{\_}29{\&}partnerID=40{\&}md5=09396db519334af582eecfb3c387a6e6},
}

@Article{Zhang2017338,
  author          = {Zhang, M and Yang, L and Zhang, J},
  title           = {{FuzzerAPP:The Robustness Test of Application Component Communication in Android}},
  journal         = {Jisuanji Yanjiu yu Fazhan/Computer Research and Development},
  year            = {2017},
  volume          = {54},
  number          = {2},
  pages           = {338--347},
  abstract        = {The study of Android security has attracted wide attention because of the huge share in operation system market for mobile devices. Aiming at the security issues of Android application, this paper presents a robustness test scheme of application components based on fuzzy testing method. Firstly, a test set and the corresponding test cases are designed. These cases are sent to a target application for collecting and analyzing the test data. Considering the time, efficiency and other factors, the test case is sent to the application components to be tested. Then, the interaction information of the target component in the test process and the statistical analysis of the output data are analyzed. According to the design of test scheme, a platform named as FuzzerAPP is implemented which can test the robustness of the common applications in Android system. Many applications in some famous Android application markets are tested under FuzzerAPP, and the experiments results are collected. By the analysis of the test data, we find that if FuzzerAPP sends a particular Intent to the target application, it will make the application crash or even lead to the cascading breakdown of system services. Besides, there is a test module exposure problem in many applications of the test set, which can cause serious security problems such as privacy leaks and DoS (denial of service attacks). Finally, on contrast of other similar plans in component supporting, test performance, test objectives and Intent construction categories, the results show the effectiveness of the test method and the practicability of the test platform. {\textcopyright} 2017, Science Press. All right reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.7544/issn1000-1239.2017.20150993},
  bytitledomenico = {yes},
  doi             = {10.7544/issn1000-1239.2017.20150993},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019858379{\&}doi=10.7544{\%}2Fissn1000-1239.2017.20150993{\&}partnerID=40{\&}md5=76d36137c8797257e3cda3bb47d852b1},
}

@Article{Otero2006275,
  author          = {Otero, A and F{\'{e}}lix, P and Regueiro, C and Rodr{\'{i}}guez, M and Barro, S},
  title           = {{Fuzzy constraint satisfaction approach for landmark recognition in mobile robotics}},
  journal         = {AI Communications},
  year            = {2006},
  volume          = {19},
  number          = {3},
  pages           = {275--289},
  abstract        = {This work deals with landmark recognition in mobile robotics, using a new model based on Constraint Satisfaction Problems (CSP): the Multivariable Fuzzy Temporal Profile model (MFTP). A representation supported by CSPs makes it possible to capture a morphological description of the patterns that landmarks give rise to on sensor readings. Its representation, based on Fuzzy Set Theory, allows the imprecision and uncertainty that are characteristic of the problem to be handled. The work places special emphasis on those aspects that are resolved by means of this approach: the ability to model semantically rich landmarks, the simplicity of its description, and the high computational efficiency of the proposed detection algorithms. Finally, a validation of the model in the detection of various landmarks over ultrasound (US) sensors is presented. In spite of these sensors being highly noisy and imprecise, the MFTP model successfully detects 95{\%} of the landmarks on the reference wall. {\textcopyright} 2006 - IOS Press and the authors. All rights reserved.},
  annote          = {cited By 2},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-33748478390%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=08e393c7ba5e66ca5231f59102d1072c},
  bytitledomenico = {no},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-33748478390{\&}partnerID=40{\&}md5=08e393c7ba5e66ca5231f59102d1072c},
}

@Conference{Schnepf20181,
  author          = {Schnepf, N and Badonnel, R and Lahmadi, A and Merz, S},
  title           = {{Generation of SDN policies for protecting android environments based on automata learning}},
  booktitle       = {IEEE/IFIP Network Operations and Management Symposium: Cognitive Management in a Cyber World, NOMS 2018},
  year            = {2018},
  pages           = {1--7},
  abstract        = {Software-defined networking offers new opportu-nities for protecting end users and their applications. In that context, dedicated chains can be built to combine different security functions, such as firewalls, intrusion detection systems and services for preventing data leakage. To configure these security chains, it is important to have an adequate model of the patterns that end user applications exhibit when accessing the network. We propose an automated strategy for learning the networking behavior of end applications using algorithms for generating finite state models. These models can be exploited for inferring SDN policies ensuring that applications respect the observed behavior: such policies can be formally verified and deployed on SDN infrastructures in a dynamic and flexible manner. Our solution is prototypically implemented as a collection of Python scripts that extend our Synaptic verification package. The performance of our strategy is evaluated through extensive experimentations and is compared to the Synoptic and Invarimint automata learning algorithms. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/NOMS.2018.8406153},
  bytitledomenico = {doubt},
  doi             = {10.1109/NOMS.2018.8406153},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050679510{\&}doi=10.1109{\%}2FNOMS.2018.8406153{\&}partnerID=40{\&}md5=aec1daafb997ecb6f49e1d51f5264ce4},
}

@InProceedings{Keng:2016:GDT:2896921.2896930,
  author          = {Keng, Joseph Chan Joo and Jiang, Lingxiao and Wee, Tan Kiat and Balan, Rajesh Krishna},
  title           = {{Graph-aided Directed Testing of Android Applications for Checking Runtime Privacy Behaviours}},
  booktitle       = {Proceedings of the 11th International Workshop on Automation of Software Test},
  year            = {2016},
  series          = {AST '16},
  pages           = {57--63},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {While automated testing of mobile applications is very useful for checking run-time behaviours and specifications, its capability in discovering issues in apps is often limited in practice due to long testing time. A common practice is to randomly and exhaustively explore the whole app test space, which takes a lot of time and resource to achieve good coverage and reach targeted parts of the apps.

In this paper, we present MAMBA, a directed testing system for checking privacy in Android apps. MAMBA performs path searches of user events in control-flow graphs of callbacks generated from static analysis of app bytecode. Based on the paths found, it builds test cases comprised of user events that can trigger the executions of the apps and quickly direct the apps' activity transitions from the starting activity towards target activities of interest, revealing potential accesses to privacy-sensitive data in the apps.

MAMBA's backend testing engine then simulates the executions of the apps following the generated test cases to check actual run-time behavior of the apps that may leak users' private data. We evaluated MAMBA against another automated testing approach that exhaustively searches for target activities in 24 apps, and found that our graph-aided directed testing achieves the same coverage of target activities 6.1 times faster on average, including the time required for bytecode analysis and test case generation. By instrumenting privacy access/leak detectors during testing, we were able to verify from test logs that almost half of target activities accessed user privacy data, and 26.7% of target activities leaked privacy data to the network.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2896921.2896930},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2896921.2896930},
  bytitledomenico = {yes},
  doi             = {10.1145/2896921.2896930},
  isbn            = {978-1-4503-4151-6},
  keywords        = {mobile privacy,automated mobile application testing},
  url             = {http://doi.acm.org/10.1145/2896921.2896930},
}

@InProceedings{Huang:2017:GLB:3061639.3062254,
  author          = {Huang, Chau-Chin and Lin, Bo-Qiao and Lee, Hsin-Ying and Chang, Yao-Wen and Wu, Kuo-Sheng and Yang, Jun-Zhi},
  title           = {{Graph-Based Logic Bit Slicing for Datapath-Aware Placement}},
  booktitle       = {Proceedings of the 54th Annual Design Automation Conference 2017},
  year            = {2017},
  series          = {DAC '17},
  pages           = {71:1----71:6},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Extracting similar datapath bit slices which handle highly parallel bit operations can help a modern placer to obtain better solutions for datapath-oriented designs. A current state-of-the-art datapath bit slicing method achieves the best extraction results using a network-flow-based algorithm. However, this work has two major drawbacks: (1) it extracts only a limited number of bit slices for datapaths with different I/O widths, which are commonly seen in real designs, and (2) it does not consider bit-slice similarity, which is an important feature for placement considering datapaths. To remedy these drawbacks, we present (1) a balanced bipartite edge-cover algorithm to fully slice a datapath with different I/O widths, and (2) a simulated annealing scheme to further improve bit-slice similarity, while maintaining fully-sliced structures. Compared with the state-of-the-art work, experimental results show that our slicing algorithm extracts more bit slices with similar structures, and helps a leading academic placer achieve averagely 5% smaller routed wirelength. The results also validate the high correlation between datapaths and structure regularity/similarity.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3061639.3062254},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3061639.3062254},
  bytitledomenico = {no},
  doi             = {10.1145/3061639.3062254},
  isbn            = {978-1-4503-4927-7},
  keywords        = {Digital Design, Physical Design, Placement,Datapath},
  url             = {http://doi.acm.org/10.1145/3061639.3062254},
}

@Article{KUPERMAN2018160,
  author          = {Kuperman, Greg and Sun, Jun and Cheng, Bow-Nan and Deutsch, Patricia and Narula-Tam, Aradhana},
  title           = {{Group centric networking: A new approach for wireless multi-hop networking}},
  journal         = {Ad Hoc Networks},
  year            = {2018},
  volume          = {79},
  pages           = {160--172},
  issn            = {1570-8705},
  abstract        = {In this paper, we introduce a new networking architecture called Group Centric Networking (GCN), which is designed to support the large number of devices expected with the emergence of the Internet of Things. GCN is designed to enable these devices to operate collaboratively in a highly efficient and resilient fashion, while not sacrificing their ability to communicate with one another. We do a full protocol implementation of GCN in NS3, and compare GCN against different MANET routing approaches in both simulation and on a 90 node Android mobile phone testbed. We show that GCN utilizes up to an order of magnitude fewer network resources than traditional wireless networking schemes, while providing superior connectivity and reliability. The GCN source code is open-source and publicly available.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S157087051830221X},
  bdsk-url-2      = {https://doi.org/10.1016/j.adhoc.2018.05.007},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.adhoc.2018.05.007},
  keywords        = {Wireless multi-hop networking,Mobile ad hoc networking},
  url             = {http://www.sciencedirect.com/science/article/pii/S157087051830221X},
}

@Conference{Su2017245,
  author          = {Su, T and Meng, G and Chen, Y and Wu, K and Yang, W and Yao, Y and Pu, G and Liu, Y and Su, Z},
  title           = {{Guided, stochastic model-based GUI testing of android apps}},
  booktitle       = {Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering},
  year            = {2017},
  volume          = {Part F130154},
  pages           = {245--256},
  abstract        = {Mobile apps are ubiquitous, operate in complex environments and are developed under the time-to-market pressure. Ensuring their correctness and reliability thus becomes an important challenge. This paper introduces Stoat, a novel guided approach to perform stochastic model-based testing on Android apps. Stoat operates in two phases: (1) Given an app as input, it uses dynamic analysis enhanced by a weighted UI exploration strategy and static analysis to reverse engineer a stochastic model of the app's GUI interactions; and (2) it adapts Gibbs sampling to iteratively mutate/refine the stochastic model and guides test generation from the mutated models toward achieving high code and model coverage and exhibiting diverse sequences. During testing, system-level events are randomly injected to further enhance the testing effectiveness. Stoat was evaluated on 93 open-source apps. The results show (1) the models produced by Stoat cover 17{\~{}}31{\%} more code than those by existing modeling tools; (2) Stoat detects 3X more unique crashes than two state-of-the-art testing tools, Monkey and Sapienz. Furthermore, Stoat tested 1661 most popular Google Play apps, and detected 2110 previously unknown and unique crashes. So far, 43 developers have responded that they are investigating our reports. 20 of reported crashes have been confirmed, and 8 already fixed. {\textcopyright} 2017 Association for Computing Machinery.},
  annote          = {cited By 17},
  bdsk-url-1      = {http://dx.doi.org/10.1145/3106237.3106298},
  bytitledomenico = {doubt},
  doi             = {10.1145/3106237.3106298},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030779618{\&}doi=10.1145{\%}2F3106237.3106298{\&}partnerID=40{\&}md5=7a2d6a5ba182d3171507844c88219a61},
}

@Article{UMANETS2014407,
  author          = {Umanets, Artem and Ferreira, Artur and Leite, Nuno},
  title           = {{GuideMe -- A Tourist Guide with a Recommender System and Social Interaction}},
  journal         = {Procedia Technology},
  year            = {2014},
  volume          = {17},
  pages           = {407--414},
  issn            = {2212-0173},
  abstract        = {In the past few years, with the proliferation of mobile devices people are experiencing frequent communication and information exchange. For instance, in the context of tourist visits, it is often the case that each person carries out a smartphone, to get information about touristic places. When one visits some location, a tourist guide application will recommend useful information, according to its current location, preferences, and past visits. Afterwards, the tourist guide allows for the user to provide feedback about each visit. In this paper, we address the development and the key features of a tourist guide, named GuideMe. Its mobile and Web applications provide consultation, publication, and recommendation of touristic locations. Each user may consult places of touristic interest, receive suggestions of previously unseen touristic places according to other users recommendations, and to perform its own recommendations. The recommendations are carried out using the well-known Mahout library. As compared to previous recommender based tourist guides, the key novelties of GuideMe are its integration with social networks and the unique set of options offered in the application. The usability and load tests performed to evaluate the service, including its recommendation engine, have shown both the adequacy of the designed interfaces as well as good response times.},
  annote          = {Conference on Electronics, Telecommunications and Computers -- CETC 2013.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2212017314004848},
  bdsk-url-2      = {https://doi.org/10.1016/j.protcy.2014.10.248},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.protcy.2014.10.248},
  keywords        = {Mobile Application, REST, Recommender System, Web Application, iOS, iPad, iPhone,Tourist Guide},
  url             = {http://www.sciencedirect.com/science/article/pii/S2212017314004848},
}

@Article{Zhu20183353,
  author          = {Zhu, H.-J. and Jiang, T.-H. and Ma, B and You, Z.-H. and Shi, W.-L. and Cheng, L},
  title           = {{HEMD: a highly efficient random forest-based malware detection framework for Android}},
  journal         = {Neural Computing and Applications},
  year            = {2018},
  volume          = {30},
  number          = {11},
  pages           = {3353--3361},
  abstract        = {Mobile phones are rapidly becoming the most widespread and popular form of communication; thus, they are also the most important attack target of malware. The amount of malware in mobile phones is increasing exponentially and poses a serious security threat. Google's Android is the most popular smart phone platforms in the world and the mechanisms of permission declaration access control cannot identify the malware. In this paper, we proposed an ensemble machine learning system for the detection of malware on Android devices. More specifically, four groups of features including permissions, monitoring system events, sensitive API and permission rate are extracted to characterize each Android application (app). Then an ensemble random forest classifier is learned to detect whether an app is potentially malicious or not. The performance of our proposed method is evaluated on the actual data set using tenfold cross-validation. The experimental results demonstrate that the proposed method can achieve a highly accuracy of 89.91{\%}. For further assessing the performance of our method, we compared it with the state-of-the-art support vector machine classifier. Comparison results demonstrate that the proposed method is extremely promising and could provide a cost-effective alternative for Android malware detection. {\textcopyright} 2017, The Natural Computing Applications Forum.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s00521-017-2914-y},
  bytitledomenico = {yes},
  doi             = {10.1007/s00521-017-2914-y},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014789938{\&}doi=10.1007{\%}2Fs00521-017-2914-y{\&}partnerID=40{\&}md5=e53a9fbb193d31cfdb0a555baa60de39},
}

@Article{RODAS199721,
  author          = {Rodas, G I L and Moras, Gerard and Estruch, Assumpta and Ventura, Josep Lluis},
  title           = {{Heredabilidad de Laflexibilidad: un Estudio Hecho con Hermanos Gemelos}},
  journal         = {Apunts. Medicina de l'Esport},
  year            = {1997},
  volume          = {33},
  number          = {128},
  pages           = {21--27},
  issn            = {1886-6581},
  abstract        = {Abstract
Flexibility (FL) defined as the scope of movement of one or several joints is a factor of sport performance, which is determinad by age, gender, training, anthropomorphic characteristics and genetic factors, of which very little has been studied. METHOD: To establish the relative importance of genetic and environmental infiuence on flexibility, we have studied the genetic component, using the Hereditability Index (Hl al a valu{\'{e}} of 1.0 indicates that 100{\%} of the variation would be due to genetic variation) in 24 sportsmen spiit ihto 12 pairs of twin brothers (6 monozygoies and 6 dizygotes), who did not have any significant perinatal or environmental differences. Zygosity was determined by genetic analysis of the leukocyte human antigen system (LHA), especially the Class I and II loci, and other genetic variants. To calc{\'{u}}late the FL, the subjects underwent an indirect flexometric test for the trigonometric calculation of the angie of aperture of the scapuiohumeral (FL, SHA) and coxofemoral joints (FL, CFA), the I atter broken down into the horizontal and sagittal fields, for active and forced passive movements and for both legs. RESULTS: We do not find significant differences in the age and anthropomorphic measurements between the two groups (MZ and DZ). The Hls which were statistically significant for F6,6, s (DZ MZ-1) over 4.2 and P{\textless}0.05, are the FL, CFA in the transversal pla{\~{n}}e for open I egs and active (0.82) and forced passive (0.77) movement, and in the sagittal pla{\~{n}}e for the right leg in active movement (0.78). CONCLUSI{\'{O}}N: We conclude that the genetic infiuence of flexibility is substantial, especially of the coxofemoral joint (75{\%}) and mainly of the right leg, and our study corroborates the previous results yielded by family studies, at least for the target public of our research.
Antecedentes
: La flexibilidad (FL) definida como el rango de amplitud de movimiento de una o varias articulaciones es un factor del rendimiento deportivo que viene determinado por la edad, el sexo, el entrenamiento, por caracter{\'{i}}sticas antropom{\'{e}}tricas y por fectores gen{\'{e}}ticos de los que se ha estudiado muy poco. M{\'{E}}TODO: Para averiguar la importancia relativa de la influencia gen{\'{e}}tica y ambiental en la flexibilidad, hemos estudiado el componente gen{\'{e}}tico utilizando el {\'{i}}ndice de heredabilidad (IH = un valor de 1.0 indica que el 100{\%} de la variaci{\'{o}}n ser{\'{i}}a debida a variaci{\'{o}}n gen{\'{e}}tica) en 24 sujetos varones y deportistas divididos en 12 parejas de hermanos gemelos -6 monocigotos y 6 dicigotos- que no presentaban diferencias perinatales ni ambientales significativas. La cigosidad se determin{\'{o}} mediante el an{\'{a}}lisis gen{\'{e}}tico del sistema antig{\'{e}}nico humano leucocitario (HLA), espec{\'{i}}ficamente los locus de la clase I y II, y otras variantes gen{\'{e}}ticas. Para el c{\'{a}}lculo de la FL los sujetos realizaron un test flexom{\'{e}}trico indirecto para el c{\'{a}}lculo trigonom{\'{e}}trico del {\'{a}}ngulo de abertura de las articulaciones escapuiohumeral (FL, AEH) y coxofemoral (FL, ACF), esta {\'{u}}ltima desglosada en el campo horizontal y sagital para movimientos activos y pasivos forzados y para ambas piernas. RESULTADOS: No encontramos diferencias significativas en la edad y las medidas antropom{\'{e}}tricas entre ios dos grupos (MZ y DZ). Los IH que fueron estad{\'{i}}sticamente significativos para F6,6, (DZ-MZ-1) superior a 4, 2 y P{\textless}0.05 son el FL, ACF en el plano transversal para piernas abiertas y movimiento activo (0.82) y pasivo forzado (0.77) y en el plano sagital para la pierna derecha en movimiento activo (0.78). CONCLUSIONES: Nosotros concluimos que la influencia gen{\'{e}}tica de la flexibilidad es sustancial, sobre todo de la articulaci{\'{o}}n coxofemoral (75{\%}) y preferentemente de la pierna derecha, y que al menos para la poblaci{\'{o}}n que hemos estudiado nuestro estudio corrobora los resultados anteriores hechos con estudios familiares.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1886658197758997},
  bdsk-url-2      = {https://doi.org/10.1016/S1886-6581(97)75899-7},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1886-6581(97)75899-7},
  keywords        = {Flexibilidad, Flexibility, Heriditability, Hermanos Gemelos, Twin Brothers,Heredabilidad},
  url             = {http://www.sciencedirect.com/science/article/pii/S1886658197758997},
}

@Article{FOSTER201893,
  author          = {Foster, Marva},
  title           = {{HF app to support self-care among community dwelling adults with HF: A feasibility study}},
  journal         = {Applied Nursing Research},
  year            = {2018},
  volume          = {44},
  pages           = {93--96},
  issn            = {0897-1897},
  abstract        = {Background
The prevalence of Heart Failure (HF) is expected to increase by 46{\%} from 2012 to 2030, which will result in over 8 million adults with HF. The development and testing of interventions that can support HF self-care behaviors is critical.
Aim
Determine the: 1) feasibility of using the HF App in middle to older adult community dwelling patients with HF; and 2) acceptability of using the HF App mobile health application.
Methods
A convenience sample of community dwelling HF participants daily used the HF App to enter physiologic data, answer questions about symptoms, reviewed HF education within the application and received reminders over a two-week period. Feasibility and acceptability measures were assessed using data extracted from the principal investigator's qualitative diary. In addition, two acceptability questionnaires were utilized.
Results
All participants enrolled (N = 10) completed the two-week period. Participant mean age was 64.5 years. The mean scores on the acceptability of the HF App 19 (SD 2.87) indicated increased perceived benefit of using the app while the mean scores of acceptability of the education offered in the app 12.4 (SD 2.84) indicated that participants positively benefited from viewing the education. Qualitative results indicated that participants were more aware of their symptoms and the need to self-monitor.
Conclusions
This feasibility study points to the incorporation of mobile applications to support self-care as promising research that can be useful to aid middle to older individuals in performing effective HF self-care but further studies with a larger randomized sample is needed.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0897189718305779},
  bdsk-url-2      = {https://doi.org/10.1016/j.apnr.2018.10.007},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.apnr.2018.10.007},
  keywords        = {Adult, Heart failure, Technology,Self-care},
  url             = {http://www.sciencedirect.com/science/article/pii/S0897189718305779},
}

@Article{CABALLEROGIL2013996,
  author          = {Caballero-Gil, Pino and Caballero-Gil, C{\'{a}}ndido and Molina-Gil, Jezabel},
  title           = {{How to build vehicular ad-hoc networks on smartphones}},
  journal         = {Journal of Systems Architecture},
  year            = {2013},
  volume          = {59},
  number          = {10, Part B},
  pages           = {996--1004},
  issn            = {1383-7621},
  abstract        = {Vehicular ad-hoc networks have been defined in the literature as communications networks that allow disseminating information among vehicles to help to reduce traffic accidents and congestions. The practical deployment of such networks has been delayed mainly due to economic and technical issues. This paper describes a new software application to detect traffic incidents and exchange information about them, using only smartphones, without any central authority or additional equipment. Both road safety and communication security have been taken into account in the application design. On the one hand, the interface has been designed to avoid distractions while driving because it operates automatically and independently of the driver, through voice prompts. On the other hand, communication security, which is essential in critical wireless networks, is provided through the protection of attributes such as authenticity, privacy, integrity and non-repudiation. All this is achieved without increasing the price of vehicles and without requiring the integration of new devices neither in vehicles nor on roads. The only prerequisite is to have a smartphone equipped with Wi-Fi connectivity and GPS location in each vehicle. The proposed application has been successfully validated both in large-scale NS-2 simulations and in small-scale real tests to detect traffic congestions and empty parking spaces.},
  annote          = {Advanced Smart Vehicular Communication System and Applications},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1383762113001744},
  bdsk-url-2      = {https://doi.org/10.1016/j.sysarc.2013.08.015},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.sysarc.2013.08.015},
  keywords        = {Mobile application, Parking space, Self-organization, Traffic congestion,Vehicular ad-hoc network},
  url             = {http://www.sciencedirect.com/science/article/pii/S1383762113001744},
}

@Conference{Hossain2017109,
  author          = {Hossain, M and Noor, S and Hasan, R},
  title           = {{HSC-IoT: A Hardware and Software Co-Verification Based Authentication Scheme for Internet of Things}},
  booktitle       = {Proceedings - 5th IEEE International Conference on Mobile Cloud Computing, Services, and Engineering, MobileCloud 2017},
  year            = {2017},
  pages           = {109--116},
  abstract        = {The Internet of Things (IoT) have become popular in diverse domains because of their accessibility and mobility as well as cost-efficient manufacturing, deployment, and maintenance process. The widespread deployment of IoT devices makes them an attractive target for an attacker trying to gain unauthorized access to an IoT-based system. An adversary clones a real hardware device or compromises embedded software to impersonate a legitimate device, and thus gains unauthorized access to sensitive information and performs security-critical operations. The existing security schemes for the mobile systems cannot be applied directly to an IoT-enabled infrastructure since devices are resource constrained regarding storage, processing power, and communication bandwidth. Additionally, the current security approaches for the IoT systems are unable to identify physically compromised IoT devices. In this paper, we propose HSC-IoT, a resource-efficient Physical Unclonable Function (PUF)-based security protocol that ensures both software and hardware integrity of IoT devices. HSC-IoT also provides a lightweight mutual authentication scheme for the resource-limited devices based on Elliptic Curve Cryptography. We present a detailed analysis of the security strength of HSC-IoT. We implemented a prototype of HSC-IoT on IoT devices powered by Contiki OS and provided an extensive comparative analysis of HSC-IoT with contemporary IoT security protocols. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/MobileCloud.2017.35},
  bytitledomenico = {no},
  doi             = {10.1109/MobileCloud.2017.35},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85022064567{\&}doi=10.1109{\%}2FMobileCloud.2017.35{\&}partnerID=40{\&}md5=bbe39b20ae10c127e89920920b0cabfa},
}

@Article{Jiao2015541,
  author          = {Jiao, H and Li, X and Zhang, L and Xu, G and Feng, Z},
  title           = {{Hybrid detection using permission analysis for android malware}},
  journal         = {Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST},
  year            = {2015},
  volume          = {152},
  pages           = {541--545},
  abstract        = {The growth of malicious applications poses a great threat to the Android platform. In order to detect Android malware, this paper proposes a hybrid detection method based on permission. Firstly, applications are detected according to their permissions so that benign and malicious applications can be discriminated. Secondly, suspicious applications are run in order to collect the function calls related to sensitive permissions. Then suspicious applications are represented in a vector space model and their feature vectors are calculated by TF-IDF algorithm. Finally, the detection of suspicious applications is completed via security detection techniques adopting Euclidean distance and cosine similarity. At the end of this paper, an experiment including 982 samples is used as an empirical validation. The result shows that our method has a true positive rate at 91.2{\%} and a false positive rate at 2.1{\%}. {\textcopyright} Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2015.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-23829-6_40},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-23829-6_40},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948140405{\&}doi=10.1007{\%}2F978-3-319-23829-6{\_}40{\&}partnerID=40{\&}md5=294e21ab48d18118d171bd5e01921688},
}

@Article{LIN2013340,
  author          = {Lin, Ying-Dar and Lai, Yuan-Cheng and Chen, Chien-Hung and Tsai, Hao-Chuan},
  title           = {{Identifying android malicious repackaged applications by thread-grained system call sequences}},
  journal         = {Computers {\&} Security},
  year            = {2013},
  volume          = {39},
  pages           = {340--350},
  issn            = {0167-4048},
  abstract        = {Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97{\%} detection accuracy, i.e., 143 correct detections among 149 applications.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404813001272},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2013.08.010},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2013.08.010},
  keywords        = {Android, Dynamic analysis, Longest common substring, System call,Malicious repackaged applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404813001272},
}

@Article{ZDZIARSKI20143,
  author          = {Zdziarski, Jonathan},
  title           = {{Identifying back doors, attack points, and surveillance mechanisms in iOS devices}},
  journal         = {Digital Investigation},
  year            = {2014},
  volume          = {11},
  number          = {1},
  pages           = {3--19},
  issn            = {1742-2876},
  abstract        = {The iOS operating system has long been a subject of interest among the forensics and law enforcement communities. With a large base of interest among consumers, it has become the target of many hackers and criminals alike, with many celebrity thefts (For example, the recent article ``How did Scarlett Johansson's phone get hacked?'') of data raising awareness to personal privacy. Recent revelations (Privacy scandal: NSA can spy on smart phone data, 2013, How the NSA spies on smartphones including the BlackBerry) exposed the use (or abuse) of operating system features in the surveillance of targeted individuals by the National Security Agency (NSA), of whom some subjects appear to be American citizens. This paper identifies the most probable techniques that were used, based on the descriptions provided by the media, and today's possible techniques that could be exploited in the future, based on what may be back doors, bypass switches, general weaknesses, or surveillance mechanisms intended for enterprise use in current release versions of iOS. More importantly, I will identify several services and mechanisms that can be abused by a government agency or malicious party to extract intelligence on a subject, including services that may in fact be back doors introduced by the manufacturer. A number of techniques will also be examined in order to harden the operating system against attempted espionage, including counter-forensics techniques.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287614000036},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2014.01.001},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.diin.2014.01.001},
  keywords        = {Back doors, Exploitation, Malware, Security, Spyware, Surveillance, iOS,Forensics},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287614000036},
}

@Article{ISI:000396659800003,
  author          = {Malhotra, Ruchika and Bansal, Ankita},
  title           = {{Identifying threshold values of an open source software using Receiver Operating Characteristics curve (ROC)}},
  journal         = {JOURNAL OF INFORMATION {\&} OPTIMIZATION SCIENCES},
  year            = {2017},
  volume          = {38},
  number          = {1},
  pages           = {39--69},
  issn            = {0252-2667},
  abstract        = {Software metrics are widely used to predict the classes in a software
that are comparatively more change prone than others. Developers
construct various prediction models which are used for the prediction of
change prone classes. Thus, focussed attention can be laid on such
classes leading to saving of lots of resources in terms of money,
manpower and cost. But construction and usage of the prediction models
using metrics is not always efficient and practical for developers.
Thus, the alternative approach can be to identify certain alarming
values of metrics above which a class is said to be at high risk. These
alarming values are known as thresholds of the metrics. The main focus
of this study is to identify metric threshold values using receiver
operating characteristic curves. We have used threshold values to
identify change prone classes (or classes that may lead to some risk in
future) so that developers can carefully examine and pay attention on
those classes. The study has used five releases of an open source,
widely used operating system, Android. To predict change prone classes
in any release of software, the threshold values of its immediate
predecessor release are used. For example, to predict change prone
classes in Android 4.0, the threshold values of Android 2.3 are used. In
addition to this, the threshold methodology based on receiver operating
characteristics curve is compared with the traditional statistical
methodology based on logistic regression. We conclude that researchers
may use the methodology based on receiver operating characteristics
curve to calculate the thresholds.},
  bdsk-url-1      = {http://dx.doi.org/10.1080/02522667.2015.1135592},
  bytitledomenico = {no},
  doi             = {10.1080/02522667.2015.1135592},
}

@Article{Ashfaq20171007,
  author          = {Ashfaq, R A R and Wang, X.-Z.},
  title           = {{Impact of fuzziness categorization on divide and conquer strategy for instance selection}},
  journal         = {Journal of Intelligent and Fuzzy Systems},
  year            = {2017},
  volume          = {33},
  number          = {2},
  pages           = {1007--1018},
  abstract        = {Fuzziness based divide and conquer (D{\&}C) is a recently proposed strategy for promoting the classifiers (i.e., fuzzy classifiers) performance, where the amount of fuzziness quantity associated with each data point (i.e., both labeled and unlabeled) is considered as an important avenue to the empire for instance selection problem. This technique is regarded as a semi-supervised learning (SSL) technique, where different categories of instances are obtained by using fuzziness measure, and then the instances having less amount of fuzziness are incorporated into training set for improving the generalization ability of a classifier. This study proposes some effective methods and presents a novel algorithm for categorizing the instances into three groups that can effectively integrate with D{\&}C strategy. It is observed by the experimental validation that considering the splitting criteria for instances categorization can lead the classifier to perform better on withheld set. Results on different classification data sets prove the effectiveness of proposed algorithm. {\textcopyright} 2017 - IOS Press and the authors. All rights reserved.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.3233/JIFS-162297},
  bytitledomenico = {no},
  doi             = {10.3233/JIFS-162297},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025695065{\&}doi=10.3233{\%}2FJIFS-162297{\&}partnerID=40{\&}md5=dd47a72b0dbd164b4f4cd085a866a2af},
}

@InProceedings{6992229,
  author          = {Kelong, Zhu and Yubo, Song and Fei, Chen},
  title           = {{Implementation of automated testing system for android applications based on dynamic taint propagation}},
  booktitle       = {2014 Communications Security Conference (CSC 2014)},
  year            = {2014},
  pages           = {1--5},
  abstract        = {As the increasing downloads of applications via Android Platform, more and more malicious codes were injected in those applications. And some problems are caused by that malicious code such as economic loss and privacy issues. Android has the highest market share of smartphone operating system, the security of Android platform is extremely important. Therefore, the security testing and evaluation of applications is imperative. Dynamic taint propagation is the most common method to do the test, but there are two problems: a) If the custom ROM runs in the smartphone, the running speed of ROM will be limited to the smartphone's battery life and computing power. b) If the program was running in emulator in PC, the efficiency will be very poor because of the manual operation for the triggering action during the running time. The paper presents an automated testing method which was accomplished in emulator. In addition, the system will record the tree structure of Activity and control distribution of each Activity. The test results showed that the system can trigger all the controls and compared with manual test, this method was proven to be more effective and completely.},
  bdsk-url-1      = {http://dx.doi.org/10.1049/cp.2014.0736},
  bytitledomenico = {doubt},
  doi             = {10.1049/cp.2014.0736},
  keywords        = {Android (operating system);automatic test software;data privacy;program testing;security of data;automated testing system;dynamic taint propagation;Android platform security;malicious codes;economic loss;smart phone operating system;security testing;ROM;smartphone battery life;emulator;PC;activity tree structure;activity control distribution;Android Platform;applications;dynamic taint propagation;automated testing;emulator},
}

@Article{YANG201992,
  author          = {Yang, Li and Zhi, Yifang and Wei, Teng and Yu, Shui and Ma, Jianfeng},
  title           = {{Inference attack in Android Activity based on program fingerprint}},
  journal         = {Journal of Network and Computer Applications},
  year            = {2019},
  volume          = {127},
  pages           = {92--106},
  issn            = {1084-8045},
  abstract        = {Private breach has always been an important threat to mobile security. Recent studies show that an attacker can infer users' private information through side channels, such as the use of runtime memory and network usage. For side-channel attacks, malicious applications generally run parallel in the background with a foreground application and stealthily collect side-channel information. In this paper, we analyze the relationship between memory changes and Activity transition, then use side-channel information to label an Activity and build an Activity signature database. We show how to use the runtime memory exposure to infer the Activity transition of the current application and use other side channels to infer its Activity interface. We demonstrate the effectiveness of the attacks with 5 popular applications that contain user sensitive information, and successfully inferred most of the Activity transition and Activity interface process. Moreover, we propose a protection scheme which can effectively resist side-channel attacks.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1084804518303898},
  bdsk-url-2      = {https://doi.org/10.1016/j.jnca.2018.12.007},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jnca.2018.12.007},
  keywords        = {Activity inference, Program fingerprint, Protection, Side-channel attack,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S1084804518303898},
}

@InProceedings{Cai:2016:IDL:2857705.2857719,
  author          = {Cai, Zhenquan and Yap, Roland H C},
  title           = {{Inferring the Detection Logic and Evaluating the Effectiveness of Android Anti-Virus Apps}},
  booktitle       = {Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy},
  year            = {2016},
  series          = {CODASPY '16},
  pages           = {172--182},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Malware on Android has been reported to be on the rise. There are many anti-virus (AV) apps available on Android. However, most AVs are presented as black-boxes without details given about their workings. In this paper, we propose to determine the key elements used by the AVs, which we call inferring the AV detection logic, through a black-box testing methodology. We perform a large scale experiment on 57 Android AVs using 2000 malware variants to evaluate whether the detection logic can be found and whether the AVs can detect the malware. Our experiments show that a majority of AVs detect malware using simple static features. Such features can be easily obfuscated by renaming or encrypting strings and data, which can make it easy to evade some AVs. We also observe trends showing that AVs use common features to detect malware across all families.



},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2857705.2857719},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2857705.2857719},
  bytitledomenico = {no},
  doi             = {10.1145/2857705.2857719},
  isbn            = {978-1-4503-3935-3},
  keywords        = {anti-virus, malware,android},
  url             = {http://doi.acm.org/10.1145/2857705.2857719},
}

@Article{DEYPIR201820,
  author          = {Deypir, Mahmood and Horri, Abbas},
  title           = {{Instance based security risk value estimation for Android applications}},
  journal         = {Journal of Information Security and Applications},
  year            = {2018},
  volume          = {40},
  pages           = {20--30},
  issn            = {2214-2126},
  abstract        = {Android has emerged as the widest-used operating system for smartphones and mobile devices. Security of this platform mainly relies on applications (apps) installed by the device owner since permissions and sandboxing have reduced the attack surface. Android antivirus programs detect known malware based on their signature, but they cannot detect zero-day viruses. Therefore, estimating security risk could be helpful for comparing and selecting apps that are more likely to be malicious or benign based on the estimated risk values. Therefore, systematic assistance for making appropriate decisions can significantly improve the security of Android-based devices. Additionally, Android markets can leverage estimated risks to recognize suspicious apps for further analysis. In this study, a new metric is introduced for effective risk estimation of untrusted apps. While previously proposed risk measurements are based on features such as permissions and function calls, our devised metric benefits from previously known malicious and non-malicious app instances. The metric uses previously identified malware and normal app samples to compute the security risk of untrusted apps. Thus, previously known samples are represented in the feature space, and for each untrusted input app, the risk is estimated using distances to malicious and non-malicious app instances. Moreover, to increase the metric's detection rate, an instance and feature weighting schema is suggested. Empirical evaluations on various datasets show that the proposed instance-based metric has higher detection rates and is more effective than a previously proposed feature based on risk score measurements.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2214212616300941},
  bdsk-url-2      = {https://doi.org/10.1016/j.jisa.2018.02.002},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jisa.2018.02.002},
  keywords        = {Decision making, Instance based risk metric, Malwares,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S2214212616300941},
}

@Conference{Salva2013355,
  author          = {Salva, S and Zafimiharisoa, S R and Lauren{\c{c}}ot, P},
  title           = {{Intent security testing: An approach to testing the intent-based vulnerability of android components}},
  booktitle       = {ICETE 2013 - 10th International Joint Conference on E-Business and Telecommunications; SECRYPT 2013 - 10th International Conference on Security and Cryptography, Proceedings},
  year            = {2013},
  pages           = {355--362},
  abstract        = {The intent mechanism is a powerful feature of the Android platform that helps compose existing components together to build a Mobile application. However, hackers can leverage the intent messaging to extract personal data or to call components without credentials by sending malicious intents to components. This paper tackles this issue by proposing a security testing method which aims at detecting whether the components of an Android application are vulnerable to malicious intents. Our method takes Android projects and intent-based vulnerabilities formally represented with models called vulnerability patterns. The originality of our approach resides in the generation of partial specifications from configuration files and component codes to generate test cases. A tool, called APSET, is presented and evaluated with experimentations on some Android applications. Copyright {\textcopyright} 2013 SCITEPRESS.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887752022%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=f5fec53831b10cd846e07beb2d30c33e},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887752022{\&}partnerID=40{\&}md5=f5fec53831b10cd846e07beb2d30c33e},
}

@Article{WANG2016531,
  author          = {Wang, Tien and Duong, Trong Danh and Chen, Charlie C},
  title           = {{Intention to disclose personal information via mobile applications: A privacy calculus perspective}},
  journal         = {International Journal of Information Management},
  year            = {2016},
  volume          = {36},
  number          = {4},
  pages           = {531--542},
  issn            = {0268-4012},
  abstract        = {This study aimed to investigate the issue of consumer intention to disclose personal information via mobile applications (apps). Drawing on the literature of privacy calculus theory, this research examined the factors that influence the trade-off decision of receiving perceived benefits and being penalized with perceived risks through the calculus lens. In particular, two paths of the direct effects on perceived benefits and risks that induce the ultimate intention to disclose personal information via mobile apps were proposed and empirically tested. The analysis showed that self-presentation and personalized services positively influence consumers' perceived benefits, which in turn positively affects the intention to disclose personal information. Perceived severity and perceived control serve as the direct antecedents of perceived risks that negatively affect the intention of consumers to disclose personal information. Compared with the perceived risks, the perceived benefits more strongly influence the intention to disclose personal information. This study extends the literature on privacy concerns to consumer intention to disclose personal information by theoretically developing and empirically testing four hypotheses in a research model. Results were validated in the mobile context, and implications and discussions were presented.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0268401215300797},
  bdsk-url-2      = {https://doi.org/10.1016/j.ijinfomgt.2016.03.003},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.ijinfomgt.2016.03.003},
  keywords        = {Information privacy, Intention to disclose, Mobile applications, Privacy concerns,Privacy calculus},
  url             = {http://www.sciencedirect.com/science/article/pii/S0268401215300797},
}

@InProceedings{Canny:2018:IST:3220134.3220146,
  author          = {Canny, Alexandre},
  title           = {{Interactive System Testing: Beyond GUI Testing}},
  booktitle       = {Proceedings of the ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
  year            = {2018},
  series          = {EICS '18},
  pages           = {18:1----18:5},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The increasing variety of Input/Output devices and functionalities in interactive systems raises concerns regarding the way they are tested. Indeed, while most of the existing testing techniques are suitable for interactive systems supporting WIMP interactions, only few of them support, partially, the testing of highly interactive systems (e.g. smart speakers or smartwatches). We claim that techniques and tools that provides support for the testing of highly interactive systems must take into account the entire architecture of interactive systems. This includes the variety of I/O devices and their drivers, permissions at the operating system level, applications running on the system, etc. In this doctoral consortium paper, we present an ongoing PhD in which we propose to define an approach and tools to support the testing of all the elements of the architecture of highly interactive systems.



},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3220134.3220146},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3220134.3220146},
  bytitledomenico = {no},
  doi             = {10.1145/3220134.3220146},
  isbn            = {978-1-4503-5897-2},
  keywords        = {Interactive System Testing, Model-Based Testing, Software Testing,GUI Testing},
  url             = {http://doi.acm.org/10.1145/3220134.3220146},
}

@Article{Fang2015378,
  author          = {Fang, Z and Liu, Q and Zhang, Y and Wang, K and Wang, Z},
  title           = {{IVDroid: Static detection for input validation vulnerability in Android inter-component communication}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2015},
  volume          = {9065},
  pages           = {378--392},
  abstract        = {Input validation vulnerability in Android inter-component communication is a kind of severe vulnerabilities in Android apps. Malicious attacks can exploit the vulnerability to bypass Android security mechanism and compromise the integrity, confidentiality and availability of Android devices. However, so far there is not a sound approach at source code level designed for app developers to detect such vulnerabilities. In this paper we propose a novel approach aiming at detecting input validation flaws in Android apps and implement a prototype named IVDroid, which provides practical static analysis of Java source code. IVDroid leverages backward program slicing to abstract application logic from Java source code. On slice level, IVDroid detects flaws of known pattern by security rule matching and detects flaws of unknown pattern by duplicate validation behavior mining. Then IVDroid semi-automatically confirms the suspicious rule violations and report the confirmed ones as vulnerabilities. We evaluate IVDroid on 3 versions of Android spanning from version 2.2 to 4.4.2 and it detects 37 vulnerabilities including confused deputy and denial of service attack. Our results prove that IVDroid can provide a practical defence solution for app developers. {\textcopyright} Springer International Publishing Switzerland 2015.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-17533-1_26},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-17533-1_26},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942532162{\&}doi=10.1007{\%}2F978-3-319-17533-1{\_}26{\&}partnerID=40{\&}md5=1c3ba5eef42ddeff5cd683abb56f7e9d},
}

@InProceedings{Cruz:2017:LIE:3104086.3104127,
  author          = {Cruz, Luis and Abreu, Rui and Rouvignac, Jean-No{\"{e}}l},
  title           = {{Leafactor: Improving Energy Efficiency of Android Apps via Automatic Refactoring}},
  booktitle       = {Proceedings of the 4th International Conference on Mobile Software Engineering and Systems},
  year            = {2017},
  series          = {MOBILESoft '17},
  pages           = {205--206},
  address         = {Piscataway, NJ, USA},
  publisher       = {IEEE Press},
  abstract        = {Leafactor is a tool to automatically improve the energy consumption of Android apps. It does so by refactoring the source code to follow a set of patterns known to be energy efficient. The toolset was validated using 222 refactorings in 140 open-source apps. Changes were submitted to the original apps by creating pull requests to the official projects.
},
  bdsk-url-1      = {https://doi.org/10.1109/MOBILESoft.2017.21},
  bdsk-url-2      = {http://dx.doi.org/10.1109/MOBILESoft.2017.21},
  bytitledomenico = {no},
  doi             = {10.1109/MOBILESoft.2017.21},
  isbn            = {978-1-5386-2669-6},
  keywords        = {mobile computing, refactoring,green computing},
  url             = {https://doi.org/10.1109/MOBILESoft.2017.21},
}

@Conference{Yang2016,
  author          = {Yang, C.-Z. and Luo, Y.-F. and Chien, Y.-J. and Wen, H.-L.},
  title           = {{Learning to prioritize GUI test cases for android laboratory programs}},
  booktitle       = {ACM International Conference Proceeding Series},
  year            = {2016},
  volume          = {13-15-July-2016},
  abstract        = {Software GUI testing for laboratory programs is a cumbersome and time-consuming task. In the past studies, a systematic approach for the efficiency issue of testing the laboratory work has not been discussed. In this paper, we propose a learning framework based on the RankBoost learning-to-rank approach to facilitate the verification task by learning to prioritize GUI test cases. In the experiments, we collected Android laboratory programs to investigate the effectiveness of the proposed learning framework. The experimental results show that the proposed learning framework can effectively improve the recall performance based on pairwise priority relations. {\textcopyright} 2016 ACM.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2952744.2952755},
  bytitledomenico = {no},
  doi             = {10.1145/2952744.2952755},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84985897981{\&}doi=10.1145{\%}2F2952744.2952755{\&}partnerID=40{\&}md5=a2d1792abdf51fbd871e51efb4fbae05},
}

@Article{NAVARRO2018429,
  author          = {Navarro, Luiz C and Navarro, Alexandre K W and Gr{\'{e}}gio, Andr{\'{e}} and Rocha, Anderson and Dahab, Ricardo},
  title           = {{Leveraging ontologies and machine-learning techniques for malware analysis into Android permissions ecosystems}},
  journal         = {Computers {\&} Security},
  year            = {2018},
  volume          = {78},
  pages           = {429--453},
  issn            = {0167-4048},
  abstract        = {Smartphones form a complex application ecosystem with a myriad of components, properties, and interfaces that produce an intricate relationship network. Given the intrinsic complexity of this system, we hereby propose two main contributions. First, we devise a methodology to systematically determine and analyze the complex relationship network among components, properties, and interfaces associated with the permission mechanism in Android ecosystems. Second, we investigate whether it is possible to identify characteristics shared by malware samples at this high level of abstraction that could be leveraged to unveil their presence. We propose an ontology-based framework to model the relationships between application and system elements, together with a machine-learning approach to analyze the complex network that arises therefrom. We represent the ontological model for the considered Android ecosystem with 4570 apps through a graph with some 55,000 nodes and 120,000 edges. Experiments have shown that a classifier operating on top of this complex representation can achieve an accuracy of 88{\%} and precision of 91{\%} and is capable of identifying and determining 24 features that correspond to 70 important graph nodes related to malware activity, which is a remarkable feat for security.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404818302311},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2018.07.013},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2018.07.013},
  keywords        = {Android permissions, Bags of graphs, Discriminant features, Machine learning, Ontology,Malware},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404818302311},
}

@InProceedings{8035068,
  author          = {Pires, I and Felizardo, V and Pombo, N and Garcia, N M},
  title           = {{Limitations of Energy Expenditure Calculation Based on a Mobile Phone Accelerometer}},
  booktitle       = {2017 International Conference on High Performance Computing Simulation (HPCS)},
  year            = {2017},
  pages           = {124--127},
  abstract        = {Sensors available in a mobile device, e.g., a smartphone, a smartwatch, or others, allow the capture of several signals, that may be used to the estimation of the energy expenditure. This paper describes the adaption of a previous research, using different signals and validated with a golden standard, consisting in the comparison between the units of the data acquired by a tri-axial accelerometer and an electromyography signal and the data collected by a mobile device accelerometer. The validation of the system showed that the energy expenditure may not be as correct as expected. The data related to this research is available in an open repository and the platform is available for testing. The creation of a validated method for the measurement of energy expenditure during physical activities capable for the implementation in a mobile application is an important issue to increase the confidence of the mobile applications in this market area.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/HPCS.2017.29},
  bytitledomenico = {no},
  doi             = {10.1109/HPCS.2017.29},
  keywords        = {accelerometers;electromyography;intelligent sensors;mobile handsets;smart phones;energy expenditure calculation;mobile phone accelerometer;electromyography signal;mobile device accelerometer;validated method;mobile application;triaxial accelerometer;Accelerometers;Mobile handsets;Sensors;Mathematical model;Estimation;Mobile applications;Energy measurement;Physical exercise;energy expenditure;validation;algorithm;mobile platform;accelerometer;physical training;calorie consumption},
}

@Article{ISI:000343508700001,
  author          = {Ham, Hyo-Sik and Kim, Hwan-Hee and Kim, Myung-Sup and Choi, Mi-Jung},
  title           = {{Linear SVM-Based Android Malware Detection for Reliable IoT Services}},
  journal         = {JOURNAL OF APPLIED MATHEMATICS},
  year            = {2014},
  issn            = {1110-757X},
  abstract        = {Current many Internet of Things (IoT) services are monitored and
controlled through smartphone applications. By combining IoT with
smartphones, many convenient IoT services have been provided to users.
However, there are adverse underlying effects in such services including
invasion of privacy and information leakage. In most cases, mobile
devices have become cluttered with important personal user information
as various services and contents are provided through them. Accordingly,
attackers are expanding the scope of their attacks beyond the existing
PC and Internet environment into mobile devices. In this paper, we apply
a linear support vector machine (SVM) to detect Android malware and
compare the malware detection performance of SVM with that of other
machine learning classifiers. Through experimental validation, we show
that the SVM outperforms other machine learning classifiers.},
  bdsk-url-1      = {http://dx.doi.org/10.1155/2014/594501},
  bytitledomenico = {yes},
  doi             = {10.1155/2014/594501},
}

@InProceedings{Chester:2017:MLD:3104086.3104135,
  author          = {Chester, Piper and Jones, Chris and Mkaouer, Mohamed Wiem and Krutz, Daniel E},
  title           = {{M-perm: A Lightweight Detector for Android Permission Gaps}},
  booktitle       = {2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft)},
  year            = {2017},
  series          = {MOBILESoft '17},
  pages           = {217--218},
  address         = {Piscataway, NJ, USA},
  publisher       = {IEEE Press},
  abstract        = {Android apps operate under a permissions-based system where access to specific APIs are restricted through the use of permissions. Unfortunately, there is no built-in verification system to ensure that apps do not request too many or too few permissions, which could lead to serious quality and/or privacy concerns. Apps requesting too many permissions create unnecessary vulnerabilities, leaving the potential for abuse by SDKs within the app or other malicious apps installed on the device. In order to assist with the discovery of misused permissions, we created a new detection tool, M-Perm, which combines static and dynamic analysis in a computationally efficient manner compared to existing tools. M-Perm also identifies permission usage in apps including requested normal, dangerous, and 3rd party permissions. The tool, complete usage instructions, and screencast are available online: http://www.m-perm.com.},
  bdsk-url-1      = {https://doi.org/10.1109/MOBILESoft.2017.23},
  bdsk-url-2      = {http://dx.doi.org/10.1109/MOBILESoft.2017.23},
  bytitledomenico = {no},
  doi             = {10.1109/MOBILESoft.2017.23},
  isbn            = {978-1-5386-2669-6},
  keywords        = {,API access,Android (operating system),Android apps,Android permission gaps,Androids,Google,Humanoid robots,Libraries,M-Perm,Privacy,SDK abuse,Security,Tools,application program interfaces,apps permission usage,authorisation,built-in verification system,data privacy,detection tool,dynamic analysis,lightweight detector,malicious apps,misused permission discovery,mobile computing,permissions-based system where,privacy concerns,program diagnostics,program verification,software engineering,static analysis},
  url             = {https://doi.org/10.1109/MOBILESoft.2017.23},
}

@Article{CHEN2018346,
  author          = {Chen, Zhenxiang and Yan, Qiben and Han, Hongbo and Wang, Shanshan and Peng, Lizhi and Wang, Lin and Yang, Bo},
  title           = {{Machine learning based mobile malware detection using highly imbalanced network traffic}},
  journal         = {Information Sciences},
  year            = {2018},
  volume          = {433-434},
  pages           = {346--364},
  issn            = {0020-0255},
  abstract        = {In recent years, the number and variety of malicious mobile apps have increased drastically, especially on Android platform, which brings insurmountable challenges for malicious app detection. Researchers endeavor to discover the traces of malicious apps using network traffic analysis. In this study, we combine network traffic analysis with machine learning methods to identify malicious network behavior, and eventually to detect malicious apps. However, most network traffic generated by malicious apps is benign, while only a small portion of traffic is malicious, leading to an imbalanced data problem when the traffic model skews towards modeling the benign traffic. To address this problem, we introduce imbalanced classification methods, including the synthetic minority oversampling technique (SMOTE) + support vector machine (SVM), SVM cost-sensitive (SVMCS), and C4.5 cost-sensitive (C4.5CS) methods. However, when the imbalance rate reaches a certain threshold, the performance of common imbalanced classification algorithms degrades significantly. To avoid performance degradation, we propose to use the imbalanced data gravitation-based classification (IDGC) algorithm to classify imbalanced data. Moreover, we develop a simplex imbalanced data gravitation classification (S-IDGC) model to further reduce the time costs of IDGC without sacrificing the classification performance. In addition, we propose a machine learning based comparative benchmark prototype system, which provides users with substantial autonomy, such as multiple choices of the desired classifiers or traffic features. Using this prototype system, users can compare the detection performance of different classification algorithms on the same data set, as well as the performance of a specific classification algorithm on multiple data sets.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0020025517307077},
  bdsk-url-2      = {https://doi.org/10.1016/j.ins.2017.04.044},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.ins.2017.04.044},
  keywords        = {Imbalanced data, Machine learning, Malicious apps, Malware detection,Network traffic},
  url             = {http://www.sciencedirect.com/science/article/pii/S0020025517307077},
}

@Article{REHMAN2018828,
  author          = {Rehman, Zahoor-Ur and Khan, Sidra Nasim and Muhammad, Khan and Lee, Jong Weon and Lv, Zhihan and Baik, Sung Wook and Shah, Peer Azmat and Awan, Khalid and Mehmood, Irfan},
  title           = {{Machine learning-assisted signature and heuristic-based detection of malwares in Android devices}},
  journal         = {Computers {\&} Electrical Engineering},
  year            = {2018},
  volume          = {69},
  pages           = {828--841},
  issn            = {0045-7906},
  abstract        = {Malware detection is an important factor in the security of the smart devices. However, currently utilized signature-based methods cannot provide accurate detection of zero-day attacks and polymorphic viruses. In this context, an efficient hybrid framework is presented for detection of malware in Android Apps. The proposed framework considers both signature and heuristic-based analysis for Android Apps. We have reverse engineered the Android Apps to extract manifest files, and binaries, and employed state-of-the-art machine learning algorithms to efficiently detect malwares. For this purpose, a rigorous set of experiments are performed using various classifiers such as SVM, Decision Tree, W-J48 and KNN. It has been observed that SVM in case of binaries and KNN in case of manifest.xml files are the most suitable options in robustly detecting the malware in Android devices. The proposed framework is tested on benchmark datasets and results show improved accuracy in malware detection.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0045790617320256},
  bdsk-url-2      = {https://doi.org/10.1016/j.compeleceng.2017.11.028},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.compeleceng.2017.11.028},
  keywords        = {Android applications, Heuristic analysis, Hybrid approach, Security,Malware detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S0045790617320256},
}

@Article{KARBAB2018S48,
  author          = {Karbab, ElMouatez Billah and Debbabi, Mourad and Derhab, Abdelouahid and Mouheb, Djedjiga},
  title           = {{MalDozer: Automatic framework for android malware detection using deep learning}},
  journal         = {Digital Investigation},
  year            = {2018},
  volume          = {24},
  pages           = {S48 -- S59},
  issn            = {1742-2876},
  abstract        = {Android OS experiences a blazing popularity since the last few years. This predominant platform has established itself not only in the mobile world but also in the Internet of Things (IoT) devices. This popularity, however, comes at the expense of security, as it has become a tempting target of malicious apps. Hence, there is an increasing need for sophisticated, automatic, and portable malware detection solutions. In this paper, we propose MalDozer, an automatic Android malware detection and family attribution framework that relies on sequences classification using deep learning techniques. Starting from the raw sequence of the app's API method calls, MalDozer automatically extracts and learns the malicious and the benign patterns from the actual samples to detect Android malware. MalDozer can serve as a ubiquitous malware detection system that is not only deployed on servers, but also on mobile and even IoT devices. We evaluate MalDozer on multiple Android malware datasets ranging from 1 K to 33 K malware apps, and 38 K benign apps. The results show that MalDozer can correctly detect malware and attribute them to their actual families with an F1-Score of 96{\%}--99{\%} and a false positive rate of 0.06{\%}--2{\%}, under all tested datasets and settings.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287618300392},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2018.01.007},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.diin.2018.01.007},
  keywords        = {Android, Deep learning, IoT, Malware,Mobile},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287618300392},
}

@Article{DONG201494,
  author          = {DONG, Hang and HE, Neng-qiang and HU, Ge and LI, Qi and ZHANG, Miao},
  title           = {{Malware detection method of android application based on simplification instructions}},
  journal         = {The Journal of China Universities of Posts and Telecommunications},
  year            = {2014},
  volume          = {21},
  pages           = {94--100},
  issn            = {1005-8885},
  abstract        = {The amount of mobile malicious code is increasing faster every year and a serious security threat is posed by this. Hence, malware detection has become a critical topic in the field of computer security. This paper proposes a method to detect variants of known malware families in Android devices using simplify Dalvik instructions. This method is based on the sequence of instructions. A method is described in this paper to give the simplified description of each instruction and group them with n-gram patterns, which are set to be the malicious features. The result of the experiment shows that features extracted by this method are easy to be recognized, thus an effective way to detect variants of known malware families is provided.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1005888514605069},
  bdsk-url-2      = {https://doi.org/10.1016/S1005-8885(14)60506-9},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/S1005-8885(14)60506-9},
  keywords        = {android, malicious code, simplified description,opcode sequences},
  url             = {http://www.sciencedirect.com/science/article/pii/S1005888514605069},
}

@Article{GOODE201012,
  author          = {Goode, Alan},
  title           = {{Managing mobile security: How are we doing?}},
  journal         = {Network Security},
  year            = {2010},
  volume          = {2010},
  number          = {2},
  pages           = {12--15},
  issn            = {1353-4858},
  abstract        = {The latest mobile phones, such as the iPhone and Google's Android-based Nexus One, are changing the way that we do business. Company-confidential information is being both accessed and stored on mobile phones. Some of these phones are owned and managed by the organisations concerned, but increasingly, employees are using their own devices that the IT department knows nothing about. Goode Intelligence provides a snapshot of how businesses are tackling the problems posed by mobile phones, and ascertains if they are ready and equipped to deal with these unique challenges. This comprehensive survey covers most aspects of mobile phone security including policy and standards awareness, mobile applications and security, staffing and management, access and authentication (including use of the mobile phone as an authentication device), virus and malware, spam, data loss prevention (including data encryption), voice encryption (in addition that provided by the network operators), anti-theft (including data wiping) and data backup. The latest generation of mobile phones, such as the iPhone and Google's Android platforms, are having a transformational effect on the way that we access, use and store information. There is no doubt of the business benefit that data-enabled, multi-network (mobile operator and WiFi enabled), always-on mobile devices give us but what are the implications for information security? Does access to company-confidential information on a mobile phone give us cause for alarm and by allowing employees to use their own phones for business are we opening up a compliance can of worms? Who owns the data?},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485810700258},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(10)70025-8},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1353-4858(10)70025-8},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485810700258},
}

@Article{FITZGERALD201314,
  author          = {Fitzgerald, William M and Neville, Ultan and Foley, Simon N},
  title           = {{MASON: Mobile autonomic security for network access controls}},
  journal         = {Journal of Information Security and Applications},
  year            = {2013},
  volume          = {18},
  number          = {1},
  pages           = {14--29},
  issn            = {2214-2126},
  abstract        = {Smartphones are on par with modern desktop environments in terms of operating system and hardware functionality. As a consequence, threats to desktop environments are also applicable to smartphones in addition to traditional threats to mobile phones. End-user management of security configurations that mitigate smartphone threats is complex and error-prone. As a consequence, misconfiguration of a security configuration may unnecessarily expose a smartphone to known threats. In this paper, a threat-based model for smartphone security configuration is presented. To evaluate the approach, a prototype Android security app, MASON, is developed to automatically manage firewall configurations on behalf of the end-user. A case study based on firewall access control demonstrates how automated firewall configuration recommendations can be made based on catalogues of countermeasures. These countermeasures are drawn from best-practice standards such as NIST 800-124, a guideline on cell phone and PDA security and NIST 800-41-rev1, a guideline on firewall security configuration.},
  annote          = {SETOP'2012 and FPS'2012 Special Issue},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2214212613000355},
  bdsk-url-2      = {https://doi.org/10.1016/j.jisa.2013.08.001},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.jisa.2013.08.001},
  keywords        = {Firewalls, Security configuration,Smartphone threats},
  url             = {http://www.sciencedirect.com/science/article/pii/S2214212613000355},
}

@Article{Meng2016274,
  author          = {Meng, X and Spanoudakis, G},
  title           = {{MBotCS: A mobile botnet detection system based on machine learning}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2016},
  volume          = {9572},
  pages           = {274--291},
  abstract        = {As the use of mobile devices spreads dramatically, hackers have started making use of mobile botnets to steal user information or perform other malicious attacks. To address this problem, in this paper we propose a mobile botnet detection system, called MBotCS. MBotCS can detect mobile device traffic indicative of the presence of a mobile botnet based on prior training using machine learning techniques. Our approach has been evaluated using real mobile device traffic captured from Android mobile devices, running normal apps and mobile botnets. In the evaluation, we investigated the use of 5 machine learning classifier algorithms and a group of machine learning box algorithms with different validation schemes. We have also evaluated the effect of our approach with respect to its effect on the overall performance and battery consumption of mobile devices. {\textcopyright} Springer International Publishing Switzerland 2016},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-31811-0_17},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-31811-0_17},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964547495{\&}doi=10.1007{\%}2F978-3-319-31811-0{\_}17{\&}partnerID=40{\&}md5=c9c855346570705b295aabd57c6ff9e5},
}

@Article{RASTOGI20161436,
  author          = {Rastogi, Sajal and Bhushan, Kriti and Gupta, B B},
  title           = {{Measuring Android App Repackaging Prevalence based on the Permissions of App}},
  journal         = {Procedia Technology},
  year            = {2016},
  volume          = {24},
  pages           = {1436--1444},
  issn            = {2212-0173},
  abstract        = {Google Play is the official market of Android apps. The app publishers make money by selling apps, through in-app billing, and through advertisements. The apps, especially the popular ones, are disassembled by adversaries, who then add/replace ads in the apps, and/or add some malicious code to the apps, and then release it to app markets. This is called app repackaging. Any revenue these repacked-apps make on these ads go to the adversaries. Also, if the repackaged apps have malwares then the malwares now spread more swiftly because of the popularity of the apps. In this paper, we present our study on some Android apps released to unofficial markets which were originally released to Google Play to find how prevalent the repackaging of Android apps is. Moreover, we proposed a mechanism for the detection of repackaging based on the permissions of the apps. To evaluate the performance of proposed approach, we downloaded 50 apps, each with well over a hundred million downloads from the official Android market, and tried to find their repackaged versions on unofficial markets based on extra permissions. We found repackaged versions of 6 out of these 50 apps without such a naive approach. This just goes to demonstrate how widely available the repackaged versions of some of the most popular Android apps are. It also proves that, in many cases, it is possible to detect repackaging only by comparing the permissions of an app with its original version. To a wide extent, there is no need of complex code analysis, or adding some authentication entity such as a watermark to the app for deterring repackaging.},
  annote          = {International Conference on Emerging Trends in Engineering, Science and Technology (ICETEST - 2015)},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2212017316302626},
  bdsk-url-2      = {https://doi.org/10.1016/j.protcy.2016.05.172},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.protcy.2016.05.172},
  keywords        = {authentication, malware., mobile device, permissions, repackaging, security,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S2212017316302626},
}

@Article{RICE2010593,
  author          = {Rice, Andrew and Hay, Simon},
  title           = {{Measuring mobile phone energy consumption for 802.11 wireless networking}},
  journal         = {Pervasive and Mobile Computing},
  year            = {2010},
  volume          = {6},
  number          = {6},
  pages           = {593--606},
  issn            = {1574-1192},
  abstract        = {The complexity of modern mobile phones makes it difficult for developers to understand the power consumption of their applications. Our measurement framework produces fine-grained, annotated traces of a phone's power consumption which we are using to develop an understanding of how particular aspects of an application drive energy use. We ran a large number of automated tests using Google Android G1, Magic, Hero and Nexus handsets and present results for the average energy consumption of connection and data transmission over 802.11 wireless networks. Our results show that the optimal choice of data transmission strategy is different between handsets, operating systems, and device context.},
  annote          = {Special Issue PerCom 2010},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1574119210000593},
  bdsk-url-2      = {https://doi.org/10.1016/j.pmcj.2010.07.005},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.pmcj.2010.07.005},
  keywords        = {Mobile communication, Power measurement, Wireless LAN,Energy measurement},
  url             = {http://www.sciencedirect.com/science/article/pii/S1574119210000593},
}

@InProceedings{ISI:000428763700056,
  author          = {Liu, Fang and Wang, Chun and Pico, Andres and Yao, Danfeng and Wang, Gang},
  title           = {{Measuring the Insecurity of Mobile Deep Links of Android}},
  booktitle       = {PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY `17)},
  year            = {2017},
  pages           = {953--969},
  organization    = {USENIX; Facebook; NSF; Baidu; Cisco; Google; Netflix; IBM Res; Visa Res; Yubico},
  abstract        = {Mobile deep links are URIs that point to specific locations within apps,
which are instrumental to web-to-app communications. Existing ``scheme
URLs{\{}''{\}} are known to have hijacking vulnerabilities where one app can
freely register another app's schemes to hijack the communication.
Recently, Android introduced two new methods ``App links{\{}''{\}} and
``Intent URLs{\{}''{\}} which were designed with security features, to replace
scheme URLs. While the new mechanisms are secure in theory, little is
known about how effective they are in practice.
In this paper, we conduct the first empirical measurement on various
mobile deep links across apps and web sites. Our analysis is based on
the deep links extracted from two snapshots of 160,000+ top Android apps
from Google Play (2014 and 2016), and 1 million webpages from Alexa top
domains. We find that the new linking methods (particularly App links)
not only failed to deliver the security benefits as designed, but
significantly worsen the situation. First, App links apply link
verification to prevent hijacking. However, only 194 apps (2.2{\%} out of
8,878 apps with App links) can pass the verification due to incorrect
(or no) implementations. Second, we identify a new vulnerability in App
link's preference setting, which allows a malicious app to intercept
arbitrary HTTPS URLs in the browser without raising any alerts. Third,
we identify more hijacking cases on App links than existing scheme URLs
among both apps and websites. Many of them are targeting popular sites
such as online social networks. Finally, Intent URLs have little impact
in mitigating hijacking risks due to a low adoption rate on the web.},
  annote          = {26th USENIX Security Symposium, Vancouver, CANADA, AUG 16-18, 2017},
  bytitledomenico = {no},
  isbn            = {978-1-931971-40-9},
}

@Article{MOONSAMY2014122,
  author          = {Moonsamy, Veelasha and Rong, Jia and Liu, Shaowu},
  title           = {{Mining permission patterns for contrasting clean and malicious android applications}},
  journal         = {Future Generation Computer Systems},
  year            = {2014},
  volume          = {36},
  pages           = {122--132},
  issn            = {0167-739X},
  abstract        = {An Android application uses a permission system to regulate the access to system resources and users' privacy-relevant information. Existing works have demonstrated several techniques to study the required permissions declared by the developers, but little attention has been paid towards used permissions. Besides, no specific permission combination is identified to be effective for malware detection. To fill these gaps, we have proposed a novel pattern mining algorithm to identify a set of contrast permission patterns that aim to detect the difference between clean and malicious applications. A benchmark malware dataset and a dataset of 1227 clean applications has been collected by us to evaluate the performance of the proposed algorithm. Valuable findings are obtained by analyzing the returned contrast permission patterns.},
  annote          = {Special Section: Intelligent Big Data Processing Special Section: Behavior Data Security Issues in Network Information Propagation Special Section: Energy-efficiency in Large Distributed Computing Architectures Special Section: eScience Infrastructure and Applications},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X13001933},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2013.09.014},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.future.2013.09.014},
  keywords        = {Biclustering, Contrast mining, Data mining, Permission pattern,Android permission},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X13001933},
}

@Article{SHARMA2018416,
  author          = {Sharma, Kavita and Gupta, B B},
  title           = {{Mitigation and risk factor analysis of android applications}},
  journal         = {Computers {\&} Electrical Engineering},
  year            = {2018},
  volume          = {71},
  pages           = {416--430},
  issn            = {0045-7906},
  abstract        = {Today, researchers face numerous challenges when attempting to identify malicious apps in the android market. Android apps require permissions to access the functionality of the mobile device. Moreover, these permissions can be used to know the app's behaviour. In this paper, we present a novel approach (called RNPDroid) for risk mitigation using the analysis of permissions. To evaluate the proposed approach, the M0Droid dataset is used, which consists of 400 Android app samples. All permissions of the obtained samples are analysed through reverse engineering, and total 165 permissions are attained. The computed value of F (517.3) is much higher than the tabulated value of F (2.61) at a 5{\%} level of significance. The analysis of variance (ANOVA) states that one of the risk factors is significantly different from others. Moreover, the t-test is used to show the significant difference between medium and low risk.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0045790618305494},
  bdsk-url-2      = {https://doi.org/10.1016/j.compeleceng.2018.08.003},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.compeleceng.2018.08.003},
  keywords        = {Android app analysis, Data leakage, Malicious app classification, Reverse engineering, Risk analysis,Android permission},
  url             = {http://www.sciencedirect.com/science/article/pii/S0045790618305494},
}

@Article{Armando2014103,
  author          = {Armando, A and Bocci, G and Chiarelli, G and Costa, G and {De Maglie}, G and Mammoliti, R and Merlo, A},
  title           = {{Mobile app security analysis with the MAVeriC static analysis}},
  journal         = {Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications},
  year            = {2014},
  volume          = {5},
  number          = {4},
  pages           = {103--119},
  abstract        = {The success of the mobile application model is mostly due to the ease with which new applications are uploaded by developers, distributed through the application markets (e.g. Google Play), and installed by users. Yet, the very same model is cause of serious security concerns, since users have no or little means to ascertain the trustworthiness of the applications they install on their devices. Such concerns grow up when dealing with professional scenarios like the use of mobile devices within organisations. To protect their customers, Poste Italiane has defined the Mobile Application Verification Cluster (MAVeriC), a process for the systematic security analysis of third-party mobile apps leveraging their online services (e.g. home banking, parcel tracking). MAVeriC is an ongoing project that will be completed in the next few years. At the core of the MAVeriC project lies the Static Analysis Module (SAM), a toolkit that supports automatic static analysis of mobile applications by automating a number of operations including reverse engineering, privilege analysis and automatic verification of security properties. In this paper we present the SAM that has been fully developed and tested. We introduce the functionalities of SAM through a demonstration of the platform applied to real Android applications. {\textcopyright} 2014 Innovative Information Science and Technology Research Group. All rights reserved.},
  annote          = {cited By 5},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920192515%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=d5ccf21836b9eecf61c2e489aef498cd},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920192515{\&}partnerID=40{\&}md5=d5ccf21836b9eecf61c2e489aef498cd},
}

@Conference{Chessa2007634,
  author          = {Chessa, S and {Di Pietro}, R and Ferro, E and Giunta, G and Oligeri, G},
  title           = {{Mobile application security for video streaming authentication and data integrity combining digital signature and watermarking techniques}},
  booktitle       = {IEEE Vehicular Technology Conference},
  year            = {2007},
  pages           = {634--638},
  abstract        = {Satellite link presents peculiar characteristics like no packet reordering and low bit error rate. In this paper we leverage these characteristics combined with watermarking techniques to propose a novel authentication algorithm for multicast video streaming. This algorithm combines a single digital signature with a hash chain pre-computed on the transmitter side; the hash chain is embedded in the video stream by means of a watermarking technique. Our proposal shows several interesting features: Authentication is enforced, as well as integrity of the received multicast stream; received blocks can be authenticated on the fly; no storage is required on the receiver side, except for the amount of memory needed to store a single hash; overhead computations required on the receiver sum up to single hash per block, while a digital signature verification is amortized over the whole received stream. Finally, note that the bandwidth overhead introduced is negligible, since the applied watermarking technique introduces virtually no modifications (at least, not recognizable by humans) on the original video stream pictures. {\textcopyright} 2007 IEEE.},
  annote          = {cited By 7},
  bdsk-url-1      = {http://dx.doi.org/10.1109/VETECS.2007.141},
  bytitledomenico = {no},
  doi             = {10.1109/VETECS.2007.141},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547271142{\&}doi=10.1109{\%}2FVETECS.2007.141{\&}partnerID=40{\&}md5=468e32532ad57e6d7b12c46da8cc4137},
}

@InProceedings{6496451,
  author          = {Kirubakaran, B and Karthikeyani, V},
  title           = {{Mobile application testing --- Challenges and solution approach through automation}},
  booktitle       = {2013 International Conference on Pattern Recognition, Informatics and Mobile Engineering},
  year            = {2013},
  pages           = {79--84},
  month           = {feb},
  abstract        = {By the time this paper has been presented, the mobile app landscape will have changed. New OS versions will have been released. A bunch of new devices will have hit the market. And mobile application testing will have become that much more complex and challenging for all of us. There is no doubt that mobile applications need specific testing approaches. This paper wants to investigate new directions in research on the type of testing and skills required on mobile app testing by answering the following three research questions: (RQ1) How mobile applications testing are so different from traditional web applications, that require specialized testing skills and techniques?, (RQ2) What are the new challenges and future trends in mobile application testing, and (RQ3) How far automation effective in testing mobile application?. We answer those questions by analyzing the current trends in mobile application development and testing, and by proposing my view on the topic.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICPRIME.2013.6496451},
  bytitledomenico = {no},
  doi             = {10.1109/ICPRIME.2013.6496451},
  keywords        = {mobile computing;operating systems (computers);program testing;mobile application testing;mobile application landscape;OS version;operating systems;testing approach;Web application;mobile application development;Testing;Mobile communication;Automation;Performance evaluation;Smart phones;Mobile computing;mobile applications;software testing;automation},
}

@Conference{Borys2018362,
  author          = {Borys, M and Milosz, M},
  title           = {{Mobile application usability testing in quasi-real conditions-the synergy of using different methods}},
  booktitle       = {Proceedings - 2018 11th International Conference on Human System Interaction, HSI 2018},
  year            = {2018},
  pages           = {362--368},
  abstract        = {The article presents the methodology applied and the results of the usability tests of a mobile application for controlling access to rooms using a smartphone. In the studies with the involvement of potential users, the user testing method was used to evaluate the most frequently used functionalities of the application in quasi-real conditions. The quasi-real conditions were reproduced in a controlled manner in the laboratory. The results of the research were obtained through the recording of user activities using the concurrent think-aloud protocol and mobile eye tracker followed by the individual in-depth interview and paper-based questionnaire. The data obtained with concurrent think-aloud protocol and eye tracking was analysed by usability experts. The final results of the research are a derivative of the analysis of the results of all methods and use the synergy effect. The article also presents a list of diagnosed application's usability problems, classification of their severity and recommendations on how to remove them. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/HSI.2018.8431342},
  bytitledomenico = {yes},
  doi             = {10.1109/HSI.2018.8431342},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052741234{\&}doi=10.1109{\%}2FHSI.2018.8431342{\&}partnerID=40{\&}md5=5e0e5e1073a23e13becd4783bda0772d},
}

@Conference{Mendoza2018756,
  author          = {Mendoza, A and Gu, G},
  title           = {{Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies {\&} Vulnerabilities}},
  booktitle       = {Proceedings - IEEE Symposium on Security and Privacy},
  year            = {2018},
  volume          = {2018-May},
  pages           = {756--769},
  abstract        = {Modern mobile apps use cloud-hosted HTTP-based API services and heavily rely on the Internet infrastructure for data communication and storage. To improve performance and leverage the power of the mobile device, input validation and other business logic required for interfacing with web API services are typically implemented on the mobile client. However, when a web service implementation fails to thoroughly replicate input validation, it gives rise to inconsistencies that could lead to attacks that can compromise user security and privacy. Developing automatic methods of auditing web APIs for security remains challenging. In this paper, we present a novel approach for automatically analyzing mobile app-to-web API communication to detect inconsistencies in input validation logic between apps and their respective web API services. We present our system, WARDroid, which implements a static analysis-based web API reconnaissance approach to uncover inconsistencies on real world API services that can lead to attacks with severe consequences for potentially millions of users throughout the world. Our system utilizes program analysis techniques to automatically extract HTTP communication templates from Android apps that encode the input validation constraints imposed by the apps on outgoing web requests to web API services. WARDroid is also enhanced with blackbox testing of server validation logic to identify inconsistencies that can lead to attacks. We evaluated our system on a set of 10,000 popular free apps from the Google Play Store. We detected problematic logic in APIs used in over 4,000 apps, including 1,743 apps that use unencrypted HTTP communication. We further tested 1,000 apps to validate web API hijacking vulnerabilities that can lead to potential compromise of user privacy and security and found that millions of users are potentially affected from our sample set of tested apps. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SP.2018.00039},
  bytitledomenico = {yes},
  doi             = {10.1109/SP.2018.00039},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051003743{\&}doi=10.1109{\%}2FSP.2018.00039{\&}partnerID=40{\&}md5=d67a4f9a38e0a37326d2fc51769b8d88},
}

@Article{Kim2012158,
  author          = {Kim, H.-K.},
  title           = {{Mobile applications software testing methodology}},
  journal         = {Communications in Computer and Information Science},
  year            = {2012},
  volume          = {342 CCIS},
  pages           = {158--166},
  abstract        = {Today's Mobile Applications deliver complex functionality on platforms that have limited resources for computing. Yet, unlike the PC-based environment, the Mobile environment comprises a number of devices with diverse hardware and software configurations and communication intricacies. This diversity in mobile computing environments presents unique challenges in mobile application development, quality assurance, and deployment, requiring unique testing strategies. Many enterprise applications that were deployed as desktop/web applications are now being ported to Mobile devices. In this paper, we have constructed the Mobile Applications Quality Assurance Tool(MAQAT) by integrating tools and prototype systems that we built for program analysis and testing for mobile applications software. MAQAS provides a architecture of program analysis and testing for mobile, and supports many program-analysis-based techniques, including automated mobile applications software inspection, software visualization, testing coverage analysis, performance evaluation, concurrent program debugging, software measurement, etc. The paper briefly describes the overall architecture of MAQAS, and introduces the implementation of its tools and components. {\textcopyright} 2012 Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-35270-6_22},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-642-35270-6_22},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84869803721{\&}doi=10.1007{\%}2F978-3-642-35270-6{\_}22{\&}partnerID=40{\&}md5=5421f4bd3b687e9afcd88eca93fdc661},
}

@InProceedings{7224881,
  author          = {Jadhav, S and Oh, T and Kim, Y H and Kim, J N},
  title           = {{Mobile device penetration testing framework and platform for the mobile device security course}},
  booktitle       = {2015 17th International Conference on Advanced Communication Technology (ICACT)},
  year            = {2015},
  pages           = {675--680},
  abstract        = {The authors have developing mobile device evaluation and testing platform to evaluate the mobile malware. Using the platform, the authors have created several courses in mobile device security. One of the important requirements is to provide students with a safe and sandboxed environment for malware analysis. Other features include tool enhanced lab environment, updated malware repository, log collection and exact assistance. Java based client-server application have been created to serve these requirements. Also a framework to perform mobile malware analysis and mobile penetration testing is proposed and implemented under this research work. Paper focuses on analysing requirements for such coursework to perform mobile malware analysis and mobile application penetration testing. Paper also gives details about the tools created and framework implemented to successfully teach Advanced Mobile Device Security course and perform interactive lab exercises.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICACT.2015.7224881},
  bytitledomenico = {yes},
  doi             = {10.1109/ICACT.2015.7224881},
  issn            = {1738-9445},
  keywords        = {client-server systems;courseware;educational courses;interactive systems;invasive software;Java;mobile computing;program testing;mobile device penetration testing framework;mobile device security course;mobile malware analysis;tool enhanced lab environment;malware repository;Java based client-server application;coursework;interactive lab exercise;Malware;Mobile communication;Mobile handsets;Servers;Testing;Performance evaluation;Mobile Malware Analysis Framework Mobile Device Security;Mobile Penetration Testing;Mobile Application Vulnerabilities;Mobile Application Security Testing Framework Mobile Malware Repository},
}

@Article{ROUSE201211,
  author          = {Rouse, Jason},
  title           = {{Mobile devices -- the most hostile environment for security?}},
  journal         = {Network Security},
  year            = {2012},
  volume          = {2012},
  number          = {3},
  pages           = {11--13},
  issn            = {1353-4858},
  abstract        = {Mobile devices enable millions of users to be more productive and interact with their world in more ways than ever before. Today's mobile devices pack quite a punch -- multi-core, multi-gigahertz processors, gigabytes of onboard and external storage capabilities coupled with wifi, Bluetooth and GSM or CDMA radios -- all packed into a form factor not much larger than a candy bar. Mobile devices are essentially highly miniaturised desktops, and they are also set to become the principle interface between people and business. Chief among the attractions of mobile devices is the use of mobile applications that extend and enhance the capabilities of smartphones in thousands of ways. Mobile devices enable millions of users to be more productive and interact with their world in more ways than ever before. However, mobile applications also expose users and their phones to a multitude of not-so traditional issues, such as a lack of effective security controls, a new information protection landscape, and new security and design paradigms that simply didn't exist a few years ago. Approaches to securing mobile applications build upon many of the techniques used in more traditional software development. However, properly accounting for new threats and attacks requires the use of mobile-specific security assessment processes. Jason Rouse of Cigital explores this threat landscape which, he argues, must be properly understood, especially by those developing software.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485812700454},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(12)70045-4},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/S1353-4858(12)70045-4},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485812700454},
}

@InProceedings{Mozgovoy:2018:MFS:3236112.3236117,
  author          = {Mozgovoy, Maxim and Pyshkin, Evgeny},
  title           = {{Mobile Farm for Software Testing}},
  booktitle       = {Proceedings of the 20th International Conference on Human-Computer Interaction with Mobile Devices and Services Adjunct},
  year            = {2018},
  series          = {MobileHCI '18},
  pages           = {31--38},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {We introduce an approach to user interface testing with a particular focus on non-native GUI based mobile applications. We particularly address the domain of entertainment and education software including mobile games. We describe a prototype system based on inexpensive components and open source software, intended to support product development cycle for companies on lean budget. On the base of a prototype system discussed in this paper we expect to develop a distributed infrastructure that would allow users to use facilities of users' own computers and connected devices as a part of a common testing framework. The approach presented in this work is also suitable for wider range of mobile applications with a high variety of human-computer interaction mechanisms.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3236112.3236117},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3236112.3236117},
  bytitledomenico = {doubt},
  doi             = {10.1145/3236112.3236117},
  isbn            = {978-1-4503-5941-2},
  keywords        = {mobile application, non-native GUI, smoke testing, time-consuming test suites,automated testing framework},
  url             = {http://doi.acm.org/10.1145/3236112.3236117},
}

@Article{8477182,
  author          = {Coppola, R and Morisio, M and Torchiano, M},
  title           = {{Mobile GUI Testing Fragility: A Study on Open-Source Android Applications}},
  journal         = {IEEE Transactions on Reliability},
  year            = {2018},
  pages           = {1--24},
  issn            = {0018-9529},
  abstract        = {Android applications do not seem to be tested as thoroughly as desktop ones. In particular, graphical user interface (GUI) testing appears generally limited. Like web-based applications, mobile apps suffer from GUI test fragility, i.e., GUI test classes failing or needing updates due to even minor modifications in the GUI or in the application under test. The objective of our study is to estimate the adoption of GUI testing frameworks among Android open-source applications, the quantity of modifications needed to keep test classes up to date, and their amount due to GUI test fragility. We introduce a set of 21 metrics to measure the adoption of testing tools and the evolution of test classes and test methods, and to estimate the fragility of test suites. We computed our metrics for six GUI testing frameworks, none of which achieved a significant adoption among Android projects hosted on GitHub. When present, GUI test methods associated with the considered tools are modified often, and a relevant portion (70{\%} on average) of those modifications is induced by GUI-related fragilities. On average, for the projects considered, more than 7{\%} of the total modified lines of code between consecutive releases belong to test classes developed with the analyzed testing frameworks. The measured percentage was higher on average than the one required by other generic test code, based on the JUnit testing framework. Fragility of GUI tests constitutes a relevant concern, probably an obstacle for developers to adopt test automation. This first evaluation of the fragility of Android scripted GUI testing can constitute a benchmark for developers and testers leveraging the analyzed test tools and the basis for the definition of a taxonomy of fragility causes and guidelines to mitigate the issue.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TR.2018.2869227},
  bytitledomenico = {doubt},
  doi             = {10.1109/TR.2018.2869227},
  keywords        = {Testing;Androids;Humanoid robots;Graphical user interfaces;Tools;Open source software;Measurement;Mobile computing;software engineering;software maintenance;software metrics;software testing},
}

@Article{SHABTAI20141,
  author          = {Shabtai, A and Tenenboim-Chekina, L and Mimran, D and Rokach, L and Shapira, B and Elovici, Y},
  title           = {{Mobile malware detection through analysis of deviations in application network behavior}},
  journal         = {Computers {\&} Security},
  year            = {2014},
  volume          = {43},
  pages           = {1--18},
  issn            = {0167-4048},
  abstract        = {In this paper we present a new behavior-based anomaly detection system for detecting meaningful deviations in a mobile application's network behavior. The main goal of the proposed system is to protect mobile device users and cellular infrastructure companies from malicious applications by: (1) identification of malicious attacks or masquerading applications installed on a mobile device, and (2) identification of republished popular applications injected with a malicious code (i.e., repackaging). More specifically, we attempt to detect a new type of mobile malware with self-updating capabilities that were recently found on the official Google Android marketplace. Malware of this type cannot be detected using the standard signatures approach or by applying regular static or dynamic analysis methods. The detection is performed based on the application's network traffic patterns only. For each application, a model representing its specific traffic pattern is learned locally (i.e., on the device). Semi-supervised machine-learning methods are used for learning the normal behavioral patterns and for detecting deviations from the application's expected behavior. These methods were implemented and evaluated on Android devices. The evaluation experiments demonstrate that: (1) various applications have specific network traffic patterns and certain application categories can be distinguished by their network patterns; (2) different levels of deviation from normal behavior can be detected accurately; (3) in the case of self-updating malware, original (benign) and infected versions of an application have different and distinguishable network traffic patterns that in most cases, can be detected within a few minutes after the malware is executed while presenting very low false alarms rate; and (4) local learning is feasible and has a low performance overhead on mobile devices.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404814000285},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2014.02.009},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2014.02.009},
  keywords        = {Android malware, Anomaly detection, Machine learning, Network traffic, Smartphone security,Mobile applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404814000285},
}

@Article{ISI:000381939800003,
  author          = {Akour, Mohammed and Al-Zyoud, Ahmad A and Falah, Bouchaib and Bouriat, Salwa and Alemerien, Khalid},
  title           = {{Mobile Software Testing: Thoughts, Strategies, Challenges, and Experimental Study}},
  journal         = {INTERNATIONAL JOURNAL OF ADVANCED COMPUTER SCIENCE AND APPLICATIONS},
  year            = {2016},
  volume          = {7},
  number          = {6},
  pages           = {12--19},
  issn            = {2158-107X},
  abstract        = {Mobile devices have become more pervasive in our daily lives, and are
gradually replacing regular computers to perform traditional processes
like Internet browsing, editing photos, playing videos and sound track,
and reading different files. The importance of mobile devices in our
life necessitates more concerns of the reliability and compatibility of
mobile applications, and thus, testing these applications arises as an
important phase in mobile devices adaption process. This paper addressed
various research directions on mobile applications testing by
investigating essential concepts, scope, features and requirements for
testing mobile application. We highlight the similarities and the
differences between mobile APP testing and mobile web testing.
Furthermore, we discuss and compare different mobile testing approaches
and environments, and provide the challenges as emergent needs in test
environments. As a case study, we compared the testing experience of
hybrid application in an emulator and a real world device. The purpose
of the experiment is to verify to which extent a virtual device can
emulate a complete client experience. Set of experiments are conducted
where five android mobile browsers are tested. Each browser will be on a
real device as well as an emulated device with the same features (CPU
used, memory size, etc). The application will be tested on the following
metrics: Performance and function/behavior testing.},
  bytitledomenico = {no},
}

@InProceedings{ISI:000337480900028,
  author          = {Bhojan, Rajkumar and Vivekanandan, K and Ganesan, Subra},
  title           = {{Mobile Test Automation Framework for a Multi-Language Application}},
  booktitle       = {INTERNATIONAL CONFERENCE ON SOCIAL SCIENCE AND MANAGEMENT (ICSSM 2014)},
  year            = {2014},
  editor          = {{Narayanasamy, S}},
  pages           = {182--188},
  organization    = {Adv Informat Sci Res Ctr; Khon Kaen Univ; Dalhousie Univ; Univ Stirling},
  abstract        = {As the mobile applications and mobile users are growing rapidly, it is
indeed for researchers and testing experts to come up with effective
verification techniques to ensure reliability of these mobile
applications. The ability to create reusable, robust and maintainable
mobile test framework is paramount to thorough coverage of the
application before it is released. In this paper, we describe a generic
framework developed using selenium webdriver for handling regression
testing on multi-language, multi-browser compatibility testing for a
mobile browser based application. For the purpose of this paper, we
selected a customer registration portal mobile application, developed in
five different languages.},
  annote          = {International Conference on Social Science and Management (ICSSM), Chicago, IL, MAR 15-16, 2014},
  bytitledomenico = {yes},
  isbn            = {978-1-60595-170-6},
}

@Article{Haller:2013:MT:2532780.2532813,
  author          = {Haller, Klaus},
  title           = {{Mobile Testing}},
  journal         = {SIGSOFT Softw. Eng. Notes},
  year            = {2013},
  volume          = {38},
  number          = {6},
  pages           = {1--8},
  issn            = {0163-5948},
  address         = {New York, NY, USA},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2532780.2532813},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2532780.2532813},
  bytitledomenico = {no},
  doi             = {10.1145/2532780.2532813},
  keywords        = {mobile devices, software quality management, software testing, test automation, test strategy,mobile apps},
  publisher       = {ACM},
  url             = {http://doi.acm.org/10.1145/2532780.2532813},
}

@InProceedings{Bo:2007:MTS:1270230.1270261,
  author          = {Jiang, B and Long, X and Gao, X and Bo, Jiang and Xiang, Long and Xiaopeng, Gao},
  title           = {{MobileTest: A Tool Supporting Automatic Black Box Test for Software on Smart Mobile Devices}},
  booktitle       = {Proceedings - International Conference on Software Engineering},
  year            = {2007},
  series          = {AST '07},
  pages           = {8},
  address         = {Washington, DC, USA},
  publisher       = {IEEE Computer Society},
  abstract        = {With the development of mobile computing and pervasive computing, smart mobile devices such as PDAs or smart-phones are gradually becoming an indispensable part of our daily life. However, as the software running on these devices becomes more and more powerful and complex, the testing of these mobile applications poses great challenges for mobile application vendors and phone manufacturers. In this paper, we introduce MobileTest, a tool supporting automatic black box test for software on smart mobile devices. The objectives and the design of the testing tool are thoroughly discussed. The paper also adopts a sensitive-event based approach to simplify the design of test cases and enhance the test cases' efficiency and reusability. Finally, we conducted an experiment in a real testing project. Measurement data of the testing process shows that MobileTest can effectively reduce the complexity of automatic test on smart mobile devices. {\textcopyright} 2007 IEEE.},
  annote          = {From Duplicate 3 (MobileTest: A tool supporting automatic black box test for software on smart mobile devices - Jiang, B; Long, X; Gao, X) cited By 33},
  bdsk-url-1      = {http://dx.doi.org/10.1109/AST.2007.9},
  bytitledomenico = {no},
  doi             = {10.1109/AST.2007.9},
  isbn            = {0-7695-2971-2},
  keywords        = {,Application software,Automatic testing,Computer science,Context,Manufacturing,Mobile computing,MobileTest,Personal digital assistants,Pervasive computing,Software testing,Software tools,automatic black box test,mobile computing,mobile handsets,pervasive computing,program testing,smart mobile device,software testing},
  url             = {http://dx.doi.org/10.1109/AST.2007.9 https://www.scopus.com/inward/record.uri?eid=2-s2.0-46649101840{\&}doi=10.1109{\%}2FAST.2007.9{\&}partnerID=40{\&}md5=94e3aa5c153cc6b685f747a4d2949605},
}

@InProceedings{7967989,
  author          = {Cimitile, A and Martinelli, F and Mercaldo, F and Nardone, V and Santone, A and Vaglini, G},
  title           = {{Model Checking for Mobile Android Malware Evolution}},
  booktitle       = {2017 IEEE/ACM 5th International FME Workshop on Formal Methods in Software Engineering (FormaliSE)},
  year            = {2017},
  pages           = {24--30},
  abstract        = {Software engineering researchers have largely demonstrated that newer versions of software make use of previous versions of existing software. No exception to this rule for the so-called malicious software, that frequently evolves in order to evade the detection by antimalware. As matter of fact, mobile malicious programs, such as trojans, are frequently related to previous malware through evolutionary relationships. Discovering those relationships and constructing a phylogenetic model is expected to be helpful for analyzing new malware and for establishing a principled naming scheme. In this paper we propose a model checking based method to infer mobile malware phylogenetic trees. We demonstrate, implementing our approach in the droid-Sapiens tool, that mobile malware families come from an ancestor and they infuence own descendant, basing on the payload that they exhibit.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/FormaliSE.2017.4},
  bytitledomenico = {no},
  doi             = {10.1109/FormaliSE.2017.4},
  keywords        = {Android (operating system);formal verification;invasive software;mobile computing;model checking;mobile Android malware evolution;software engineering;malicious software;antimalware;mobile malicious programs;trojans;phylogenetic model;mobile malware phylogenetic trees;droid-Sapiens tool;mobile malware families;Malware;Mobile communication;Model checking;Androids;Humanoid robots;Phylogeny;security;malware;evolution;phylogenesys;model checking},
}

@Article{Jing20121,
  author          = {Jing, Y and Ahn, G.-J. and Hu, H},
  title           = {{Model-based conformance testing for android}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2012},
  volume          = {7631 LNCS},
  pages           = {1--18},
  abstract        = {With the surging computing power and network connectivity of smartphones, more third-party applications and services are deployed on these platforms and enable users to customize their mobile devices. Due to the lack of rigorous security analysis, fast evolving smartphone platforms, however, have suffered from a large number of system vulnerabilities and security flaws. In this paper, we present a model-based conformance testing framework for mobile platforms, focused on Android platform. Our framework systematically generates test cases from the formal specification of the mobile platform and performs conformance testing with the generated test cases. We also demonstrate the feasibility and effectiveness of our framework through case studies on Android Inter-Component Communication module. {\textcopyright} Springer-Verlag Berlin Heidelberg 2012.},
  annote          = {cited By 7},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-34117-5-1},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-642-34117-5-1},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84868344703{\&}doi=10.1007{\%}2F978-3-642-34117-5-1{\&}partnerID=40{\&}md5=ad02c3d38db9bee43556c7e94f9d42d3},
}

@Conference{Lu2012322,
  author          = {Lu, Z and Mukhopadhyay, S},
  title           = {{Model-based static source code analysis of java programs with applications to android security}},
  booktitle       = {Proceedings - International Computer Software and Applications Conference},
  year            = {2012},
  pages           = {322--327},
  abstract        = {We combine static analysis techniques with modelbased deductive verification using SMT solvers to provide a framework that, given an analysis aspect of the source code, automatically generates an analyzer capable of inferring information about that aspect. The analyzer is generated by translating the collecting semantics of a program to a "marked" formula in first order logic over multiple underlying theories. The "marking" can be thought of as a set of holes or contexts corresponding to the "uninterpreted" APIs invoked in the program. Just as a program imports packages and uses methods from classes in those packages, we import the semantics of the API invocations as first order logic assertions. These assertions constitute the models used by the analyzer. Logical specification of the desired program behavior (rather its negation) is incorporated as a first order logic formula. An SMT-LIB formula solver treats the combined formula as a "constraint" and "solves" it. The "solved form" can be used to identify logical (security) errors in Java (Android) programs. Security properties of Android are represented as constraints and the analysis aims to show that these constraints are respected. {\textcopyright} 2012 IEEE.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.1109/COMPSAC.2012.43},
  bytitledomenico = {yes},
  doi             = {10.1109/COMPSAC.2012.43},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870852248{\&}doi=10.1109{\%}2FCOMPSAC.2012.43{\&}partnerID=40{\&}md5=6f07b59ba20b4f777bc8a7d8a1240873},
}

@InProceedings{ISI:000426842400026,
  author          = {He, Xudong},
  title           = {{Modeling and Analyzing the Android Permission Framework using High Level Petri Nets}},
  booktitle       = {2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS)},
  year            = {2017},
  pages           = {232--239},
  organization    = {IEEE; Reliability Soc; UTD; CZECH Tech Univ Prague},
  abstract        = {Android permission framework is a part of Android OS to enforce secure
cross application communication. However the android permission
framework is very complex, and its descriptions are scattered in dozens
of webpages. It is very difficult to understand the relationships among
multiple permission levels and their potential vulnerabilities. This
paper presents a formal model of the Android permission framework using
high level Petri nets. The model precisely defines the complex
relationships among different levels of permissions. The model is
constructed incrementally and thus is easily adaptable to future
changes. The model building process is supported by our tool environment
PIPE+, which further provides several analysis techniques. Simulation
results for several scenarios that obey and violate the permission
requirements are discussed.},
  annote          = {IEEE International Conference on Software Quality, Reliability and Security (Companion Volume), Prague, CZECH REPUBLIC, JUL 25-29, 2017},
  bdsk-url-1      = {http://dx.doi.org/10.1109/QRS.2017.34},
  bytitledomenico = {doubt},
  doi             = {10.1109/QRS.2017.34},
  isbn            = {978-1-5386-0592-9},
}

@Conference{Ferrara2015371,
  author          = {Ferrara, P and Tripp, O and Pistoia, M},
  title           = {{MORPHDROID: Fine-grained privacy verification}},
  booktitle       = {ACM International Conference Proceeding Series},
  year            = {2015},
  volume          = {7-11-December-2015},
  pages           = {371--380},
  abstract        = {Mobile devices are rich in sensors, such as a Global Positioning System (GPS) tracker, microphone and camera, and have access to numerous sources of personal information, including the device ID, contacts and social data. This richness increases the functionality of mobile apps, but also creates privacy threats. As a result, different solutions have been proposed to verify or enforce privacy policies. A key limitation of existing approaches is that they reason about privacy at a coarse level, without accounting for declassification rules, such that the location for instance is treated as a single unit of information without reference to its many fields. As a result, legitimate app behaviors - such as releasing the user's city rather than exact address-are perceived as privacy violations, rendering existing analyses overly conservative and thus of limited usability. In this paper, we present MORPHDROID, a novel static analysis algorithm that verifies mobile applications against fine-grained privacy policies. Such policies define constraints over combinations of fine-grained units of private data. Specifically, through a novel design, MORPHDROID tracks flows of fine-grained privacy units while addressing important challenges, including (i) detection of correlations between different units (e.g. longitude and latitude) and (ii) modeling of semantic transformations over private data (e.g. conversion of the location into an address). We have implemented MORPHDROID, and present a thorough experimental evaluation atop a comprehensive benchmark suite for Android static and dynamic analyses (DroidBench), as well as the 500 top-popular Google Play applications in 2014. Our experiments involve a spectrum of 5 security policies, ranging from a strict coarse-grained policy to a more realistic fine-grained policy that accounts for declassification rules. The experiment on DroidBench shows that MORPHDROID achieves precision and recall scores of over 90{\%}. The experiments on popular apps show that the gap between policies is dramatic, the most conservative policy yielding warnings on 171 of the applications (34{\%}), and the more realistic policy flagging only 4 of the applications as misbehaved ({\textless} 1{\%}). In addition, MORPHDROID exhibits good performance with an average analysis time of {\textless} 20 seconds, where on average apps consist of 1.4M lines of code. {\textcopyright} 2015 ACM.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2818000.2818037},
  bytitledomenico = {yes},
  doi             = {10.1145/2818000.2818037},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969213486{\&}doi=10.1145{\%}2F2818000.2818037{\&}partnerID=40{\&}md5=0a635aff30ff87979e6a831c98bbc3ad},
}

@Conference{Vivian2011286,
  author          = {Vivian, R and Brangier, {\'{E}}},
  title           = {{Multi-evaluation for inclusivity: Combining inspection, test, survey and life-size evaluation to assess the use of a mobile system for all}},
  booktitle       = {IMSCI 2011 - 5th International Multi-Conference on Society, Cybernetics and Informatics, Proceedings},
  year            = {2011},
  volume          = {2},
  pages           = {286--290},
  abstract        = {This communication deals with the validation of the usability of mobile (telephone, portable computer, PDA, pocket PC.) technologies intended to help travellers. This system is developed for all, so its usability must be adapted to the greatest possible number of people. With the objective to guaranty a high level of human performance, this paper presents evaluation processes which associate three techniques: inspection based on criteria, tests in a usability lab and a satisfaction surveys carried out in real situations. These processes also try to integrate the design-for-all prospects to the evaluation. After presenting on the main results, we conclude on the necessity to mix usability methods. In fact, this communication aims at developing forms of usability validations according to which the similarity in the performances between the different groups is an indirect indicator of the adaptation of the technical systems. Consequently, the groups with disadvantages give comparison indicators that are useful for the creation and the evaluation of the technical systems. These groups offer a real potential for the validation of uses.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84896263234%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=1b5585a61f48d7649cee3e5ac2d0d0b4},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84896263234{\&}partnerID=40{\&}md5=1b5585a61f48d7649cee3e5ac2d0d0b4},
}

@InProceedings{8306005,
  author          = {Sun, H and North, A and Binder, W},
  title           = {{Multi-Process Runtime Verification for Android}},
  booktitle       = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
  year            = {2017},
  volume          = {2017-December},
  pages           = {701--706},
  abstract        = {With the popularity of Android, a huge number of Android apps appear in different markets. As some apps pose significant security risks, it is important to support runtime monitoring and verification on Android. Existing runtime verification frameworks only focus on verifying the events within a single process, ignoring that Android is a multi-process system where different components communicate frequently, and thus lack the ability to analyze and monitor behaviors across app processes. In this paper, we introduce our new runtime verification framework for Android, capable of performing runtime verification across multiple Android components in different processes. Our approach features an extended regular expression formalism, allowing one to specify complete analyses covering the whole Android system. We illustrate the use of our framework with an Android service characterization study and a monitor for permission (mis) use in apps.},
  annote          = {From Duplicate 1 (Multi-Process Runtime Verification for Android - Sun, H; North, A; Binder, W) cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/APSEC.2017.89},
  bytitledomenico = {doubt},
  doi             = {10.1109/APSEC.2017.89},
  keywords        = {,Android,Android (operating system),Android apps,Android service characterization study,Androids,Humanoid robots,Instrumentation,Instruments,Libraries,Monitoring,Runtime Verification,Smart phones,Tools,mobile computing,multiple Android components,multiprocess runtime verification,multiprocess system,program verification,runtime monitoring,runtime verification framework,security of data,significant security risks,system monitoring},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045894130{\&}doi=10.1109{\%}2FAPSEC.2017.89{\&}partnerID=40{\&}md5=c49dc231a62d8a92446b2e00df60c7da},
}

@Article{Hu2016122,
  author          = {Hu, K and Lei, L and Tsai, W.-T.},
  title           = {{Multi-tenant Verification-as-a-Service (VaaS) in a cloud}},
  journal         = {Simulation Modelling Practice and Theory},
  year            = {2016},
  volume          = {60},
  pages           = {122--143},
  abstract        = {Formal methods and verification technique are often used to develop mission-critical systems. Cloud computing offers new computation models for applications and the new model can be used for formal verification. But formal verification tools and techniques may need to be updated to exploit the cloud architectures. Multi-Tenant Architecture (MTA) is a design architecture used in SaaS (Software-as-a-Service) where a tenant can customize its applications by integrating either services already stored in the SaaS database or newly supplied services. This paper proposes a new concept VaaS (Verification-as-a-Service), similar to SaaS, by leveraging the computing power offered by a cloud environment with automated provisioning, scalability, and service composition. A VaaS hosts verification software in a cloud environment, and these services can be called on demand, and can be composed to verify a software model. This paper presents a VaaS architecture with components, and ways that a VaaS can be used to verify models. Bigragh is selected as the modeling language for illustration as it can model mobile applications. A Bigraph models can be verified by first converting it to a state model, and the state model can be verified by model-checking tools. The VaaS services combination model and execution model are also presented. The algorithm of distributing VaaS services to a cloud is given and its efficiency is evaluated. A case study is used to demonstrate the feasibility of a VaaS. {\textcopyright} 2015 Elsevier B.V. All rights reserved.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.simpat.2015.09.003},
  bytitledomenico = {doubt},
  doi             = {10.1016/j.simpat.2015.09.003},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84946558097{\&}doi=10.1016{\%}2Fj.simpat.2015.09.003{\&}partnerID=40{\&}md5=1eb677cb4f61c42869b20fe1b4f0683f},
}

@InProceedings{Holzmann:2014:MTN:2684103.2684119,
  author          = {Holzmann, Clemens and Hutflesz, Patrick},
  title           = {{Multivariate Testing of Native Mobile Applications}},
  booktitle       = {Proceedings of the 12th International Conference on Advances in Mobile Computing and Multimedia},
  year            = {2014},
  series          = {MoMM '14},
  pages           = {85--94},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {A/B testing has a long history in web development and is used on a daily basis by many companies. Although it is a common test method for web pages, it is hardly used for native mobile applications. The reason seems to be that it is much more difficult to change the user interface of a mobile application, which has been downloaded from an app store, than that of a web page which is fetched from a server by request. In this paper, we present an approach for A/B testing of native mobile applications. Furthermore, it allows for the more flexible multivariate testing, which is based on the same mechanisms as A/B testing, but compares a much higher number of variants by combining variations for different sections of the user interface. Our proposed approach works without redeployment of the mobile application in the app store and thus allows for a seamless integration into the developer's workflow with low effort for creating and deploying new variants. We implemented a prototype solution for the Android platform and compared it against other A/B testing products. It shows that our solution requires less effort and is more convenient to use than related products. Moreover, it is the only one which allows for multivariate testing of native mobile applications.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2684103.2684119},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2684103.2684119},
  bytitledomenico = {doubt},
  doi             = {10.1145/2684103.2684119},
  isbn            = {978-1-4503-3008-4},
  keywords        = {Android, Conversion Funnel, Mobile User Interface, Multivariate Testing, Remote User Interface Exchange,A/B Testing},
  url             = {http://doi.acm.org/10.1145/2684103.2684119},
}

@Article{DENG2017154,
  author          = {Deng, Lin and Offutt, Jeff and Ammann, Paul and Mirzaei, Nariman},
  title           = {{Mutation operators for testing Android apps}},
  journal         = {Information and Software Technology},
  year            = {2017},
  volume          = {81},
  pages           = {154--168},
  issn            = {0950-5849},
  abstract        = {Context: Due to the widespread use of Android devices, Android applications (apps) have more releases, purchases, and downloads than apps for any other mobile devices. The sheer volume of code in these apps creates significant concerns about the quality of the software. However, testing Android apps is different from testing traditional Java programs due to the unique program structure and new features of apps. Simple testing coverage criteria such as statement coverage are insufficient to assure high quality of Android apps. While researchers show significant interest in finding better Android testing approaches, there is still a lack of effective and usable techniques to evaluate their proposed test selection strategies, and to ensure a reasonable number of effective tests. Objective: As mutation analysis has been found to be an effective way to design tests in other software domains, we hypothesize that it is also a viable solution for Android apps. Method: This paper proposes an innovative mutation analysis approach that is specific for Android apps. We define mutation operators specific to the characteristics of Android apps, such as the extensive use of XML files to specify layout and behavior, the inherent event-driven nature, and the unique Activity lifecycle structure. We also report on an empirical study to evaluate these mutation operators. Results: We have built a tool that uses the novel Android mutation operators to mutate the source code of Android apps, then generates mutants that can be installed and run on Android devices. We evaluated the effectiveness of Android mutation testing through an empirical study on real-world apps. This paper introduces several novel mutation operators based on a fault study of Android apps, presents a significant empirical study with real-world apps, and provides conclusions based on an analysis of the results. Conclusion: The results show that the novel Android mutation operators provide comprehensive testing for Android apps. Additionally, as applying mutation testing to Android apps is still at a preliminary stage, we identify challenges, possibilities, and future research directions to make mutation analysis for mobile apps more effective and efficient.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0950584916300684},
  bdsk-url-2      = {https://doi.org/10.1016/j.infsof.2016.04.012},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.infsof.2016.04.012},
  keywords        = {Mutation testing, Software testing,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0950584916300684},
}

@Article{WALNYCKY2015S77,
  author          = {Walnycky, Daniel and Baggili, Ibrahim and Marrington, Andrew and Moore, Jason and Breitinger, Frank},
  title           = {{Network and device forensic analysis of Android social-messaging applications}},
  journal         = {Digital Investigation},
  year            = {2015},
  volume          = {14},
  pages           = {S77 -- S84},
  issn            = {1742-2876},
  abstract        = {In this research we forensically acquire and analyze the device-stored data and network traffic of 20 popular instant messaging applications for Android. We were able to reconstruct some or the entire message content from 16 of the 20 applications tested, which reflects poorly on the security and privacy measures employed by these applications but may be construed positively for evidence collection purposes by digital forensic practitioners. This work shows which features of these instant messaging applications leave evidentiary traces allowing for suspect data to be reconstructed or partially reconstructed, and whether network forensics or device forensics permits the reconstruction of that activity. We show that in most cases we were able to reconstruct or intercept data such as: passwords, screenshots taken by applications, pictures, videos, audio sent, messages sent, sketches, profile pictures and more.},
  annote          = {The Proceedings of the Fifteenth Annual DFRWS Conference},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1742287615000547},
  bdsk-url-2      = {https://doi.org/10.1016/j.diin.2015.05.009},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.diin.2015.05.009},
  keywords        = {Android forensics, Application security testing, Datapp, Instant messaging, Privacy of messaging applications,Network forensics},
  url             = {http://www.sciencedirect.com/science/article/pii/S1742287615000547},
}

@InProceedings{7928006,
  author          = {Tang, J and Cui, X and Zhao, Z and Guo, S and Xu, X and Hu, C and Ban, T and Mao, B},
  title           = {{NIVAnalyzer: A Tool for Automatically Detecting and Verifying Next-Intent Vulnerabilities in Android Apps}},
  booktitle       = {2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  year            = {2017},
  pages           = {492--499},
  abstract        = {In the Android system design, any app can start another app's public components to facilitate code reuse by sending an asynchronous message called Intent. In addition, Android also allows an app to have private components that should only be visible to the app itself. However, malicious apps can bypass this system protection and directly invoke private components in vulnerable apps through a class of newly discovered vulnerability, which is called next-intent vulnerability. In this paper, we design an intent flow analysis strategy which accurately tracks the intent in smali code to statically detect next-intent vulnerabilities efficiently and effectively on a large scale. We further propose an automated approach to dynamically verify the discovered vulnerabilities by generating exploit apps. Then we implement a tool named NIVAnalyzer and evaluate it on 20,000 apps downloaded from Google Play. As the result, we successfully confirms 190 vulnerable apps, some of which even have millions of downloads. We also confirmed that an open-source project and a third-party SDK, which are still used by other apps, have next intent vulnerabilities.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICST.2017.56},
  bytitledomenico = {yes},
  doi             = {10.1109/ICST.2017.56},
  keywords        = {Android (operating system);program diagnostics;security of data;NIVAnalyzer;next-intent vulnerabilities;Android apps;Android system design;code reuse;asynchronous message;malicious apps;intent flow analysis strategy;exploit apps;Google Play;third-party SDK;open-source project;static analysis;dynamic analysis;Registers;Androids;Humanoid robots;Electronic mail;Target tracking;Tools;Facebook;Android;Intent;vulnerability;static and dynamic analysis;tool},
}

@Article{MACIEL20156388,
  author          = {Maciel, Francimar Rodrigues and Hayashi, Sandra},
  title           = {{NOPA, Usability Testing of an Application to Help Patients During the Treatment of Infectious, and Chronic Diseases in Brazil}},
  journal         = {Procedia Manufacturing},
  year            = {2015},
  volume          = {3},
  pages           = {6388--6392},
  issn            = {2351-9789},
  abstract        = {The amount of applications for mobile technology developed to help nurses, doctors, and patients during the treatment of chronic illnesses can be considered an advance provided by the widespread usage of devices such as mobile phones, smartphones, and tablets. Mobile healthcare, or MHealth, refers to the use of mobile devices in healthcare. Designed for different operational systems and virtual stores, more than 5000 applications options are offered nowadays. A wide range of solutions such as booklets of vaccination and medication control are assisting people in their daily activities and consequently increasing the efficacy of treatment performance. This paper aims to present the usability testing of a mobile application designed to help patients during the treatment of chronicle illnesses in Brazil. Advantages and disadvantages related to this service also will be presented.},
  annote          = {6th International Conference on Applied Human Factors and Ergonomics (AHFE 2015) and the Affiliated Conferences, AHFE 2015},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2351978915009683},
  bdsk-url-2      = {https://doi.org/10.1016/j.promfg.2015.07.967},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.promfg.2015.07.967},
  keywords        = {chronicle illnesses, medication adherence, usability testing,mobile healthcare},
  url             = {http://www.sciencedirect.com/science/article/pii/S2351978915009683},
}

@InProceedings{8537303,
  author          = {Tambe, V and Chauhan, D and Kulal, S and Sherkhane, S},
  title           = {{Offline Mobile Security}},
  booktitle       = {2018 International Conference on Smart City and Emerging Technology (ICSCET)},
  year            = {2018},
  pages           = {1--4},
  abstract        = {Currently smartphone and other mobile devices have become incredibly significant in every facet of our life. They are practically offering same abilities as desktop workstations and are also powerful in terms of CPU, storage space and installing several applications. Therefore, security is deliberated as a vital factor in wireless communication technologies. Furthermore, based on growing range of mobile applications within variety of platforms, security is regarded as one of the most valuable and substantial debate in terms of issues, trustees, consistencies and accurateness. The worst security threat is that when your device has been lost or stolen. This paper aims to introduce an offline android application wherein the mobile phones which get lost by mistake or stolen by thief, then the application will help to get the device back by performing various operations on remote mobile devices. The approach will be to send offline messages from the genuine user with help of android devices to the one which is stolen. This developed application will be installed on any android device. The user of the app will set the verification code on his device. This code is the key which the user need to type along with the contact name in order to get recognized. The app always runs in background waiting for the incoming message.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSCET.2018.8537303},
  bytitledomenico = {no},
  doi             = {10.1109/ICSCET.2018.8537303},
  keywords        = {Android (operating system);mobile computing;mobile handsets;security of data;smart phones;trusted computing;offline messages;offline mobile security;smartphone devices;desktop workstations;storage space;wireless communication technologies;mobile applications;mobile phones;remote mobile devices;Android device;security threat;offline Android application;verification code;Smart phones;Global Positioning System;Performance evaluation;Mobile security;Password;lost device;mobile security;offline;security;sms gateway},
}

@InProceedings{ISI:000364653500017,
  author          = {Lee, Myunghee and Kim, Gerard J},
  title           = {{On Applying Experience Sampling Method to A/B Testing of Mobile Applications: A Case Study}},
  booktitle       = {HUMAN-COMPUTER INTERACTION - INTERACT 2015, PT II},
  year            = {2015},
  editor          = {{Abascal, J and Barbosa, S and Fetter, M and Gross, T and Palanque, P and Winckler, M}},
  volume          = {9297},
  series          = {Lecture Notes in Computer Science},
  pages           = {203--210},
  organization    = {Int Federat Informat Proc Tech Comm 13; Univ Bamberg; Microsoft Res; Oxford Univ Press; SAP; Noldus},
  abstract        = {With the advent of mobile devices, the experience sampling method (ESM)
is increasingly used as a convenient and effective way to capture user
behaviors of, and evaluate mobile and environment-context dependent
applications. Like any field based in situ testing methods, ESM is prone
to biases from unreliable and unbalanced data, especially for A/B
testing situations. Mitigating such effects can in turn incur
significant costs in terms of the number of participants and sessions,
and prolonged experimental time. In fact, ESM has rarely been applied to
A/B testing nor do existing literatures reveal its operational details
and difficulties. In this paper, as a step toward establishing concrete
guidelines, we describe a case study of applying ESM to evaluating two
competing interfaces for a mobile application. Based on the gathered
data and direct interviews with the participants, we highlight the
difficulties experienced and lessons learned. In addition, we make a
proposal for a new ESM in which the experimental parameters are
dynamically reconfigured based on the intermediate experimental results
to overcome the aforementioned difficulties.},
  annote          = {15th IFIP TC.13 International Conference on Human-Computer Interaction (INTERACT), Bamberg, GERMANY, SEP 14-18, 2015},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-22668-2_17},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-22668-2_17},
  isbn            = {978-3-319-22668-2; 978-3-319-22667-5},
  issn            = {0302-9743},
}

@Article{TAO201739,
  author          = {Tao, Chuanqi and Gao, Jerry},
  title           = {{On building a cloud-based mobile testing infrastructure service system}},
  journal         = {Journal of Systems and Software},
  year            = {2017},
  volume          = {124},
  pages           = {39--55},
  issn            = {0164-1212},
  abstract        = {With the rapid advance of mobile computing, cloud computing and wireless network, there is a significant increasing number of mobile subscriptions. This brings new business requirements and demands in mobile testing service, and causes new issues and challenges. In this paper, informative discussions about cloud-based mobile testing-as-a-service (mobile TaaS) are offered, including the essential concepts, focuses, test process, and the expected testing infrastructures. To address the need of infrastructure level service for mobile TaaS, this paper presents a developed system known as MTaaS to provide an infrastructure-as-a-service (IaaS) for mobile testing, in order to indicate the feasibility and effectiveness of cloud-based mobile testing service. In addition, the paper presents a comparison among cloud-based mobile TaaS approaches and several best practices in industry are discussed. Finally, the primary issues, challenges, and needs existed in current mobile TaaS are analyzed.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0164121216302230},
  bdsk-url-2      = {https://doi.org/10.1016/j.jss.2016.11.016},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jss.2016.11.016},
  keywords        = {Cloud-based infrastructure -as-a-service, Mobile application testing,Mobile testing as a service},
  url             = {http://www.sciencedirect.com/science/article/pii/S0164121216302230},
}

@Conference{Tao2016480,
  author          = {Tao, C and Gao, J},
  title           = {{On building test automation system for mobile applications using GUI ripping}},
  booktitle       = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
  year            = {2016},
  volume          = {2016-January},
  pages           = {480--485},
  abstract        = {With the rapid advance of mobile computing technology and wireless networking, there is a significant increase of mobile subscriptions. This brings new business requirements and demands in mobile software testing, and causes new issues and challenges in mobile testing and automation. Current existing mobile application testing tools mostly concentrate on GUI, load and performance testing which seldom consider large-scale concurrent automation, coverage analysis, fault tolerance and usage of well-defined models. This paper introduces an implemented system that provides an automation solution across platforms on diverse devices using GUI ripping test scripting technique. Through incorporating open source technologies such as Appium and Selenium Grid, this paper addresses the scalable test automation control with the capability of fault tolerant. Additionally, maximum test coverage can also be obtained by executing parallel test scripts within the model. Finally, the paper reports case studies to indicate the feasibility and effectiveness of the proposed approach.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.18293/SEKE2016-168},
  bytitledomenico = {doubt},
  doi             = {10.18293/SEKE2016-168},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988358022{\&}doi=10.18293{\%}2FSEKE2016-168{\&}partnerID=40{\&}md5=00aed5e24fdf96cee6de18b3ede0dc8f},
}

@Article{YAZDANBAKHSH20161256,
  author          = {Yazdanbakhsh, O and Dick, S and Reay, I and Mace, E},
  title           = {{On deterministic chaos in software reliability growth models}},
  journal         = {Applied Soft Computing},
  year            = {2016},
  volume          = {49},
  pages           = {1256--1269},
  issn            = {1568-4946},
  abstract        = {Software reliability growth models attempt to forecast the future reliability of a software system, based on observations of the historical occurrences of failures. This allows management to estimate the failure rate of the system in field use, and to set release criteria based on these forecasts. However, the current software reliability growth models have never proven to be accurate enough for widespread industry use. One possible reason is that the model forms themselves may not accurately capture the underlying process of fault injection in software; it has been suggested that fault injection is better modeled as a chaotic process rather than a random one. This possibility, while intriguing, has not yet been evaluated in large-scale, modern software reliability growth datasets. We report on an analysis of four software reliability growth datasets, including ones drawn from the Android and Mozilla open-source software communities. These are the four largest software reliability growth datasets we are aware of in the public domain, ranging from 1200 to over 86,000 observations. We employ the methods of nonlinear time series analysis to test for chaotic behavior in these time series; we find that three of the four do show evidence of such behavior (specifically, a multifractal attractor). Finally, we compare a deterministic time series forecasting algorithm against a statistical one on both datasets, to evaluate whether exploiting the apparent chaotic behavior might lead to more accurate reliability forecasts.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1568494616304008},
  bdsk-url-2      = {https://doi.org/10.1016/j.asoc.2016.08.006},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.asoc.2016.08.006},
  keywords        = {Chaos theory, Forecasting, Machine learning, Time series analysis,Software reliability},
  url             = {http://www.sciencedirect.com/science/article/pii/S1568494616304008},
}

@Article{Chen2016326,
  author          = {Chen, W and Aspinall, D and Gordon, A D and Sutton, C and Muttik, I},
  title           = {{On robust malware classifiers by verifying unwanted behaviours}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2016},
  volume          = {9681},
  pages           = {326--341},
  abstract        = {Machine-learning-based Android malware classifiers perform badly on the detection of new malware, in particular, when they take API calls and permissions as input features, which are the best performing features known so far. This is mainly because signature-based features are very sensitive to the training data and cannot capture general behaviours of identified malware. To improve the robustness of classifiers, we study the problem of learning and verifying unwanted behaviours abstracted as automata. They are common patterns shared by malware instances but rarely seen in benign applications, e.g., intercepting and forwarding incoming SMS messages. We show that by taking the verification results against unwanted behaviours as input features, the classification performance of detecting new malware is improved dramatically. In particular, the precision and recall are respectively 8 and 51 points better than those using API calls and permissions, measured against industrial datasets collected across several years. Our approach integrates several methods: formal methods, machine learning and text mining techniques. It is the first to automatically generate unwanted behaviours for Android malware detection. We also demonstrate unwanted behaviours constructed for well-known malware families. They compare well to those described in human-authored descriptions of these families. {\textcopyright} Springer International Publishing Switzerland 2016.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-33693-0_21},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-33693-0_21},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84977470909{\&}doi=10.1007{\%}2F978-3-319-33693-0{\_}21{\&}partnerID=40{\&}md5=2a6580bd6adcd79134462fd73827919e},
}

@Article{Dmitrienko2014365,
  author          = {Dmitrienko, A and Liebchen, C and Rossow, C and Sadeghi, A.-R.},
  title           = {{On the (in)security of mobile two-factor authentication}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2014},
  volume          = {8437},
  pages           = {365--383},
  abstract        = {Two-factor authentication (2FA) schemes aim at strengthening the security of login password-based authentication by deploying secondary authentication tokens. In this context, mobile 2FA schemes require no additional hardware (e.g., a smartcard) to store and handle the secondary authentication token, and hence are considered as a reasonable trade-off between security, usability and costs. They are widely used in online banking and increasingly deployed by Internet service providers. In this paper, we investigate 2FA implementations of several well-known Internet service providers such as Google, Dropbox, Twitter and Facebook. We identify various weaknesses that allow an attacker to easily bypass them, even when the secondary authentication token is not under attacker's control. We then go a step further and present a more general attack against mobile 2FA schemes. Our attack relies on cross-platform infection that subverts control over both end points (PC and a mobile device) involved in the authentication protocol. We apply this attack in practice and successfully circumvent diverse schemes: SMSbased TAN solutions of four large banks, one instance of a visual TAN scheme, 2FA login verification systems of Google, Dropbox, Twitter and Facebook accounts, and the Google Authenticator app currently used by 32 third-party service providers. Finally, we cluster and analyze hundreds of real-world malicious Android apps that target mobile 2FA schemes and show that banking Trojans already deploy mobile counterparts that steal 2FA credentials like TANs. {\textcopyright} International Financial Cryptography Association 2014.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-662-45472-5_24},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-662-45472-5_24},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84916597460{\&}doi=10.1007{\%}2F978-3-662-45472-5{\_}24{\&}partnerID=40{\&}md5=a38cc01be91b433396c396973a0eb0fd},
}

@Article{Lin2014957,
  author          = {Lin, Y.-D. and Rojas, J F and Chu, E.T.-H. and Lai, Y.-C.},
  title           = {{On the accuracy, efficiency, and reusability of automated test oracles for android devices}},
  journal         = {IEEE Transactions on Software Engineering},
  year            = {2014},
  volume          = {40},
  number          = {10},
  pages           = {957--970},
  abstract        = {Automated GUI testing consists of simulating user events and validating the changes in the GUI in order to determine if an Android application meets specifications. Traditional record-replay testing tools mainly focus on facilitating the test case writing process but not the replay and verification process. The accuracy of testing tools degrades significantly when the device under test (DUT) is under heavy load. In order to improve the accuracy, our previous work, SPAG, uses event batching and smart wait function to eliminate the uncertainty of the replay process and adopts GUI layout information to verify the testing results. SPAG maintains an accuracy of up to 99.5 percent and outperforms existing methods. In this work, we propose smart phone automated GUI testing tool with camera (SPAG-C), an extension of SPAG, to test an Android hardware device. Our goal is to further reduce the time required to record test cases and increase reusability of the test oracle without compromising test accuracy. In the record stage, SPAG captures screenshots from device's frame buffer and writes verification commands into the test case. Unlike SPAG, SPAG-C captures the screenshots from an external camera instead of frame buffer. In the replay stage, SPAG-C automatically performs image comparison while SPAG simply performs a string comparison to verify the test results. In order to make SPAG-C reusable for different devices and to allow bettersynchronization at the time of capturing images, we develop a new architecture that uses an external camera and Web services to decouple the test oracle. Our experiments show that recording a test case using SPAG-C's automatic verification is as fast as SPAG's but more accurate. Moreover, SPAG-C is 50 to 75 percent faster than SPAG in achieving the same test accuracy. With reusability, SPAG-C reduces the testing time from days to hours for heterogeneous devices. {\textcopyright} 1976-2012 IEEE.},
  annote          = {cited By 19},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TSE.2014.2331982},
  bytitledomenico = {yes},
  doi             = {10.1109/TSE.2014.2331982},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908027299{\&}doi=10.1109{\%}2FTSE.2014.2331982{\&}partnerID=40{\&}md5=d5576d5fe9e0c9c4a25af45c661e2e3c},
}

@Article{ALHAIQI2013989,
  author          = {Al-Haiqi, Ahmed and Ismail, Mahamod and Nordin, Rosdiadee},
  title           = {{On the Best Sensor for Keystrokes Inference Attack on Android}},
  journal         = {Procedia Technology},
  year            = {2013},
  volume          = {11},
  pages           = {989--995},
  issn            = {2212-0173},
  abstract        = {One of the most recently exposed security threats on smartphone platforms is the potential use of motion sensors to infer user keystrokes. Exploited as side channels, few researchers have demonstrated the ability of built-in accelerometers and gyroscopes in particular, to reveal information related to user input, though the practicality of such an attack remains an open question. This paper takes further steps along the path of exploring the aspects of the new threat, addressing the question of which available sensors can perform best in the context of the inference attack. We design and implement a benchmark experiment, against which the performances of several commodity smartphone-sensors are compared, in terms of inference accuracy. All available Android motion sensors are considered through different settings provided by the OS, and we add the option of fusing several sensors input into a single dataset, to examine the amount/lack of improvement in the attack accuracy. Our results indicate an outstanding performance of the gyroscope sensor, and the potential improvement obtained out of sensors data fusion. On the other hand, it seems that sensors with magnetometer component or the accelerometer alone have less benefit in the adverted attack.},
  annote          = {4th International Conference on Electrical Engineering and Informatics, ICEEI 2013},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2212017313004398},
  bdsk-url-2      = {https://doi.org/10.1016/j.protcy.2013.12.285},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.protcy.2013.12.285},
  keywords        = {Android, Motion sensors, Sensor-based attack, Side-channel attack, Touchscreen taps inference,Smartphone security},
  url             = {http://www.sciencedirect.com/science/article/pii/S2212017313004398},
}

@Article{Chen2015841,
  author          = {Chen, W.-J. and Tyan, H.-R. and Huang, S.-K.},
  title           = {{On the effectiveness of scheduling fuzz testing}},
  journal         = {Frontiers in Artificial Intelligence and Applications},
  year            = {2015},
  volume          = {274},
  pages           = {841--849},
  abstract        = {With the rapid development of software systems, exploiting software vulnerabilities to invade the system has largely increased. As a result, software security becomes vitally important. Since it is impossible to develop programs without bugs and it is inefficient to test program manually, we need a systematic software testing methods to verify if the software is with good quality. Black-box testing is a technique that can find bugs without the target program's source code, and normally copes with mutation fuzz testing. There are numerous fuzz testing tools freely available, but to find the maximum amount of unique bugs in limited interval of time is still a problem remained to be solved. In this paper we have used several scheduling algorithms to improve the fuzzer called FOE (Failure Observation Engine) to better improve the original fuzzing efficiency and produce maximum unique bugs in a given period of time. {\textcopyright} 2015 The authors and IOS Press. All rights reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.3233/978-1-61499-484-8-841},
  bytitledomenico = {doubt},
  doi             = {10.3233/978-1-61499-484-8-841},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84926472358{\&}doi=10.3233{\%}2F978-1-61499-484-8-841{\&}partnerID=40{\&}md5=9054e9a772117a44de1b2b8c656ca010},
}

@InProceedings{Zhang:2018:FAM:3203422.3203430,
  author          = {Zhang, Xiao and Xu, Zhi},
  title           = {{On the Feasibility of Automatic Malware Family Signature Generation}},
  booktitle       = {Proceedings of the First Workshop on Radical and Experiential Security},
  year            = {2018},
  series          = {RESEC '18},
  pages           = {69--72},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Malware detection has witnessed a rapid transition from manual signature release to fully automation in recent years. In particular, with the accumulation of huge malware sample sets, machine learning (ML) and deep learning (DL) have been proposed for verdict predicting and family attribution. Despite the high accuracy and efficiency, existing proposals fall short in providing explanation for their detection results. To fill in the gap between classification decisions and reasoning behind, we propose Galaxy, a generic approach for automatic malware family signature generation. Briefly, Galaxy selects meaningful metadata fields from static and dynamic analysis reports of the given samples. Based on the selected fields, all input samples will be clustered into groups according to similarity measurement. The observed similarities will then be converted into patterns and validated against multiple intelligence sources to decide whether it is suitable for malware detection. In the end, Galaxy launches a refine process to improve the grouping results and increase sample coverage. We have applied the Galaxy framework on daily incoming Android samples to our WildFire production since September 2016. Up to know, Galaxy has generated more than 12,500 unique family signatures covering a total of 1.75 million Android malwares. Those family signatures have provided valuable insights for the discovery of undocumented malicious domains and identification of Communication & Control (C&C) servers. Because of our rigid quality requirement, all released signatures have been proven to cause no false positives in production.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3203422.3203430},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3203422.3203430},
  bytitledomenico = {doubt},
  doi             = {10.1145/3203422.3203430},
  isbn            = {978-1-4503-5757-9},
  keywords        = {clustering, galaxy, intelligence, machine learning, malware categorization, malware detection,android},
  url             = {http://doi.acm.org/10.1145/3203422.3203430},
}

@Article{PALOMBA201943,
  author          = {Palomba, Fabio and Nucci, Dario Di and Panichella, Annibale and Zaidman, Andy and Lucia, Andrea De},
  title           = {{On the impact of code smells on the energy consumption of mobile applications}},
  journal         = {Information and Software Technology},
  year            = {2019},
  volume          = {105},
  pages           = {43--55},
  issn            = {0950-5849},
  abstract        = {Context. The demand for green software design is steadily growing higher especially in the context of mobile devices, where the computation is often limited by battery life. Previous studies found how wrong programming solutions have a strong impact on the energy consumption. Objective. Despite the efforts spent so far, only a little knowledge on the influence of code smells, i.e.,symptoms of poor design or implementation choices, on the energy consumption of mobile applications is available. Method. To provide a wider overview on the relationship between smells and energy efficiency, in this paper we conducted a large-scale empirical study on the influence of 9 Android-specific code smells on the energy consumption of 60 Android apps. In particular, we focus our attention on the design flaws that are theoretically supposed to be related to non-functional attributes of source code, such as performance and energy consumption. Results. The results of the study highlight that methods affected by four code smell types, i.e.,Internal Setter, Leaking Thread, Member Ignoring Method, and Slow Loop, consume up to 87 times more than methods affected by other code smells. Moreover, we found that refactoring these code smells reduces energy consumption in all of the situations. Conclusions. Based on our findings, we argue that more research aimed at designing automatic refactoring approaches and tools for mobile apps is needed.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0950584918301678},
  bdsk-url-2      = {https://doi.org/10.1016/j.infsof.2018.08.004},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.infsof.2018.08.004},
  keywords        = {Energy consumption, Mobile apps, Refactoring,Code smells},
  url             = {http://www.sciencedirect.com/science/article/pii/S0950584918301678},
}

@Conference{Hasegawa201899,
  author          = {Hasegawa, C and Iyatomi, H},
  title           = {{One-dimensional convolutional neural networks for Android malware detection}},
  booktitle       = {Proceedings - 2018 IEEE 14th International Colloquium on Signal Processing and its Application, CSPA 2018},
  year            = {2018},
  pages           = {99--102},
  abstract        = {In recent years, malware aims at Android OS has been increasing due to its rapid popularization. Several studies have been conducted for automated malware detection with machine learning approach and reported promising performance. However, they require a large amount of computation when running on the client; typically mobile phone and/or similar devices. Thus, problems remain in terms of practicality. In this paper, we propose an accurate and light-weight Android malware detection method. Our method treats very limited part of raw APK (Android application package) file of the target as a short string and analyzes it with one-dimensional convolutional neural network (1-D CNN). We used two different datasets each consisting of 5,000 malwares and 2,000 goodwares. We confirmed our method using only the last 512-1K bytes of APK file achieved 95.40-97.04{\%} in accuracy discriminating their malignancy under the 10-fold cross-validation strategy. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CSPA.2018.8368693},
  bytitledomenico = {yes},
  doi             = {10.1109/CSPA.2018.8368693},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048782300{\&}doi=10.1109{\%}2FCSPA.2018.8368693{\&}partnerID=40{\&}md5=f9568d65bcf7ecfdbbf38a2e918a7742},
}

@Article{LI2016124,
  author          = {Li, Shaosong and Mishra, Shivakant},
  title           = {{Optimizing power consumption in multicore smartphones}},
  journal         = {Journal of Parallel and Distributed Computing},
  year            = {2016},
  volume          = {95},
  pages           = {124--137},
  issn            = {0743-7315},
  abstract        = {This paper addresses the issue of managing power consumption in multicore smartphones via a middleware layer that schedules optimal number of cores for currently running applications taking into account the tradeoff between power consumption, performance and user experience. The paper first describes a simple and accurate method to measure the overall power consumption and then studies the impact of scheduling seven different popular applications over one to four cores on the overall power consumption. Based on this study, the paper proposes three new power-aware scheduling algorithms that dynamically schedule optimal number of cores as well as dynamically adjust the voltage frequency of each online core to achieve the best tradeoff between power consumption, application performance and user experience under the current context. Evaluation from a prototype implementation of the middleware on a quad-core HTC One shows that these algorithms result in significant reduction in power consumption while ensuring good performance and user experience.},
  annote          = {Special Issue on Energy Efficient Multi-Core and Many-Core Systems, Part I},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0743731516000198},
  bdsk-url-2      = {https://doi.org/10.1016/j.jpdc.2016.02.004},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jpdc.2016.02.004},
  keywords        = {Android smartphone, Power-aware scheduler,Multi-core processor},
  url             = {http://www.sciencedirect.com/science/article/pii/S0743731516000198},
}

@Article{MOOD201878,
  author          = {Mood, Benjamin and Butler, Kevin R B},
  title           = {{PAL: A pseudo assembly language for optimizing secure function evaluation in mobile devices}},
  journal         = {Journal of Information Security and Applications},
  year            = {2018},
  volume          = {40},
  pages           = {78--91},
  issn            = {2214-2126},
  abstract        = {Secure function evaluation (SFE) on mobile devices, such as smartphones, allows for the creation of compelling new privacy-preserving applications. Generating garbled circuits on smartphones to allow for executing customized functions, however, is infeasible for all but the most trivial problems due to the high memory overhead incurred. We develop a new methodology of generating garbled circuits that is memory-efficient. Using the standard language (SFDL) for describing secure functions as input, we design a new pseudo-assembly language (PAL) and a template-driven compiler, generating circuits that can be evaluated with the canonical Fairplay framework. We deploy this compiler for Android devices and demonstrate that a large new set of circuits can now be generated on smartphones, with memory overhead to generate circuits solving the set intersection problem reduced by 95.6{\%} for the 2-set case. We show our compiler's ability to interface with other execution systems and perform mobile phone specific optimizations on that execution system. We develop a password vault application to show how runtime generation of circuits can be used in practice. We also show that our circuit generation techniques can be used in conjunction with other SFE optimizations. These results demonstrate the feasibility of generating garbled circuits on mobile devices while maintaining the convenience of high-level function specification.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2214212617306749},
  bdsk-url-2      = {https://doi.org/10.1016/j.jisa.2018.02.005},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jisa.2018.02.005},
  url             = {http://www.sciencedirect.com/science/article/pii/S2214212617306749},
}

@Conference{Wen2015210,
  author          = {Wen, H.-L. and Lin, C.-H. and Hsieh, T.-H. and Yang, C.-Z.},
  title           = {{PATS: A Parallel GUI Testing Framework for Android Applications}},
  booktitle       = {Proceedings - International Computer Software and Applications Conference},
  year            = {2015},
  volume          = {2},
  pages           = {210--215},
  abstract        = {Android is currently the most widely used operating system for mobile devices. GUI testing for Android applications becomes an important research area in which many studies have been conducted. The past studies show that testing a complicated GUI design may need a large number of test cases which increases exponentially due to the complexity of the GUI. Developers then need to spend a large amount of testing time in executing the test cases to explore the potential software defects. Unfortunately, the testing efficiency issue has not been comprehensively discussed in related studies. In this paper, we describe a parallel GUI testing platform called PATS (Parallel Android Testing System) which performs GUI testing based on a master-slave model. In PATS, the application under test is analyzed dynamically under the cooperation of the master and the slaves. Since the test cases are also generated in parallel at the runtime, the testing efficiency can be improved. We have implemented a prototype and conducted experiments with Android apps. The experimental results show that PATS can effectively improve the testing time with 18.87-35.78{\%} performance improvements. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 11},
  bdsk-url-1      = {http://dx.doi.org/10.1109/COMPSAC.2015.80},
  bytitledomenico = {doubt},
  doi             = {10.1109/COMPSAC.2015.80},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962176170{\&}doi=10.1109{\%}2FCOMPSAC.2015.80{\&}partnerID=40{\&}md5=25f15d368cbf700db2aa6931f6284a7f},
}

@Conference{Costa201466,
  author          = {Costa, P and Paiva, A C R and Nabuco, M},
  title           = {{Pattern based GUI testing for mobile applications}},
  booktitle       = {Proceedings - 2014 9th International Conference on the Quality of Information and Communications Technology, QUATIC 2014},
  year            = {2014},
  pages           = {66--74},
  abstract        = {This paper presents a study aiming to assess the feasibility of using the Pattern Based GUI Testing approach, PBGT, to test mobile applications. PBGT is a new model based testing approach that aims to increase systematization, reusability and diminish the effort in modelling and testing. It is based on the concept of User Interface Test Patterns (UITP) that contain generic test strategies for testing common recurrent behaviour, the so-called UI Patterns, on GUIs through its possible different implementations after a configuration step. Although PBGT was developed having web applications in mind, it is possible to develop drivers for other platforms in order to test a wide set of applications. However, web and mobile applications are different and only the development of a new driver to execute test cases over mobile applications may not be enough. This paper describes a study aiming to identify the adaptations and updates the PBGT should undergo in order to test mobile applications. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 17},
  bdsk-url-1      = {http://dx.doi.org/10.1109/QUATIC.2014.16},
  bytitledomenico = {doubt},
  doi             = {10.1109/QUATIC.2014.16},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921054650{\&}doi=10.1109{\%}2FQUATIC.2014.16{\&}partnerID=40{\&}md5=f14f4378c1a7b6a2ca56da25fdb7ef7c},
}

@Conference{Grassi2005107,
  author          = {Grassi, V},
  title           = {{Performance analysis of mobile systems}},
  booktitle       = {Lecture Notes in Computer Science},
  year            = {2005},
  volume          = {3465},
  pages           = {107--154},
  abstract        = {Mobile systems, where both computing nodes and software components can dynamically change their location, are already a reality, thanks to technological advances in several related fields. The high variability and heterogeneity of these systems raises severe performance problems, thus requiring a careful planning of any performance validation activity concerning these systems. This paper reviews some approaches that have been proposed to this end, presenting them within a general framework aimed at supporting a systematic approach to the validation of non functional attributes. In this framework we emphasize that one of the key points for the actual and effective introduction of non-functional attributes validation since the early design phases is the definition of model-based transformations from design-oriented models to analysis-oriented models. {\textcopyright} Springer-Verlag Berlin Heidelberg 2005.},
  annote          = {cited By 1},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-24944580883%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=bed1ba6d9c958f71c4133577a8b9d0d6},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-24944580883{\&}partnerID=40{\&}md5=bed1ba6d9c958f71c4133577a8b9d0d6},
}

@Article{Espada2017,
  author          = {Espada, A R and Gallardo, M D M and Salmer{\'{o}}n, A and Merino, P},
  title           = {{Performance Analysis of Spotify{\textregistered} for Android with Model-Based Testing}},
  journal         = {Mobile Information Systems},
  year            = {2017},
  volume          = {2017},
  abstract        = {This paper presents the foundations and the real use of a tool to automatically detect anomalies in Internet traffic produced by mobile applications. In particular, our MVE tool is focused on analyzing the impact that user interactions have on the traffic produced and received by the smartphones. To make the analysis exhaustive with regard to the potential user behaviors, we follow a model-based approach to automatically generate test cases to be executed on the smartphones. In addition, we make use of a specification language to define traffic patterns to be compared with the actual traffic in the device. MVE also includes monitoring and verification support to detect executions that do not fit the patterns. In these cases, the developer will obtain detailed information on the user actions that produce the anomaly in order to improve the application. To validate the approach, the paper presents an experimental study with the well-known Spotify app for Android, in which we detected some interesting behaviors. For instance, some HTTP connections do not end successfully due to timeout errors from the remote Spotify service. {\textcopyright} 2017 Ana Rosario Espada et al.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1155/2017/2012696},
  bytitledomenico = {doubt},
  doi             = {10.1155/2017/2012696},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014163603{\&}doi=10.1155{\%}2F2017{\%}2F2012696{\&}partnerID=40{\&}md5=e07a3faa51dbc62c4999e712745b9646},
}

@InProceedings{Zhao2018246,
  author          = {Zhao, Y and Wang, J and Zhang, L and Wang, J and Qi, Q},
  title           = {{Performance Evaluation and Optimization for Android-Based Web Server}},
  booktitle       = {2017 International Conference on Networking and Network Applications (NaNA)},
  year            = {2017},
  volume          = {2018-January},
  pages           = {246--251},
  abstract        = {Nowadays, the WEB server is mainly deployed by Internet Information Server, Apache and Nginx. These servers are running on the computer platform and they have been quite mature in the operating system such as Windows and Linux. With the mobile Internet changing our life and mobile device hardware being improved, Android platform is required to be equipped with web server to provide web services for shops, restaurant or other customer visiting places. As the performance of Android platform is different from traditional computers, we firstly analyze the concurrent performance of lightweight web servers with Nginx, PHP and MySQL on Android. By the exploratory testing method and observing the change of server performance through the test results, we modify the server's configuration parameters and obtains the best performance of server under Android system. {\textcopyright} 2017 IEEE.},
  annote          = {From Duplicate 2 (Performance Evaluation and Optimization for Android-Based Web Server - Zhao, Y; Wang, J; Zhang, L; Wang, J; Qi, Q) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/NaNA.2017.66},
  bytitledomenico = {no},
  doi             = {10.1109/NaNA.2017.66},
  keywords        = {,Android (operating system),Android platform,Android system,Androids,HTTP server,Humanoid robots,Internet,Internet Information Server,Linux,Smart phones,Testing,Time factors,Web servers,Web services,android-based web server,computer platform,concurrent test,file servers,lightweight web servers,mobile Internet,mobile computing,mobile device hardware,optimisation,optimization,performance optimization},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049454732{\&}doi=10.1109{\%}2FNaNA.2017.66{\&}partnerID=40{\&}md5=661c34c3e86c824bdb4e35ddf8bd1c73},
}

@Conference{SundaraRajan20151148,
  author          = {{Sundara Rajan}, V S and Malini, A and Sundarakantham, K},
  title           = {{Performance evaluation of online mobile application using Test My App}},
  booktitle       = {Proceedings of 2014 IEEE International Conference on Advanced Communication, Control and Computing Technologies, ICACCCT 2014},
  year            = {2015},
  pages           = {1148--1152},
  abstract        = {Mobile application is application software intended to be deployed and used on any portable devices. Online mobile applications are widely used in many critical areas such as online shopping, ticket booking, E-commerce, etc. The quality of these applications depends upon network related factors that may affect the normal working of the application under poor performance. So there is a need to test online mobile application but the existing method does not provide a better performance result based on the network and device factors. In this paper, a testing framework the 'Test My APP' is proposed to test online mobile applications. The proposed testing framework measures the response time under various device and network conditions. The obtained results are then processed using the chi-square based performance evaluation method to provide accurate performance measure. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICACCCT.2014.7019277},
  bytitledomenico = {yes},
  doi             = {10.1109/ICACCCT.2014.7019277},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923287631{\&}doi=10.1109{\%}2FICACCCT.2014.7019277{\&}partnerID=40{\&}md5=0b215ca81064f91bc700b8acdc3f617b},
}

@Conference{Sinaga2018534,
  author          = {Sinaga, A M and {Adi Wibowo}, P and Silalahi, A and Yolanda, N},
  title           = {{Performance of automation testing tools for android applications}},
  booktitle       = {Proceedings of 2018 10th International Conference on Information Technology and Electrical Engineering: Smart Technology for Better Society, ICITEE 2018},
  year            = {2018},
  pages           = {534--539},
  abstract        = {The number of mobile application is growing remarkably. Hence, the requirement of testing on mobile application is essential in order to assure that all applications on the market have good quality. Testing on mobile application can be conducted manually or automatically. The automation testing utilizes a testing tool to perform test case execution and verification automatically. The utilization of automation testing can improve the performance of testing. There are various automation testing tools for mobile application with different capabilities and characteristics such as Appium, Robotium, and UI Automator. This paper presents an empirical investigation of the performance comparison of automation testing tools when applied into four Android applications as objects under test. Android is a popular operating system for smartphone with a huge number of applications. The result shows that the tools have their advantages and disadvantages. Detail performance comparison of the three tools is presented in this paper. Based on the experiment result, this paper provides recommendation for the utilization of each of the tools. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICITEED.2018.8534756},
  bytitledomenico = {no},
  doi             = {10.1109/ICITEED.2018.8534756},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058378404{\&}doi=10.1109{\%}2FICITEED.2018.8534756{\&}partnerID=40{\&}md5=c0d3f2e3e67ba71061eacdac57c1b29b},
}

@Conference{Alam2015,
  author          = {Alam, M S and Vuong, S T},
  title           = {{Performance of malware classifier for android}},
  booktitle       = {2015 International Conference and Workshop on Computing and Communication, IEMCON 2015},
  year            = {2015},
  abstract        = {Smartphone devices are prevalent today with an estimate of around 2 billion shipments in 2015. Off these, the Android platform constitutes over 1 billion devices. Android also happens to be the most vulnerable platform among smartphone devices. In this paper we perform a Random Forest Classification on Android feature dataset to measure the reliability of behaviour analysis. We perform comparison between performance of the algorithm as its parameters are changed. We conduct a 10-fold cross validation and also perform test with a separate training set and validation set. We compare to see if use of SMOTE algorithm to generate instances of the under sampled class helps in either cross validation or separate training - validation set tests. We also provide a description of the framework that can be used to actively monitor Android devices by running a service on the device. According to our evaluation, a 10 fold cross validation gives a 96.40 percent correct result using the SMOTE algorithm but drops to 81.64 percent using a validation set test. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/IEMCON.2015.7344482},
  bytitledomenico = {doubt},
  doi             = {10.1109/IEMCON.2015.7344482},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960872036{\&}doi=10.1109{\%}2FIEMCON.2015.7344482{\&}partnerID=40{\&}md5=6835f310f7f2c165b6c70f205cb6d312},
}

@Conference{Kim2009612,
  author          = {Kim, H and Choi, B and Yoon, S},
  title           = {{Performance testing based on test-driven development for mobile applications}},
  booktitle       = {Proceedings of the 3rd International Conference on Ubiquitous Information Management and Communication, ICUIMC'09},
  year            = {2009},
  pages           = {612--617},
  abstract        = {Due to the tight schedule of product development for mobile applications and lack of performance testing methods, the product-oriented performance testing that is mostly done in the end of the development shows problems such as identifying a cause of detected faults, tracking down and modifying the faults when faults occur. The importance of testing is emphasized in TDD and the automated test framework is supported for efficient software development with unit tests. In this paper, we propose the methods of performance testing based on test-driven development with regard to non-functional factors as well as functionality of software during the software development process by advancing performance testing to the development stage and introduce a testing tool that assists performance testing on software development phase. It provides automation of test case generation and test execution at unit test level. It will eventually improve the development productivity as well as the reliability and quality of mobile applications by reducing the time and cost to execute tests in the process of the entire mobile applications development and helping to detect faults. Copyright 2009 ACM.},
  annote          = {cited By 9},
  bdsk-url-1      = {http://dx.doi.org/10.1145/1516241.1516349},
  bytitledomenico = {yes},
  doi             = {10.1145/1516241.1516349},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349093096{\&}doi=10.1145{\%}2F1516241.1516349{\&}partnerID=40{\&}md5=17c2e63b7e0354264b9c6cb78cf894f5},
}

@Article{Grassi2002346,
  author          = {Grassi, V and Cortellessa, V and Mirandola, R},
  title           = {{Performance validation of mobile software architectures}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2002},
  volume          = {2459},
  pages           = {346--373},
  abstract        = {Design paradigms based on the idea of code mobility have been recently introduced, where components of an application may (autonomously or upon request) move to different locations, during the application execution. Besides, software technologies are readily available (e.g. Javabased), that provide tools to implement these paradigms. Based on mobile code paradigms and technologies, different but functionally equivalent software architectures can be defined and it is widely recognized that, in general, the adoption of a particular architecture can have a large impact on quality attributes such as modifiability, reusability, reliability, and performance. Hence, validation against specific attributes is necessary and claims for a careful planning of this activity. Within this framework, the goal of this tutorial is twofold: to provide a general methodology for the validation of software architectures, where the focus is on the transition from the modeling of software architectures to the validation of non-functional requirements; to substantiate this general methodology into the specific case of software architectures exploiting mobile code. {\textcopyright} Springer-Verlag Berlin Heidelberg 2002.},
  annote          = {cited By 2},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-23044535001%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=61226edfdf54b4a4aa94856fb44e04e6},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-23044535001{\&}partnerID=40{\&}md5=61226edfdf54b4a4aa94856fb44e04e6},
}

@Article{FANG2014205,
  author          = {Fang, Zheran and Han, Weili and Li, Yingjiu},
  title           = {{Permission based Android security: Issues and countermeasures}},
  journal         = {Computers {\&} Security},
  year            = {2014},
  volume          = {43},
  pages           = {205--218},
  issn            = {0167-4048},
  abstract        = {Android security has been a hot spot recently in both academic research and public concerns due to numerous instances of security attacks and privacy leakage on Android platform. Android security has been built upon a permission based mechanism which restricts accesses of third-party Android applications to critical resources on an Android device. Such permission based mechanism is widely criticized for its coarse-grained control of application permissions and difficult management of permissions by developers, marketers, and end-users. In this paper, we investigate the arising issues in Android security, including coarse granularity of permissions, incompetent permission administration, insufficient permission documentation, over-claim of permissions, permission escalation attack, and TOCTOU (Time of Check to Time of Use) attack. We illustrate the relationships among these issues, and investigate the existing countermeasures to address these issues. In particular, we provide a systematic review on the development of these countermeasures, and compare them according to their technical features. Finally, we propose several methods to further mitigate the risk in Android security.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404814000261},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2014.02.007},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2014.02.007},
  keywords        = {Access control, Granularity of access control, Over-claim of permission, Permission based security, Permission escalation attack, Policy administration,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404814000261},
}

@Article{CALLEJA2018113,
  author          = {Calleja, Alejandro and Mart{\'{i}}n, Alejandro and Men{\'{e}}ndez, H{\'{e}}ctor D and Tapiador, Juan and Clark, David},
  title           = {{Picking on the family: Disrupting android malware triage by forcing misclassification}},
  journal         = {Expert Systems with Applications},
  year            = {2018},
  volume          = {95},
  pages           = {113--126},
  issn            = {0957-4174},
  abstract        = {Machine learning classification algorithms are widely applied to different malware analysis problems because of their proven abilities to learn from examples and perform relatively well with little human input. Use cases include the labelling of malicious samples according to families during triage of suspected malware. However, automated algorithms are vulnerable to attacks. An attacker could carefully manipulate the sample to force the algorithm to produce a particular output. In this paper we discuss one such attack on Android malware classifiers. We design and implement a prototype tool, called IagoDroid, that takes as input a malware sample and a target family, and modifies the sample to cause it to be classified as belonging to this family while preserving its original semantics. Our technique relies on a search process that generates variants of the original sample without modifying their semantics. We tested IagoDroid against RevealDroid, a recent, open source, Android malware classifier based on a variety of static features. IagoDroid successfully forces misclassification for 28 of the 29 representative malware families present in the DREBIN dataset. Remarkably, it does so by modifying just a single feature of the original malware. On average, it finds the first evasive sample in the first search iteration, and converges to a 100{\%} evasive population within 4 iterations. Finally, we introduce RevealDroid*, a more robust classifier that implements several techniques proposed in other adversarial learning domains. Our experiments suggest that RevealDroid* can correctly detect up to 99{\%} of the variants generated by IagoDroid.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0957417417307881},
  bdsk-url-2      = {https://doi.org/10.1016/j.eswa.2017.11.032},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.eswa.2017.11.032},
  keywords        = {Adversarial learning, Genetic algorithms, Iagodroid,Malware classification},
  url             = {http://www.sciencedirect.com/science/article/pii/S0957417417307881},
}

@Conference{Buhov2016297,
  author          = {Buhov, D and Huber, M and Merzdovnik, G and Weippl, E},
  title           = {{Pin it! Improving Android network security at runtime}},
  booktitle       = {2016 IFIP Networking Conference (IFIP Networking) and Workshops, IFIP Networking 2016},
  year            = {2016},
  pages           = {297--305},
  abstract        = {Smartphones are increasingly used worldwide and are now an essential tool for our everyday tasks. These tasks are supported by smartphone applications (apps) which commonly rely on network communication to provide a certain utility such as online banking. From a security and privacy point of view a properly secured (encrypted) communication channel is important in order to protect sensitive information against passive and active attacks. Previous research outlined that developers often fail to implement proper certificate validation in their custom SSL/TLS implementations and thus fail to secure the network communication. Previous research however proposed solutions for developers and not for the affected users. This global growth introduced drastic changes to the network utilization. In this paper we discuss this issue on the basis of Android apps. We analyzed over 50,000 Android apps, collected during two consecutive years, regarding the correct use of SSL/TLS protocols. Furthermore, we discuss the current situation. We propose dynamic certificate pinning, a device-based solution that overcomes the problem of broken SSL/TLS implementations in Android apps. To the best of our knowledge, we are the first to solve this problem by combining established techniques such as certificate pinning with dynamic instrumentation techniques to tackle one of the major security challenges in the network communication of smartphone applications. {\textcopyright} 2016 IFIP.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1109/IFIPNetworking.2016.7497238},
  bytitledomenico = {doubt},
  doi             = {10.1109/IFIPNetworking.2016.7497238},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84982273797{\&}doi=10.1109{\%}2FIFIPNetworking.2016.7497238{\&}partnerID=40{\&}md5=3b2e48a6f155ada6c0942d1d2bdb9ab9},
}

@Article{JIN201786,
  author          = {Jin, Hao and Yan, Shidong and Zhao, Chenglin and Liang, Dong},
  title           = {{PMC2O: Mobile cloudlet networking and performance analysis based on computation offloading}},
  journal         = {Ad Hoc Networks},
  year            = {2017},
  volume          = {58},
  pages           = {86--98},
  issn            = {1570-8705},
  abstract        = {The increase of smart mobile device (SMD) results in explosive growth in mobile traffic and provokes mobile users to leverage more and more compute-intensive applications through SMD. Framework of seamless mobile application execution and networking based on edge computing resources is proved to be one of the promising trends in future mobile Internet. Focusing on networking of Ad hoc cloudlet, this paper proposed a dynamic cloudlet self-networking framework based on component offloading (PMC2O). Taking node mobility into account, dynamic cloudlet behaviour is investigated, and an optimized allocation algorithm called SA-UM is presented to reduce the complexity of resolution space on component allocation algorithm. Proactive Remove decision algorithm based on Node Resource Cooperative Sharing Degree (PRDA-NRCSD) is put forward to improve user experience and optimize the load balancing of a mobile cloudlet.},
  annote          = {Hybrid Wireless Ad Hoc Networks},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1570870516303080},
  bdsk-url-2      = {https://doi.org/10.1016/j.adhoc.2016.11.006},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.adhoc.2016.11.006},
  keywords        = {Cloudlet, Computation offloading, Networking,Hybrid ad hoc network},
  url             = {http://www.sciencedirect.com/science/article/pii/S1570870516303080},
}

@Article{Costa2017407,
  author          = {Costa, G and Sinigaglia, F and Carbone, R},
  title           = {{PolEnA: Enforcing fine-grained permission policies in android}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10489 LNCS},
  pages           = {407--414},
  abstract        = {In this paper we present PolEnA, an extension of the Android Security Framework (ASF). PolEnA enables a number of features that are not currently provided by the ASF. Among them, PolEnA allows for the definition of fine-grained security policies and their dynamic verification. The runtime enforcement of the policies is supported by a state-of-the-art SAT solver. One of the main features of our approach is the low invasiveness as it does not require modifications to the operating system. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-66284-8_34},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-66284-8_34},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029485146{\&}doi=10.1007{\%}2F978-3-319-66284-8{\_}34{\&}partnerID=40{\&}md5=35d5f617bf9c842799f0d18017cf2858},
}

@Conference{Li2015195,
  author          = {Li, L and Allix, K and Li, D and Bartel, A and Bissyand{\'{e}}, T F and Klein, J},
  title           = {{Potential Component Leaks in Android Apps: An Investigation into a New Feature Set for Malware Detection}},
  booktitle       = {Proceedings - 2015 IEEE International Conference on Software Quality, Reliability and Security, QRS 2015},
  year            = {2015},
  pages           = {195--200},
  abstract        = {We discuss the capability of a new feature set for malware detection based on potential component leaks (PCLs). PCLs are defined as sensitive data-flows that involve Android inter-component communications. We show that PCLs are common in Android apps and that malicious applications indeed manipulate significantly more PCLs than benign apps. Then, we evaluate a machine learning-based approach relying on PCLs. Experimental validations show high performance for identifying malware, demonstrating that PCLs can be used for discriminating malicious apps from benign apps. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 6},
  bdsk-url-1      = {http://dx.doi.org/10.1109/QRS.2015.36},
  bytitledomenico = {yes},
  doi             = {10.1109/QRS.2015.36},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962109836{\&}doi=10.1109{\%}2FQRS.2015.36{\&}partnerID=40{\&}md5=1726b836ca11706aab17602fd990dfcc},
}

@Conference{Gallingani2015155,
  author          = {Gallingani, D and Gjomemo, R and Venkatakrishnan, V N and Zanero, S},
  title           = {{Practical exploit generation for intent message vulnerabilities in android}},
  booktitle       = {CODASPY 2015 - Proceedings of the 5th ACM Conference on Data and Application Security and Privacy},
  year            = {2015},
  pages           = {155--157},
  abstract        = {Android's Inter-Component Communication (ICC) mechanism strongly relies on Intent messages. Unfortunately, due to the lack of message origin verification in Intents, application security completely relies on the programmer's skill and attention. In this paper, we advance the state of the art by developing a method to automatically detect potential vulnerabilities and, most importantly, demonstrate whether they can be exploited or not. To this end, we adopt a formal approach to automatically produce malicious payloads that can trigger dangerous behavior in vulnerable applications. We test our methods on a representative sample of applications, and we find that 29 out of 64 tested applications are potentially vulnerable, while 26 of them are automatically proven to be exploitable. Copyright {\textcopyright} 2015 ACM.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2699026.2699132},
  bytitledomenico = {yes},
  doi             = {10.1145/2699026.2699132},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928151614{\&}doi=10.1145{\%}2F2699026.2699132{\&}partnerID=40{\&}md5=a3b2b65d0b187c4572d669764f779c3c},
}

@InProceedings{7579768,
  author          = {Bagheri, H and Sadeghi, A and Jabbarvand, R and Malek, S},
  title           = {{Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android}},
  booktitle       = {2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
  year            = {2016},
  pages           = {514--525},
  abstract        = {As the dominant mobile computing platform, Android has become a prime target for cyber-security attacks. Many of these attacks are manifested at the application level, and through the exploitation of vulnerabilities in apps downloaded from the popular app stores. Increasingly, sophisticated attacks exploit the vulnerabilities in multiple installed apps, making it extremely difficult to foresee such attacks, as neither the app developers nor the store operators know a priori which apps will be installed together. This paper presents an approach that allows the end-users to safeguard a given bundle of apps installed on their device from such attacks. The approach, realized in a tool, called SEPAR, combines static analysis with lightweight formal methods to automatically infer security-relevant properties from a bundle of apps. It then uses a constraint solver to synthesize possible security exploits, from which fine-grained security policies are derived and automatically enforced to protect a given device. In our experiments with over 4,000 Android apps, SEPAR has proven to be highly effective at detecting previously unknown vulnerabilities as well as preventing their exploitation.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/DSN.2016.53},
  bytitledomenico = {doubt},
  doi             = {10.1109/DSN.2016.53},
  issn            = {2158-3927},
  keywords        = {Android (operating system);formal specification;formal verification;mobile computing;program diagnostics;security of data;formal synthesis;security policies automatic enforcement;mobile computing platform;cyber-security attacks;sophisticated attacks;SEPAR;static analysis;lightweight formal methods;security-relevant properties;constraint solver;Android apps;vulnerabilities detection;Security;Androids;Humanoid robots;Smart phones;Software;Analytical models;Metals},
}

@Conference{Titze20151136,
  author          = {Titze, D and Sch{\"{u}}tte, J},
  title           = {{Preventing library spoofing on android}},
  booktitle       = {Proceedings - 14th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2015},
  year            = {2015},
  volume          = {1},
  pages           = {1136--1141},
  abstract        = {Dynamic loading of libraries is a widely used technique in Android applications. But including and executing external library code does not only have benefits, it can have severe detrimental security implications for the application and the user. In this paper we explain the mechanisms of loading external library code into an Android application and discuss resulting security implications. Since an attacker can easily impersonate libraries if the application does not perform the necessary verification, loading such code can introduce severe security problems. As a remedy, we present how external code can be verified and since currently available application often do not perform such verification, we introduce a novel way to enforce this verification. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/Trustcom.2015.494},
  bytitledomenico = {doubt},
  doi             = {10.1109/Trustcom.2015.494},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84967153594{\&}doi=10.1109{\%}2FTrustcom.2015.494{\&}partnerID=40{\&}md5=8eb7e783a2e93c5552529e769786624f},
}

@Article{ISI:000383055100004,
  author          = {Qian, Ju and Zhou, Di},
  title           = {{Prioritizing Test Cases for Memory Leaks in Android Applications}},
  journal         = {Journal of Computer Science and Technology},
  year            = {2016},
  volume          = {31},
  number          = {5},
  pages           = {869--882},
  issn            = {1000-9000},
  abstract        = {Mobile applications usually can only access limited amount of memory. Improper use of the memory can cause memory leaks, which may lead to performance slowdowns or even cause applications to be unexpectedly killed. Although a large body of research has been devoted into the memory leak diagnosing techniques after leaks have been discovered, it is still challenging to find out the memory leak phenomena at first. Testing is the most widely used technique for failure discovery. However, traditional testing techniques are not directed for the discovery of memory leaks. They may spend lots of time on testing unlikely leaking executions and therefore can be inefficient. To address the problem, we propose a novel approach to prioritize test cases according to their likelihood to cause memory leaks in a given test suite. It firstly builds a prediction model to determine whether each test can potentially lead to memory leaks based on machine learning on selected code features. Then, for each input test case, we partly run it to get its code features and predict its likelihood to cause leaks. The most suspicious test cases will be suggested to run at first in order to reveal memory leak faults as soon as possible. Experimental evaluation on several Android applications shows that our approach is effective. {\textcopyright} 2016, Springer Science+Business Media New York.},
  annote          = {From Duplicate 2 (Prioritizing Test Cases for Memory Leaks in Android Applications - Qian, J; Zhou, D) cited By 5},
  bdsk-url-1      = {http://dx.doi.org/10.1007/s11390-016-1670-2},
  bytitledomenico = {doubt},
  doi             = {10.1007/s11390-016-1670-2},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84984868155{\&}doi=10.1007{\%}2Fs11390-016-1670-2{\&}partnerID=40{\&}md5=d5d8baaadff61544bc7e327737b51ab9},
}

@Article{SONG2018663,
  author          = {Song, Jun and Gao, Kun and Shen, Xinyang and Qi, Xiaotian and Liu, Rui and Choo, Kim-Kwang Raymond},
  title           = {{QRFence: A flexible and scalable QR link security detection framework for Android devices}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {88},
  pages           = {663--674},
  issn            = {0167-739X},
  abstract        = {Android security is an ongoing topic of interest to both the research community and industry, particularly as the mobile threat landscape evolves. A threat that has yet to be resolved is malicious link dissemination via QR codes, and such codes are widely used by mobile users in countries such as China. Thus, this paper proposes a threat-oriented QR malicious link detection framework, QRFence, based on a novel machine learning-based link threat-degree evaluation model. Specifically, QRFence comprises a QR malicious link detection scheme and an integrated permission detection scheme, and provides the following properties: multiple classification algorithms, extensive training features and various permission combinations. The proposed framework is independent of the security detection plugin, and performs threat evaluation on the QR links during decoding; therefore, allowing users to understand potential threats of malicious links on-the-fly. Findings from our evaluations indicate that the average accuracy rate of this proposed QR link detection framework is 93.20{\%}.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X17324160},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2018.05.082},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.future.2018.05.082},
  keywords        = {Android security, Machine learning, Malicious link, Threat degree,QR code},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X17324160},
}

@Conference{Goel20163,
  author          = {Goel, U and Espeland, J and Kanewala, U and Wittie, M P},
  title           = {{Quality assurance of a mobile network measurement testbed through systematic software testing}},
  booktitle       = {25th International Conference on Software Engineering and Data Engineering, SEDE 2016},
  year            = {2016},
  pages           = {3--10},
  abstract        = {The popularity of innovative mobile applications that offer services such as Web browsing, video streaming, online gaming, and collaborative communication puts utmost pressure on mobile application developers to ensure a high quality user experience. As such, the research and development communities have developed several networking testbeds that measure the performance of application traffic in production cellular networks. In this paper, we evaluate the quality of the source code of one of the mobile network measurement testbeds (MITATE) using multiple software testing techniques. Our extensive testing experience with MITATE's source code indicates that network measurement testbeds are complex in their functionality and require multiple software components to interact with each other for any given operation. We demonstrate that using multiple testing techniques results in different types of issues with the code under test. Finally, based on our results, we make changes to MITATE's source code and argue that MITATE, in production, offers high reliability and accuracy in executing network experiments. Copyright ISCA, SEDE 2016.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991494458%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=a040a07b9f009fdc8981253faeb0c99f},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991494458{\&}partnerID=40{\&}md5=a040a07b9f009fdc8981253faeb0c99f},
}

@Conference{Backes2016129,
  author          = {Backes, M and Bugiel, S and Derr, E and Gerling, S and Hammer, C},
  title           = {{R-Droid: Leveraging android app analysis with static slice optimization}},
  booktitle       = {ASIA CCS 2016 - Proceedings of the 11th ACM Asia Conference on Computer and Communications Security},
  year            = {2016},
  pages           = {129--140},
  abstract        = {Today's feature-rich smartphone apps intensively rely on access to highly sensitive (personal) data. This puts the user's privacy at risk of being violated by overly curious apps or libraries (like advertisements). Central app markets conceptually represent a first line of defense against such invasions of the user's privacy, but unfortunately we are still lacking full support for automatic analysis of apps' internal data flows and supporting analysts in statically assessing apps' behavior. In this paper we present a novel slice-optimization approach to leverage static analysis of Android applications. Building on top of precise application lifecycle models, we employ a slicing-based analysis to generate data-dependent statements for arbitrary points of interest in an application. As a result of our optimization, the produced slices are, on average, 49{\%} smaller than standard slices, thus facilitating code understanding and result validation by security analysts. Moreover, by re-targeting strings, our approach enables automatic assessments for a larger number of use-cases than prior work. We consolidate our improvements on statically analyzing Android apps into a tool called R-Droid and conducted a large-scale data-leak analysis on a set of 22,700 Android apps from Google Play. R-Droid managed to identify a significantly larger set of potential privacy-violating information flows than previous work, including 2,157 sensitive flows of password-flagged UI widgets in 256 distinct apps. {\textcopyright} 2016 ACM.},
  annote          = {cited By 11},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2897845.2897927},
  bytitledomenico = {doubt},
  doi             = {10.1145/2897845.2897927},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979696970{\&}doi=10.1145{\%}2F2897845.2897927{\&}partnerID=40{\&}md5=00f5b9341f6071dc084d4ec12e51bf49},
}

@InProceedings{7784627,
  author          = {Mercaldo, F and Nardone, V and Santone, A},
  title           = {{Ransomware Inside Out}},
  booktitle       = {2016 11th International Conference on Availability, Reliability and Security (ARES)},
  year            = {2016},
  pages           = {628--637},
  abstract        = {Android is currently the most widely used mobile environment. This trend encourages malware writers to develop specific attacks targeting this platform with threats designed to covertly collect data or financially extort victims, the so-called ransomware. In this paper we use formal methods, in particular model checking, to automatically dissect ransomware samples. Starting from manual inspection of few samples, we define a set of rule in order to check whether the behaviours we find are representative of ransomware functionalities.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ARES.2016.35},
  bytitledomenico = {yes},
  doi             = {10.1109/ARES.2016.35},
  keywords        = {formal verification;invasive software;mobile computing;smart phones;ransomware functionality;Android;mobile environment;malware;formal method;model checking;Malware;Smart phones;Java;Mobile communication;Model checking;Androids;Humanoid robots;formal methods;ransomware;security;malware;Android},
}

@InProceedings{ISI:000379297600014,
  author          = {Mercaldo, Francesco and Nardone, Vittoria and Santone, Antonella and Visaggio, Corrado Aaron},
  title           = {{Ransomware Steals Your Phone. Formal Methods Rescue It}},
  booktitle       = {FORMAL TECHNIQUES FOR DISTRIBUTED OBJECTS, COMPONENTS, AND SYSTEMS (FORTE 2016)},
  year            = {2016},
  editor          = {{Albert, E and Lanese, I}},
  volume          = {9688},
  series          = {Lecture Notes in Computer Science},
  pages           = {212--221},
  organization    = {IFIP WG 6 1; Fdn Res {\&} Technol, Inst Comp Sci; Univ Ioannina},
  abstract        = {Ransomware is a recent type of malware which makes inaccessible the
files or the device of the victim. The only way to unlock the infected
device or to have the keys for decrypting the files is to pay a ransom
to the attacker. Commercial solutions for removing ransomware and
restoring the infected devices and files are ineffective, since this
malware uses a very robust form of asymmetric cryptography and erases
shadow copies and recovery points of the operating system. Literature
does not count many solutions for effectively detecting and blocking
ransomware and, at the best knowledge of the authors, formal methods
were never applied to identify ransomware. In this paper we propose a
methodology based on formal methods that is able to detect the
ransomware and to identify in the malware's code the instructions that
implement the characteristic instructions of the ransomware. The results
of the experimentation are strongly encouraging and suggest that the
proposed methodology could be the right way to follow for developing
commercial solutions that could successful intercept the ransomware and
blocking the infections it provokes.},
  annote          = {36th IFIP WG 6.1 International Conference on Formal Techniques for Distributed Objects, Components and Systems(FORTE) held as part of the 11th International Federated Conference on Distributed Computing Techniques (DisCoTec), Heraklion, GREECE, JUN 05-07, 2016},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-39570-8_14},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-39570-8_14},
  isbn            = {978-3-319-39570-8; 978-3-319-39569-2},
  issn            = {0302-9743},
}

@Article{DIFILIPPO2016S42,
  author          = {DiFilippo, Kristen and Andrade, J and Huang, W H and Chapman-Novakofski, K},
  title           = {{Reliability Testing of a Mobile App Quality Assessment Tool}},
  journal         = {Journal of Nutrition Education and Behavior},
  year            = {2016},
  volume          = {48},
  number          = {7, Supplement},
  pages           = {S42},
  issn            = {1499-4046},
  abstract        = {Objective: Although the engagement of peer researchers
(PRs) improves representation of marginalized groups in
community-based research (CBR), there is limited data
that critically examines peer research in practice. As part
of an investigation of food insecurity and paternal incarceration, we explored the processes and challenges of a
research collaboration that included PRs. Key learning
points were documented to help shape future best practices.
Design, Setting, and Participants: Two PRs (formerly
incarcerated father and wife of an incarcerated father) were
recruited through community partners to be part of a
research team (n¼10) examining food insecurity and
paternal incarceration. The PRs helped gather and interpret individual and focus group data. Case study methodology was employed to examine challenges associated
with the adopted PR model.
Outcome Measures and Analysis: Data from multiple
sources (e.g., field notes, minutes, debriefings) were
analyzed to explore contextual factors influencing the PR
collaboration. Lessons learned were reported in the final
interpretive phase.
Results: Three key challenges were identified: balancing
project requirements (e.g., budget, time constraints) with
PR needs (e.g., support when complex feelings emerged);
building authentic horizontal relationships; and utilizing
the study’s outputs to meet both academic and community needs.
Conclusions and Implications: To address challenges
associated with PR approaches, work environments are
needed that engage PRs early in the research process, provide in-depth training and genuine support, and embrace
flexibility and critical reflexivity among all team members.
Reciprocity-based relationships with opportunities for
reflection, communication, and accommodation appear
critical to PR approaches in CBR},
  annote          = {SNEB 2016 Annual Conference Proceedings},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1499404616302251},
  bdsk-url-2      = {https://doi.org/10.1016/j.jneb.2016.04.114},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jneb.2016.04.114},
  url             = {http://www.sciencedirect.com/science/article/pii/S1499404616302251},
}

@Article{Jang2009168,
  author          = {Jang, S and Lee, E},
  title           = {{Reliable mobile application modeling based on open API}},
  journal         = {Communications in Computer and Information Science},
  year            = {2009},
  volume          = {59 CCIS},
  pages           = {168--175},
  abstract        = {Today, the expectations placed on the mobile environment is getting high to the point that users want access to the internet at any time and in any place, exceeding functionality of simple voice chat and SMS to include search, service, and blogging. Amidst this kind of change, big companies such as Microsoft, Symbian, Google, and Apple are jumping into the mobile platform market, and open platforms and open APIs are being introduced left and right. In step with this, countless applications are being developed using open APIs. Open APIs allow developers to develop services closely tied to the device more easily. However, generally there are many difficulties when constraints from application requirements are considered in the design stage when developing applications using open APIs. In this paper, constraints when using open APIs in the modeling stage are defined, and code generation technique for which reliability verification through an appropriate model is possible is proposed. By verifying the reliability by applying the proposed methodology to existing applications developed using open APIs, the proposed methodology was validated. {\textcopyright} 2009 Springer-Verlag.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-10619-4_21},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-642-10619-4_21},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-78049410470{\&}doi=10.1007{\%}2F978-3-642-10619-4{\_}21{\&}partnerID=40{\&}md5=508cd404bbc815746a909d8e439fca92},
}

@Article{GURULIAN2018537,
  author          = {Gurulian, Iakovos and Markantonakis, Konstantinos and Cavallaro, Lorenzo and Mayes, Keith},
  title           = {{Reprint of ``You can't touch this: Consumer-centric android application repackaging detection''}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {80},
  pages           = {537--545},
  issn            = {0167-739X},
  abstract        = {Application repackaging is a widely used method for malware distribution, revenue stealing and piracy. Repackaged applications are modified versions of original applications, that can potentially target large audiences based on the original application's popularity. In this paper, we propose an approach for detecting repackaged applications. Our approach takes advantage of the attacker's reluctance to significantly alter the elements that characterise an application without notably impacting the application's distribution. These elements include the application's name and icon. The detection is initiated from the client side, prior to an application's installation, making it application store agnostic. Our experimental results show that detection based on our algorithm is effective and efficient.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X17325451},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2017.11.011},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.future.2017.11.011},
  keywords        = {Application repackaging, Effectiveness analysis, Electronic fraud, User privacy, User-centric security,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X17325451},
}

@InProceedings{8337376,
  author          = {Zhou, Z and Sun, C and Lu, J and f. Lv},
  title           = {{Research and Implementation of Mobile Application Security Detection Combining Static and Dynamic}},
  booktitle       = {2018 10th International Conference on Measuring Technology and Mechatronics Automation (ICMTMA)},
  year            = {2018},
  pages           = {243--247},
  month           = {feb},
  abstract        = {With the popularity of the Internet and mobile intelligent terminals, the number of mobile applications is exploding. Mobile intelligent terminals trend to be the mainstream way of people's work and daily life online in place of PC terminals. Mobile application system brings some security problems inevitably while it provides convenience for people, and becomes a main target of hackers. Therefore, it is imminent to strengthen the security detection of mobile applications. This paper divides mobile application security detection into client security detection and server security detection. We propose a combining static and dynamic security detection method to detect client-side. We provide a method to get network information of server by capturing and analyzing mobile application traffic, and propose a fuzzy testing method based on HTTP protocol to detect server-side security vulnerabilities. Finally, on the basis of this, an automated platform for security detection of mobile application system is developed. Experiments show that the platform can detect the vulnerabilities of mobile application client and server effectively, and realize the automation of mobile application security detection. It can also reduce the cost of mobile security detection and enhance the security of mobile applications.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICMTMA.2018.00065},
  bytitledomenico = {yes},
  doi             = {10.1109/ICMTMA.2018.00065},
  issn            = {2157-1481},
  keywords        = {client-server systems;Internet;mobile computing;security of data;mobile intelligent terminals trend;client security detection;server security detection;mobile application traffic;mobile application client;mobile application security detection;mobile application security detection;Security;Mobile applications;Servers;Internet;Fingerprint recognition;Packaging;Engines;security detection of mobile application;security detection combining static and dynamic;capture mobile application traffic;fuzzy testing method;automated platform for security detection of mobile application system},
}

@Conference{Yang2016563,
  author          = {Yang, Y and Cai, L and Zhang, Y},
  title           = {{Research on non-authorized privilege escalation detection of android applications}},
  booktitle       = {2016 IEEE/ACIS 17th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2016},
  year            = {2016},
  pages           = {563--568},
  abstract        = {This paper briefly analyzes the security mechanism of android platform and describes permission statement and request of android application. According to android permission mechanism and its shortcoming, the android privilege escalation detection technology and attacking principle is mainly analyzed, and privilege escalation attacking model and architecture of application is put forward. Penetration testing tool Drozer is used to detect application permission. Application package and Manifest file is analyzed to obtain privilege elevation vulnerability. At the same time, sensitive combination permission is distinguished to avoid and exclude the use of malicious code. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SNPD.2016.7515959},
  bytitledomenico = {doubt},
  doi             = {10.1109/SNPD.2016.7515959},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983273937{\&}doi=10.1109{\%}2FSNPD.2016.7515959{\&}partnerID=40{\&}md5=90359558ad9ef1b912e2feb10f8f3f02},
}

@Conference{Liu2014140,
  author          = {Liu, Z and Hu, Y and Cai, L},
  title           = {{Research on software security and compatibility test for mobile application}},
  booktitle       = {4th International Conference on Innovative Computing Technology, INTECH 2014 and 3rd International Conference on Future Generation Communication Technologies, FGCT 2014},
  year            = {2014},
  pages           = {140--145},
  abstract        = {The intelligent device and mobile applications has been the growth rapidly. The mobile device and related applications has widely used increasingly. The security and compatibility concern for mobile application is mounting as well. This paper analyzed attributes of security and compatibility corresponding to mobile software testing. The software quality features for security and compatibility is given based on the software quality model. The test methods for security and compatibility are proposed according to test model and requirements for mobile applications. The relevant properties with testing techniques and methods are detailed introduced, which indicates that the test method could be effective for mobile software applications. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1109/INTECH.2014.6927764},
  bytitledomenico = {doubt},
  doi             = {10.1109/INTECH.2014.6927764},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936758363{\&}doi=10.1109{\%}2FINTECH.2014.6927764{\&}partnerID=40{\&}md5=ba44d73b26082a5dc38f4a7d0f6929d7},
}

@InProceedings{Ongkosit:2014:RAT:2661694.2661695,
  author          = {Ongkosit, Thanaporn and Takada, Shingo},
  title           = {{Responsiveness Analysis Tool for Android Application}},
  booktitle       = {Proceedings of the 2Nd International Workshop on Software Development Lifecycle for Mobile},
  year            = {2014},
  series          = {DeMobile 2014},
  pages           = {1--4},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Responsiveness is an important type of quality factor in Android application because it directly affects user experience. When the user interface thread performs lengthy operations, the user may feel that the application has become sluggish or frozen. This may lead to a negative user experience, poor review, and loss in market success. This paper proposes a static responsiveness analysis tool for Android applications to find potentially poor responsiveness defects which are difficult to detect by conventional testing methods as they are sensitive to the user environment. This tool finds responsiveness defects by discovering operations invoked in the user interface thread that may block the execution of other operations. We collect these operations according to Android developer guideline and previous related work. The proposed tool successfully found 45 potential responsiveness defects in seven open source Android applications.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2661694.2661695},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2661694.2661695},
  bytitledomenico = {doubt},
  doi             = {10.1145/2661694.2661695},
  isbn            = {978-1-4503-3225-5},
  keywords        = {Responsiveness, Static Analysis,Android App},
  url             = {http://doi.acm.org/10.1145/2661694.2661695},
}

@Article{ROMA2016173,
  author          = {Roma, Paolo and Ragaglia, Daniele},
  title           = {{Revenue models, in-app purchase, and the app performance: Evidence from Apple's App Store and Google Play}},
  journal         = {Electronic Commerce Research and Applications},
  year            = {2016},
  volume          = {17},
  pages           = {173--190},
  issn            = {1567-4223},
  abstract        = {In this paper, we empirically examine how the revenue model (paid, free, or freemium) adopted for a given app affects the app revenue performance as measured by the app daily revenue rank. We also study the impact of in-app purchase on this measure of performance. Moreover, we study how such relationships are contingent upon the distribution platform where the app is marketed as well as the type of category to which the app belongs. We test our hypotheses relying on a large sample of top grossing apps from the two major app stores, namely Apple's App Store and Google Play. Our findings reveal that in the Apple's App Store, paid and freemium models are equivalent and both are more effective than the free model in terms of app revenue performance. On the other hand, in Google Play no significant differences between paid and free revenue models emerge, whereas the freemium model is shown to be less effective even than the free model. Moreover, while in-app purchase is shown to positively influence the app revenue performance in Apple's App Store, this effect is reversed in Google Play. Finally, the type of category is also shown to influence the effects of the revenue model and in-app purchase (the latter to a lesser extent) on the app performance.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1567422316300266},
  bdsk-url-2      = {https://doi.org/10.1016/j.elerap.2016.04.007},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.elerap.2016.04.007},
  keywords        = {E-commerce, Empirical analysis, Online distribution, Revenue model,Mobile app market},
  url             = {http://www.sciencedirect.com/science/article/pii/S1567422316300266},
}

@Article{OLOUGHLIN2018,
  author          = {O'Loughlin, Kristen and Neary, Martha and Adkins, Elizabeth C and Schueller, Stephen M},
  title           = {{Reviewing the data security and privacy policies of mobile apps for depression}},
  journal         = {Internet Interventions},
  year            = {2018},
  issn            = {2214-7829},
  abstract        = {Background
Mobile apps have become popular resources for mental health support. Availability of information about developers' data security procedures for health apps, specifically those targeting mental health, has not been thoroughly investigated. If people are to use and trust these tools for their mental health, it is crucial we evaluate the transparency and quality around the data practices of these apps. The present study reviewed data security and privacy policies of mobile apps for depression.
Methods
We reviewed mobile apps retrieved from iTunes and Google Play stores in October 2017, using the term ``depression'', and evaluated the transparency of data handling procedures of those apps.
Results
We identified 116 eligible mobile phone apps. Of those, 4{\%} (5/116) received a transparency score of acceptable, 28{\%} (32/116) questionable, and 68{\%} (79/116) unacceptable. Only a minority of the apps (49{\%}) had a privacy policy. The availability of policies differed significantly by platform, with apps from iTunes more likely to have a policy than from the Google Play store. Mobile apps collecting identifiable information were significantly more likely to have a privacy policy (79{\%}) compared to those collecting only non-identifiable information (34{\%}).
Conclusion
The majority of apps reviewed were not sufficiently transparent with information regarding data security. Apps have great potential to scale mental health resources, providing resources to people unable or reluctant to access traditional face-to-face care, or as an adjunct to treatment. However, if they are to be a reasonable resource, they must be safe, secure, and responsible.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2214782918300460},
  bdsk-url-2      = {https://doi.org/10.1016/j.invent.2018.12.001},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.invent.2018.12.001},
  keywords        = {Data privacy, Mental health, Mobile apps, Review, mHealth,Depression},
  url             = {http://www.sciencedirect.com/science/article/pii/S2214782918300460},
}

@Article{DINI2018505,
  author          = {Dini, Gianluca and Martinelli, Fabio and Matteucci, Ilaria and Petrocchi, Marinella and Saracino, Andrea and Sgandurra, Daniele},
  title           = {{Risk analysis of Android applications: A user-centric solution}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {80},
  pages           = {505--518},
  issn            = {0167-739X},
  abstract        = {Android applications (apps) pose many risks to their users, e.g., by including code that may threaten user privacy or system integrity. Most of the current security countermeasures for detecting dangerous apps show some weaknesses, mainly related to users' understanding and acceptance. Hence, users would benefit from an effective but simple technique that indicates whether an app is safe or risky to be installed. In this paper, we present MAETROID (Multi-criteria App Evaluator of TRust for AndrOID), a framework to evaluate the trustworthiness of Android apps, i.e., the amount of risk they pose to users, e.g., in terms of confidentiality and integrity. MAETROID performs a multi-criteria analysis of an app at deploy-time and returns a single easy-to-understand evaluation of the app's risk level (i.e., Trusted, Medium Risk, and High Risk), aimed at driving the user decision on whether or not installing a new app. The criteria include the set of requested permissions and a set of metadata retrieved from the marketplace, denoting the app quality and popularity. We have tested MAETROID on a set of 11,000 apps both coming from Google Play and from a database of known malicious apps. The results show a good accuracy in both identifying the malicious apps and in terms of false positive rate.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X16301534},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2016.05.035},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.future.2016.05.035},
  keywords        = {Malware, Risk analysis, Usability, User experience and expectations, User-centric devices,Android security},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X16301534},
}

@Article{Liu20151865,
  author          = {Liu, C.-H. and Chen, S.-L. and Chen, H.-K.},
  title           = {{RobotDroid-A keyword-driven testing tool for android applications}},
  journal         = {Frontiers in Artificial Intelligence and Applications},
  year            = {2015},
  volume          = {274},
  pages           = {1865--1874},
  abstract        = {With Android devices become widespread, the number of Android applications has grown rapidly in recent years. Consequently, how to automate the testing of Android applications has increasingly drawn attention. However, most of Android testing tools require users to have programming skills to develop or maintain low-level test scripts and, hence, the uses of these testing tools have a steep learning curve. In order to ease the development and maintenance of Android test scripts, this paper adapts the concept of keyword-driven testing into the context of Android applications. Particularly, a test library is developed with various keywords defined to support Android keyword-driven testing. Moreover, a corresponding testing tool, called RobotDroid, is implemented to facilitate the Android keyword-driven test case development and execution. With the proposed Android test library and tool, the efforts to write test cases for Android applications can be greatly reduced. The readability, reusability, and maintainability of the Android test cases can also be effectively improved. {\textcopyright} 2015 The authors and IOS Press. All rights reserved.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.3233/978-1-61499-484-8-1865},
  bytitledomenico = {doubt},
  doi             = {10.3233/978-1-61499-484-8-1865},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84926464821{\&}doi=10.3233{\%}2F978-1-61499-484-8-1865{\&}partnerID=40{\&}md5=8bbbe6e5b46631c38b7792188c46a645},
}

@Article{DAI201798,
  author          = {Dai, Ting and Li, Xiaolei and Hassanshahi, Behnaz and Yap, Roland H C and Liang, Zhenkai},
  title           = {{RoppDroid: Robust permission re-delegation prevention in Android inter-component communication}},
  journal         = {Computers {\&} Security},
  year            = {2017},
  volume          = {68},
  pages           = {98--111},
  issn            = {0167-4048},
  abstract        = {Android is designed such that Android applications (Apps) can provide functions to each other by providing a complex inter-component communication (ICC) model. While app interactions make it convenient and easy for one app to delegate functionality to another app, it also leads to permission re-delegation among Android apps which can cause privilege escalation. One approach taken by existing work tries to mitigate privilege escalation by enforcing tightened permissions. Unfortunately, preventing privilege escalation often renders the recipient apps unusable (for example, causing the app to crash). In this work, we propose another approach to address the privilege escalation problem from Android app ICC which intends to better preserve app functionality. We propose a context specific resource virtualization to eliminate privilege escalation by taking into account the interaction of ICCs among apps. We evaluated our prototype system, RoppDroid, on real-world Android apps and showed the effectiveness in providing robust protection for those apps. Our prototype also has low performance overheads.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817300688},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.04.002},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2017.04.002},
  keywords        = {Inter-component communication, Permission re-delegation, Privilege escalation, Resource virtualization, Security,Android},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817300688},
}

@Article{Falcone201388,
  author          = {Falcone, Y and Currea, S and Jaber, M},
  title           = {{Runtime verification and enforcement for android applications with RV-droid}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2013},
  volume          = {7687 LNCS},
  pages           = {88--95},
  abstract        = {RV-Droid is an implemented framework dedicated to runtime verification (RV) and runtime enforcement (RE) of Android applications. RV-Droid consists of an Android application that interacts closely with a cloud. Running RV-Droid on their devices, users can select targeted Android applications from Google Play (or a dedicated repository) and a property. The cloud hosts third-party RV tools that are used to synthesize AspectJ aspects from the property. According to the chosen RV tool and the specification, some appropriate monitoring code, the original application and the instrumentation aspect are woven together. Weaving can occur either on the user's device or in the dedicated cloud. The woven application is then retrieved and executed on the user's device and the property is runtime verified. RV-Droid is generic and currently works with two existing runtime verification frameworks for (pure) Java programs: with Java-MOP and (partially) with RuleR. RV-Droid does not require any modification to the Android kernel and targeted applications can be retrieved off-the-shelf. We carried out several experiments that demonstrated the effectiveness of RV-Droid on monitoring (security) properties. {\textcopyright} 2013 Springer-Verlag Berlin Heidelberg.},
  annote          = {cited By 15},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-35632-2-11},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-642-35632-2-11},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872845348{\&}doi=10.1007{\%}2F978-3-642-35632-2-11{\&}partnerID=40{\&}md5=dba8c89cefcbf2020b784f97682ca252},
}

@Article{Bauer2012174,
  author          = {Bauer, A and K{\"{u}}ster, J.-C. and Vegliach, G},
  title           = {{Runtime verification meets android security}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2012},
  volume          = {7226 LNCS},
  pages           = {174--180},
  abstract        = {A dynamic security mechanism for Android-powered devices based on runtime verification is introduced, which lets users monitor the behaviour of installed applications. The general idea and a prototypical implementation are outlined, an application to real-world security threats shown, and the underlying logical foundations, relating to the employed specification formalism, sketched. {\textcopyright} 2012 Springer-Verlag.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-642-28891-3_18},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-642-28891-3_18},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859476027{\&}doi=10.1007{\%}2F978-3-642-28891-3{\_}18{\&}partnerID=40{\&}md5=d09ae366b6d03cc28da15c3792504bd6},
}

@Article{ISI:000420076400006,
  author          = {Londono, Sebastian and {Camilo Urcuqui}, Christian and {Navarro Cadavid}, Andres and {Fuentes Amaya}, Manuel and Gomez, Johan},
  title           = {{SafeCandy: System for security, analysis and validation in Android}},
  journal         = {SISTEMAS {\&} TELEMATICA},
  year            = {2015},
  volume          = {13},
  number          = {35},
  pages           = {89--102},
  issn            = {1692-5238},
  abstract        = {Android is an operating system which currently has over one billion
active users for all their mobile devices, a market impact that is
influencing an increase in the amount of information that can be
obtained from different users, facts that have motivated the development
of malicious software by cybercriminals. To solve the problems caused by
malware, Android implements a different architecture and security
controls, such as a unique user ID (UID) for each application, while an
API permits its distribution platform, Google Play applications. It has
been shown that there are ways to violate that protection, so the
developer community has been developing alternatives aimed at improving
the level of safety. This paper presents: the latest information on the
various trends and security solutions for Android, and SafeCandy, an app
proposed as a new system for analysis, validation and configuration of
Android applications that implements static and dynamic analysis with
improved ASEF. Finally, a study is included to evaluate the
effectiveness in threat detection of different malware antivirus
software for Android.},
  bdsk-url-1      = {http://dx.doi.org/10.18046/syt.v13i35.2154},
  bytitledomenico = {yes},
  doi             = {10.18046/syt.v13i35.2154},
}

@InProceedings{ISI:000450238300042,
  author          = {Xiaopeng, Li and Ning, Wang and Fei, Xiao and Fengchen, Qian and Simin, Ma},
  title           = {{Safety detection method of Android App based on Drozer}},
  booktitle       = {2018 INTERNATIONAL CONFERENCE ON SMART GRID AND ELECTRICAL AUTOMATION (ICSGEA)},
  year            = {2018},
  pages           = {170--172},
  organization    = {Central South University; Changsha Univ Sci {\&} Technol, Commun Res Inst; Hunan City Coll, Dept Urban Management; Hongkong Intelligent Computat Technol {\&} Automat Assoc},
  abstract        = {Drozer is the interactive Android security testing framework developed
by MWR Labs. According to this framework, the dynamic analysis can be
executed the actual equipment, and agent can be installed in the
equipment or the simulator, the user-input commands are send to the
agent program of Android device from server, the tool is extended by
modifying local Python files or installing modules, and then more
sophisticated, in-depth attacks on Android components are launched.
First of all, a Drozer based Android APP security detection scanning
plug-in is designed. Secondly, the software is tested by using the
attack mode, detecting whether there is SQL injection vulnerability,
rejection vulnerability, data backup vulnerability. Finally, the
interaction information between the detecting software and Drozer is
utilized, and the authoritative software security test report is
automatically generated by one key, which provides a new intelligent
method for the detection of Android software vulnerability.},
  annote          = {International Conference on Smart Grid and Electrical Automation (ICSGEA), Changsha, PEOPLES R CHINA, JUN 09-10, 2018},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSGEA.2018.00050},
  bytitledomenico = {yes},
  doi             = {10.1109/ICSGEA.2018.00050},
  isbn            = {978-1-5386-6953-2},
}

@Article{Armando2015225,
  author          = {Armando, A and Bocci, G and Chiarelli, G and Costa, G and {De Maglie}, G and Mammoliti, R and Merlo, A},
  title           = {{SAM: The static analysis module of the MAVERIC mobile app security verification platform}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2015},
  volume          = {9035},
  pages           = {225--230},
  abstract        = {The tremendous success of the mobile application paradigm is due to the ease with which new applications are uploaded by developers, distributed through the application markets (e.g. Google Play), and finally installed by the users. Yet, the very same model is causing serious security concerns, since users have no or little means to ascertain the trustworthiness of the applications they install on their devices. To protect their customers, Poste Italiane has defined the Mobile Application Verification Cluster (MAVERIC), a process for the systematic security analysis of third-party mobile apps that leverage the online services provided by the company (e.g. home banking, parcel tracking). We present SAM, a toolkit that supports this process by automating a number of operations including reverse engineering, privilege analysis, and automatic verification of security properties. We introduce the functionalities of SAM through a demonstration of the platform applied to real Android applications. {\textcopyright} Springer-Verlag Berlin Heidelberg 2015.},
  annote          = {cited By 3},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-662-46681-0_19},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-662-46681-0_19},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84926612971{\&}doi=10.1007{\%}2F978-3-662-46681-0{\_}19{\&}partnerID=40{\&}md5=33c56fb30177fb6c411ca5f707a8e322},
}

@Article{MCNEIL20161219,
  author          = {McNeil, Paul and Shetty, Sachin and Guntu, Divya and Barve, Gauree},
  title           = {{SCREDENT: Scalable Real-time Anomalies Detection and Notification of Targeted Malware in Mobile Devices}},
  journal         = {Procedia Computer Science},
  year            = {2016},
  volume          = {83},
  pages           = {1219--1225},
  issn            = {1877-0509},
  abstract        = {The ubiquitous availability of Android devices has led to increasing malicious mobile attacks targeting the Android mobile operating system. In recent times, adversaries leverage situational awareness, user and device context to create targeted malware for mobile devices. Several mobile security tools such as Mobile Sandbox, TargetDroid, and ANANAS focus on tailoring the detection schemes for individual users and suffer from scalability by analyzing individual user's activities. To the best of our knowledge, these tools do not incorporate user group profiling in their automated user-behavior driven dynamic analysis. In addition, adaptive and location-based alerts are not provided to mobile users. We propose SCREDENT: Scalable Real-time Anomalies Detection and Notification of Targeted Malware in Mobile Devices, to provide a scalable system to classify, detect, and predict targeted malware in real-time. SCREDENT incorporates behavior-triggering probabilistic models and user grouping to minimize the number of parallel dynamic analysis instances needed. SCREDENT leverages container technology to perform dynamic analysis and allow for modularity as emulation technology improves. SCREDENT uses adaptive, location-based notification principles to create a geographical fence which warn users of malicious attacks. Finally, SCREDENT provides proactive, adaptive alerts to individual users if at least one of the group members has triggered malicious activities in an application currently used by the individual.},
  annote          = {The 7th International Conference on Ambient Systems, Networks and Technologies (ANT 2016) / The 6th International Conference on Sustainable Energy Information Technology (SEIT-2016) / Affiliated Workshops},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050916302873},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2016.04.254},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.procs.2016.04.254},
  keywords        = {Android, Big Data, Container Technology, Data Analytics, Dynamic Analysis, Location-Based Notification, Machine Learning, Malware, Mobile Malware Detection, Mobile Security, Modeling,Cloud Computing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050916302873},
}

@InProceedings{Coppola:2017:SGT:3127005.3127008,
  author          = {Coppola, Riccardo and Morisio, Maurizio and Torchiano, Marco},
  title           = {{Scripted GUI Testing of Android Apps: A Study on Diffusion, Evolution and Fragility}},
  booktitle       = {Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering},
  year            = {2017},
  series          = {PROMISE},
  pages           = {22--32},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Background. Evidence suggests that mobile applications are not thoroughly tested as their desktop counterparts. In particular GUI testing is generally limited. Like web-based applications, mobile apps suffer from GUI test fragility, i.e. GUI test classes failing due to minor modifications in the GUI, without the application functionalities being altered.

Aims. The objective of our study is to examine the diffusion of GUI testing on Android, and the amount of changes required to keep test classes up to date, and in particular the changes due to GUI test fragility. We define metrics to characterize the modifications and evolution of test classes and test methods, and proxies to estimate fragility-induced changes.

Method. To perform our experiments, we selected six widely used open-source tools for scripted GUI testing of mobile applications previously described in the literature. We have mined the repositories on GitHub that used those tools, and computed our set of metrics.

Results. We found that none of the considered GUI testing frameworks achieved a major diffusion among the open-source Android projects available on GitHub. For projects with GUI tests, we found that test suites have to be modified often, specifically 5%--10% of developers' modified LOCs belong to tests, and that a relevant portion (60% on average) of such modifications are induced by fragility.

Conclusions. Fragility of GUI test classes constitute a relevant concern, possibly being an obstacle for developers to adopt automated scripted GUI tests. This first evaluation and measure of fragility of Android scripted GUI testing can constitute a benchmark for developers, and the basis for the definition of a taxonomy of fragility causes, and actionable guidelines to mitigate the issue.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3127005.3127008},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3127005.3127008},
  bytitledomenico = {doubt},
  doi             = {10.1145/3127005.3127008},
  isbn            = {978-1-4503-5305-2},
  keywords        = {GUI Testing, Mobile Development, Software Evolution, Software Maintenance,Automated Software Testing},
  url             = {http://doi.acm.org/10.1145/3127005.3127008},
}

@InProceedings{Chen:2017:SES:3134600.3134636,
  author          = {Chen, Lingwei and Hou, Shifu and Ye, Yanfang},
  title           = {{SecureDroid: Enhancing Security of Machine Learning-based Detection Against Adversarial Android Malware Attacks}},
  booktitle       = {Proceedings of the 33rd Annual Computer Security Applications Conference},
  year            = {2017},
  series          = {ACSAC 2017},
  pages           = {362--372},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {With smart phones being indispensable in people's everyday life, Android malware has posed serious threats to their security, making its detection of utmost concern. To protect legitimate users from the evolving Android malware attacks, machine learning-based systems have been successfully deployed and offer unparalleled flexibility in automatic Android malware detection. In these systems, based on different feature representations, various kinds of classifiers are constructed to detect Android malware. Unfortunately, as classifiers become more widely deployed, the incentive for defeating them increases. In this paper, we explore the security of machine learning in Android malware detection on the basis of a learning-based classifier with the input of a set of features extracted from the Android applications (apps). We consider different importances of the features associated with their contributions to the classification problem as well as their manipulation costs, and present a novel feature selection method (named SecCLS) to make the classifier harder to be evaded. To improve the system security while not compromising the detection accuracy, we further propose an ensemble learning approach (named SecENS) by aggregating the individual classifiers that are constructed using our proposed feature selection method SecCLS. Accordingly, we develop a system called SecureDroid which integrates our proposed methods (i.e., SecCLS and SecENS) to enhance security of machine learning-based Android malware detection. Comprehensive experiments on the real sample collections from Comodo Cloud Security Center are conducted to validate the effectiveness of SecureDroid against adversarial Android malware attacks by comparisons with other alternative defense methods. Our proposed secure-learning paradigm can also be readily applied to other malware detection tasks.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3134600.3134636},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3134600.3134636},
  bytitledomenico = {doubt},
  doi             = {10.1145/3134600.3134636},
  isbn            = {978-1-4503-5345-8},
  keywords        = {Android Malware Detection, Machine Learning,Adversarial Attack},
  url             = {http://doi.acm.org/10.1145/3134600.3134636},
}

@Article{TANG2019257,
  author          = {Tang, Zhushou and Xue, Minhui and Meng, Guozhu and Ying, Chengguo and Liu, Yugeng and He, Jianan and Zhu, Haojin and Liu, Yang},
  title           = {{Securing android applications via edge assistant third-party library detection}},
  journal         = {Computers {\&} Security},
  year            = {2019},
  volume          = {80},
  pages           = {257--272},
  issn            = {0167-4048},
  abstract        = {Third-party library (TPL) detection in Android has been a hot topic to security researchers for a long time. A precise yet scalable detection of TPLs in applications can greatly facilitate other security activities such as TPL integrity checking, malware detection, and privacy leakage detection. Since TPLs of specific versions may exhibit their own security issues, the identification of TPL as well as its concrete version, can help assess the security of Android APPs. However in reality, existing approaches of TPL detection suffer from low efficiency for their detection algorithm to impracticable and low accuracy due to insufficient analysis data, inappropriate features, or the disturbance from code obfuscation, shrinkage, and optimization. In this paper, we present an automated approach, named PanGuard, to detect TPLs from an enormous number of Android APPs. We propose a novel combination of features including both structural and content information for packages in APPs to characterize TPLs. In order to address the difficulties caused by code obfuscation, shrinkage, and optimization, we identify the invariants that are unchanged during mutation, separate TPLs from the primary code in APPs, and use these invariants to determine the contained TPLs as well as their versions. The extensive experiments show that PanGuard achieves a high accuracy and scalability simultaneously in TPL detection. In order to accommodate to optimized TPL detection, which has not been mentioned by previous work, we adopt set analysis, which speed up the detection as a side effect. PanGuard is implemented and applied on an industrial edge computing platform, and powers the identification of TPL. Beside fast detection algorithm, the edge computing deployment architecture make the detection scalable to real-time detection on a large volume of emerging APPs. Based on the detection results from millions of Android APPs, we successfully identify over 800 TPLs with 12 versions on average. By investigating the differences amongst these versions, we identify over 10 security issues in TPLs, and shed light on the significance of TPL detection with the caused harmful impacts on the Android ecosystem.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404818311301},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2018.07.024},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.cose.2018.07.024},
  keywords        = {Edge computing, Malware detection, Mobile security, Vulnerability detection,Third-party library detection},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404818311301},
}

@Article{Kim2016259,
  author          = {Kim, H and Kim, S.-W.},
  title           = {{Securing Android In-app Billing service against automated attacks}},
  journal         = {International Journal of Security and its Applications},
  year            = {2016},
  volume          = {10},
  number          = {7},
  pages           = {259--268},
  abstract        = {In-app Billing service in Android enables the application developers sell digital content from inside the applications. To enhancing security of these applications, there have been presented security guidelines and various security techniques. However, recent automated attacks on every application in a device make the user of the device to get valuable content without paying for them. In this paper we present a novel approach to secure Android In-app Billing service against such automated attacks by detecting these attacks. Before completing the purchase, our approach performs a test to check whether there is an attempt to bypass a legitimate payment process. It is simple so as to be applied easily, and it effectively detects attacks by testing the signature verification process. With this approach, known automated attacks could be detected successfully. {\textcopyright} 2016 SERSC.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.14257/ijsia.2016.10.7.23},
  bytitledomenico = {yes},
  doi             = {10.14257/ijsia.2016.10.7.23},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983032671{\&}doi=10.14257{\%}2Fijsia.2016.10.7.23{\&}partnerID=40{\&}md5=a891d5d53b47ed0a97227748d5a3caf6},
}

@Conference{Wang2016410,
  author          = {Wang, Y and Zhang, Y and Wang, K and Yan, J},
  title           = {{Security analysis and vulnerability detection of gesture-based lock in android applications}},
  booktitle       = {Proceedings - 15th IEEE International Conference on Trust, Security and Privacy in Computing and Communications, 10th IEEE International Conference on Big Data Science and Engineering and 14th IEEE International Symposium on Parallel and Distributed Processing with Applications, IEEE TrustCom/BigDataSE/ISPA 2016},
  year            = {2016},
  pages           = {410--417},
  abstract        = {Gesture-based lock plays an important role in many Android applications to prevent unauthorized access. Unfortunately, application developers tend to abuse some features provided by Android platform and neglect their influence on the security. This may result in fatal vulnerabilities which can be exploited to bypass gesture-based lock. In this paper, we focus on the vulnerabilities of gesture-based locks in Android applications and propose a dynamic testing tool named Lock-Breaker to detect them. We test 63 popular applications from android markets using Lock-Breaker. The results show that 28 out of these 63 applications are facing security threats, and 13 of the 28 applications have obvious vulnerabilities. In the end, we make some suggestions on defence for vulnerabilities in gesture-based locks to help enhance the security of android applications. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TrustCom.2016.0091},
  bytitledomenico = {yes},
  doi             = {10.1109/TrustCom.2016.0091},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015253608{\&}doi=10.1109{\%}2FTrustCom.2016.0091{\&}partnerID=40{\&}md5=d0b6340673ad08d938d62046f17105a7},
}

@Conference{Zhang2017421,
  author          = {Zhang, Q and Liang, Z},
  title           = {{Security analysis of bluetooth low energy based smart wristbands}},
  booktitle       = {Proceedings of 2017 2nd International Conference on Frontiers of Sensors Technologies, ICFST 2017},
  year            = {2017},
  volume          = {2017-January},
  pages           = {421--425},
  abstract        = {Wearable devices are being more popular in our daily life. Especially, smart wristbands are booming in the market recently, which can be used to monitor health status, track fitness data, or even do medical tests, etc. For this reason, smart wristbands can obtain a lot of personal data. Hence, users and manufacturers should pay more attention to the security aspects of smart wristbands. However, we have found that some Bluetooth Low Energy based smart wristbands have very weak or even no security protection mechanism, therefore, they are vulnerable to replay attacks, man-in-The-middle attacks, brute-force attacks, Denial of Service (DoS) attacks, etc. We have investigated four different popular smart wristbands and a smart watch. Among them, only the smart watch is protected by some security mechanisms while the other four smart wristbands are not protected. In our experiments, we have also figured out all the message formats of the controlling commands of these smart wristbands and developed an Android software application as a testing tool. Powered by the resolved command formats, this tool can directly control these wristbands, and any other wristbands of these four models, without using the official supporting applications. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICFST.2017.8210548},
  bytitledomenico = {no},
  doi             = {10.1109/ICFST.2017.8210548},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047839128{\&}doi=10.1109{\%}2FICFST.2017.8210548{\&}partnerID=40{\&}md5=84dde8c0975c6c6797535a0fe8fd60b8},
}

@Article{OWOH2018,
  author          = {Owoh, Nsikak P and Singh, M Mahinderjit},
  title           = {{Security analysis of mobile crowd sensing applications}},
  journal         = {Applied Computing and Informatics},
  year            = {2018},
  issn            = {2210-8327},
  abstract        = {The proliferation of mobile phones with integrated sensors makes large scale sensing possible at low cost. During mobile sensing, data mostly contain sensitive information of users such as their real-time location. When such information are not effectively secured, users' privacy can be violated due to eavesdropping and information disclosure. In this paper, we demonstrated the possibility of unauthorized access to location information of a user during sensing due to the ineffective security mechanisms in most sensing applications. We analyzed 40 apps downloaded from Google Play Store and results showed a 100{\%} success rate in traffic interception and disclosure of sensitive information of users. As a countermeasure, a security scheme which ensures encryption and authentication of sensed data using Advanced Encryption Standard 256-Galois Counter Mode was proposed. End-to-end security of location and motion data from smartphone sensors are ensured using the proposed security scheme. Security analysis of the proposed scheme showed it to be effective in protecting Android based sensor data against eavesdropping, information disclosure and data modification.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2210832718302473},
  bdsk-url-2      = {https://doi.org/10.1016/j.aci.2018.10.002},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.aci.2018.10.002},
  keywords        = {Advanced encryption standard, Authentication, Encryption, Galois counter mode, Secure socket layer,Dynamic analysis},
  url             = {http://www.sciencedirect.com/science/article/pii/S2210832718302473},
}

@InProceedings{7849630,
  author          = {Candra, A and Kurniawan, Y and Rhee, K.-H.},
  title           = {{Security analysis testing for secure instant messaging in Android with study case: Telegram}},
  booktitle       = {2016 6th International Conference on System Engineering and Technology (ICSET)},
  year            = {2016},
  pages           = {92--96},
  abstract        = {Instant messaging activity plays a major role in our life. With increasing usage of mobile phones and instant messaging users, vulnerabilities against these devices raised exponentially. In this paper, we propose a security analysis testing for secure instant messaging apps in Android which is designed using a threat analysis, considering possible attack scenarios and vulnerabilities specific to the domain. To demonstrate the testing methodology, we subsequently analyze one of the popular instant messaging that promises security and privacy for its users, Telegram. Therefore, we give detailed discussion about vulnerabilities that help developer to design for further secure application developments. {\textcopyright} 2016 IEEE.},
  annote          = {From Duplicate 1 (Security analysis testing for secure instant messaging in Android with study case: Telegram - Candra, A; Kurniawan, Y; Rhee, K.-H.) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/FIT.2016.7857545},
  bytitledomenico = {yes},
  doi             = {10.1109/FIT.2016.7857545},
  issn            = {2470-640X},
  keywords        = {,Android,Android (operating system),Androids,Cryptography,Humanoid robots,Instant Messaging,Instant messaging,Security,Servers,Telegram,Testing,data privacy,electronic messaging,instant messaging apps,mobile computing,privacy,program testing,security analysis testing,security of data,threat analysis},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85016079908{\&}doi=10.1109{\%}2FFIT.2016.7857545{\&}partnerID=40{\&}md5=112dd1ef0e2f69c1218e865656cd4119},
}

@InProceedings{8434938,
  author          = {Ermakov, A D and Prokopenko, S A and Yevtushenko, N V},
  title           = {{Security Checking Experiments with Mobile Services}},
  booktitle       = {2018 19th International Conference of Young Specialists on Micro/Nanotechnologies and Electron Devices (EDM)},
  year            = {2018},
  pages           = {139--141},
  abstract        = {In this paper, we continue to investigate the problem of software security. The problem is to check if software under test has some vulnerabilities such as exceeding of admissible values of input/output parameters or internal variables or can reach states where the software (service) behavior is not defined. We illustrate by experiments that the well-known verifier Java Path Finder (JPF) can be utilized for this purpose. We apply JPF-mobile to Android applications and results of security checking experiments are presented.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/EDM.2018.8434938},
  bytitledomenico = {yes},
  doi             = {10.1109/EDM.2018.8434938},
  issn            = {2325-419X},
  keywords        = {Java;mobile computing;program verification;security of data;software behavior;security checking experiments;mobile services;software security;input/output parameters;Java Path Finder verifier;Androids;Humanoid robots;Security;Java;Software;Automata;Electron devices;JPF-mobile;security checking},
}

@Article{ARMANDO2014247,
  author          = {Armando, Alessandro and Merlo, Alessio and Verderame, Luca},
  title           = {{Security considerations related to the use of mobile devices in the operation of critical infrastructures}},
  journal         = {International Journal of Critical Infrastructure Protection},
  year            = {2014},
  volume          = {7},
  number          = {4},
  pages           = {247--256},
  issn            = {1874-5482},
  abstract        = {An increasing number of attacks by mobile malware have begun to target critical infrastructure assets. Since malware attempts to defeat the security mechanisms provided by an operating system, it is of paramount importance to understand the strengths and weaknesses of the security frameworks of mobile device operating systems such as Android. Many recently discovered vulnerabilities suggest that security issues may be hidden in the cross-layer interplay between the Android layers and the underlying Linux kernel. This paper presents an empirical security evaluation of the interactions between Android layers. The experiments indicate that the Android Security Framework does not discriminate between callers of invocations to the Linux kernel, thereby enabling Android applications to directly interact with the kernel. This paper shows how this trait allows malware to adversely affect the security of mobile devices by exploiting previously unknown vulnerabilities unveiled by analyses of the Android interplay. The impact of the resulting attacks on critical infrastructures is discussed. Finally, an enhancement to the Android Security Framework is proposed for detecting and preventing direct kernel invocations by applications, thereby dramatically reducing the impact of malware.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1874548214000626},
  bdsk-url-2      = {https://doi.org/10.1016/j.ijcip.2014.10.002},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.ijcip.2014.10.002},
  keywords        = {Android, Critical infrastructure, Cross-layer interplay, Malware, Security,Mobile devices},
  url             = {http://www.sciencedirect.com/science/article/pii/S1874548214000626},
}

@InProceedings{7840115,
  author          = {Shaukat, K and Faisal, A and Masood, R and Usman, A and Shaukat, U},
  title           = {{Security quality assurance through penetration testing}},
  booktitle       = {2016 19th International Multi-Topic Conference (INMIC)},
  year            = {2016},
  pages           = {1--6},
  abstract        = {Security is a worldwide issue. Individuals need their information and frameworks secure from malevolent dangers and assaults. A framework must be secured inside and out from illegal penetration. Security quality affirmation checks if the application is defenseless against assaults, in the event that anybody can hack the framework or login to the application with no approval. It is a procedure to discover that a data framework ensures information and keeps up usefulness as proposed. While penetration testing is the procedure that incorporates gathering data about the objective before the test, recognizing conceivable passage focuses, endeavoring to soften up and reporting back the discoveries. In this paper we have surveyed different frameworks which can be secured at testing (security) level through the infiltration testing approach and proposed an entrance testing technique to secure frameworks like databases, networks, web applications and Android. Great testing issues clear affirmation of issue and give a beginning stage of registering arrangement. The point of convergence of entrance testing is high reality powerlessness and there is no false positive about it.},
  annote          = {From Duplicate 2 (Security quality assurance through penetration testing - Shaukat, K; Faisal, A; Masood, R; Usman, A; Shaukat, U) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/INMIC.2016.7840115},
  bytitledomenico = {yes},
  doi             = {10.1109/INMIC.2016.7840115},
  keywords        = {,Android,Approaches,Computer crime,Computer hacking,Databases,Methodologies,Penetration Testing,Security,Smart phones,Technological innovation,Testing,Tools,Web application,database,entrance testing,illegal penetration,infiltration testing,network,penetration testing,quality assurance,registering arrangement,security assault,security of data,security quality affirmation,security quality assurance},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015226960{\&}doi=10.1109{\%}2FINMIC.2016.7840115{\&}partnerID=40{\&}md5=32fe3bd9c8ccc6e6dad82b064a26c261},
}

@Article{ISI:000218649700015,
  author          = {Yusop, Noorrezam and Kamalrudin, Massila and Sidek, Safiah},
  title           = {{SECURITY REQUIREMENTS VALIDATION FOR MOBILE APPS: A SYSTEMATIC LITERATURE REVIEW}},
  journal         = {JURNAL TEKNOLOGI},
  year            = {2015},
  volume          = {77},
  number          = {33},
  pages           = {123--137},
  issn            = {0127-9696},
  abstract        = {Security requirements are important to increase the confidence of mobile
users to perform many online transactions, such as banking, booking and
payment via mobile devices. Objective: This study aims to identify the
attributes of security requirements for mobile applications(mobile apps)
and the existing tools, techniques and approaches used in security
requirements. The gaps and limitations for each approach are also
discussed. Method: We conducted a systematic literature review to
identify and analyse related literatures on validation of security
requirements for mobile apps. We identified 68 studies that provide
relevant information on security requirements for mobile apps. Result:
There were two main findings: (1) the attributes of security
requirements that are relevant for mobile apps are authentication,
confidentiality, authorization, access control and integrity; (2) Mobile
security testing methods for validating security requirements of mobile
apps were also identified. Finally, the gaps and limitation of each
approach requirements in relation to mobile apps were also discussed.
Conclusions: The main challenge of security requirements is to identify
the most appropriate security attributes and security testing technique
to validate security requirements for mobile apps. As such, requirements
engineers should consider the challenges posed by security requirements
such as testing when validating and developing security requirements for
mobile apps testing technique. Further, correct security requirements
for security attributes of security requirements need to be considered
at the early stage of development of the mobile apps development.},
  bytitledomenico = {yes},
}

@Conference{Knorr2015,
  author          = {Knorr, K and Aspinall, D},
  title           = {{Security testing for Android mHealth apps}},
  booktitle       = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings},
  year            = {2015},
  abstract        = {Mobile health (mHealth) apps are an ideal tool for monitoring and tracking long-term health conditions; they are becoming incredibly popular despite posing risks to personal data privacy and security. In this paper, we propose a testing method for Android mHealth apps which is designed using a threat analysis, considering possible attack scenarios and vulnerabilities specific to the domain. To demonstrate the method, we have applied it to apps for managing hypertension and diabetes, discovering a number of serious vulnerabilities in the most popular applications. Here we summarise the results of that case study, and discuss the experience of using a testing method dedicated to the domain, rather than out-of-the-box Android security testing methods. We hope that details presented here will help design further, more automated, mHealth security testing tools and methods. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSTW.2015.7107459},
  bytitledomenico = {yes},
  doi             = {10.1109/ICSTW.2015.7107459},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934344036{\&}doi=10.1109{\%}2FICSTW.2015.7107459{\&}partnerID=40{\&}md5=c734e91d095c7d450634bc587d304461},
}

@Conference{Santos2018153,
  author          = {Santos, J and Antunes, M and Mangana, J and Monteiro, D and Santos, P and Casal, J},
  title           = {{Security testing framework for a novel mobile wallet ecosystem}},
  booktitle       = {Proceedings - 9th International Conference on Computational Intelligence and Communication Networks, CICN 2017},
  year            = {2018},
  volume          = {2018-January},
  pages           = {153--160},
  abstract        = {Tasks related with payments, personal identification, and the usage of tickets and marketing items can be achieved through mobile wallets. Despite the advantages that these present, such as their ease of usage and great accessibility, some security concerns are still pointed out by consumers. On this paper are presented the main security issues existent on mobile wallet ecosystems nowadays, and the possible tests and security measures that can be adopted on those ecosystems. The tests that we describe on the paper are performed on a novel mobile wallet ecosystem named weWallet, and are segmented on three axes: Mobile applications, cloud infrastructure, and physical communication technologies. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CICN.2017.8319376},
  bytitledomenico = {yes},
  doi             = {10.1109/CICN.2017.8319376},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050772017{\&}doi=10.1109{\%}2FCICN.2017.8319376{\&}partnerID=40{\&}md5=b880ed6d0bfa2bbf057e064be74c0934},
}

@Conference{Avancini201357,
  author          = {Avancini, A and Ceccato, M},
  title           = {{Security testing of the communication among Android applications}},
  booktitle       = {2013 8th International Workshop on Automation of Software Test, AST 2013 - Proceedings},
  year            = {2013},
  pages           = {57--63},
  abstract        = {An important reason behind the popularity of smartphones and tablets is the huge amount of available applications to download, to expand functionalities of the devices with brand new features. In fact, official stores provide a plethora of applications developed by third parties, for entertainment and business, most of which for free. However, confidential data (e.g., phone contacts, global GPS position, banking data and emails) could be disclosed by vulnerable applications. Sensitive applications should carefully validate exchanged data to avoid security problems. In this paper, we propose a novel testing approach to test communication among applications on mobile devices. We present a test case generation strategy and a testing adequacy criterion for Android applications. Our approach has been assessed on three widely used Android applications. {\textcopyright} 2013 IEEE.},
  annote          = {cited By 13},
  bdsk-url-1      = {http://dx.doi.org/10.1109/IWAST.2013.6595792},
  bytitledomenico = {yes},
  doi             = {10.1109/IWAST.2013.6595792},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84885004405{\&}doi=10.1109{\%}2FIWAST.2013.6595792{\&}partnerID=40{\&}md5=360e3fd0689234618659aa92dcdbdae3},
}

@InProceedings{5954460,
  author          = {Hossen, K and Groz, R and Richier, J L},
  title           = {{Security Vulnerabilities Detection Using Model Inference for Applications and Security Protocols}},
  booktitle       = {2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops},
  year            = {2011},
  pages           = {534--536},
  abstract        = {"Internet of Services" (IoS) is a vision of the Internet of the Future where applications are built by combining services provided by a variety of service providers over the network. They are deployed as needed and consumed at run-time in a demand-driven and flexible way. Model-based testing is one method for testing security of applications but it needs formal models and most of the time service providers are not able to provide them. For that, model inference methods adapted to security testing can be used. This document tries to give some directions in order to combine enhanced model inference and model testing to ensure security of services automatically.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSTW.2011.83},
  bytitledomenico = {yes},
  doi             = {10.1109/ICSTW.2011.83},
  keywords        = {Internet;program testing;security of data;security vulnerabilities detection;application protocol;security protocol;Internet of services;model-based testing;model inference method;security testing;Testing;Security;Adaptation models;Computational modeling;Protocols;Inference algorithms;Conferences;model inference;model-based testing;security},
}

@Conference{Wu201827,
  author          = {Wu, H and Wang, Y and Rountev, A},
  title           = {{SENTINEL: GENERATING GUI TESTS for ANDROID SENSOR LEAKS}},
  booktitle       = {Proceedings - International Conference on Software Engineering},
  year            = {2018},
  pages           = {27--33},
  abstract        = {Due to the widespread use of Android devices and apps, it is important to develop tools and techniques to improve app quality and performance. Our work focuses on a problem related to hardware sensors on Android devices: the failure to disable unneeded sensors, which leads to sensor leaks and thus battery drain. We propose the Sentinel testing tool to uncover such leaks. The tool performs static analysis of app code and produces a model which maps GUI events to callback methods that affect sensor behavior. The model is traversed to identify paths that are likely to exhibit sensor leaks during run-time execution. The reported paths are then used to generate test cases. The execution of each test case tracks the run-time behavior of sensors and reports observed leaks. Our experimental results indicate that Sentinel effectively detects sensor leaks, while focusing the testing efforts on a very small subset of possible GUI event sequences. {\textcopyright} 2018 ACM.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1145/3194733.3194734},
  bytitledomenico = {yes},
  doi             = {10.1145/3194733.3194734},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051212985{\&}doi=10.1145{\%}2F3194733.3194734{\&}partnerID=40{\&}md5=08bea26b3b5c35a0268910d53bf11e39},
}

@InProceedings{7395565,
  author          = {Niazi, R H and Shamsi, J A and Waseem, T and Khan, M M},
  title           = {{Signature-based detection of privilege-escalation attacks on Android}},
  booktitle       = {Proceedings - 2015 Conference on Information Assurance and Cyber Security, CIACS 2015},
  year            = {2016},
  pages           = {44--49},
  abstract        = {Android has become a major player in smartphone software arena, thanks to the massively positive reception of Google Play by the developers and users alike. In general, Android applications follow a set of permissions, which are used for access control. However, through the privilege-escalation vulnerability, a malicious application can escalate itself and access an un-permitted resource. Consequently, serious security and safety exploits such as privacy violation, reverse-shell access to the device, and drive-by downloads may occur. We propose a flexible and efficient defense mechanism against such exploits. Our solution - SAndroid, is an extensible and a lightweight application. It provides enhanced safety and security against privilege escalation attacks through rapid detection. SAndroid is based on active monitoring and detection of malicious applications through tracking of system logs and malicious process signatures. The assurance of safety provided by SAndroid is confirmed through design, testing, and verification. SAndroid follows modular approach permitting high flexibility and efficiency. Through real experiments, we confirmed that SAndroid is an efficient and low cost solution having negligible false-positives. This paper describes the architecture and design of the SAndroid framework and provides details of our experiments. {\textcopyright} 2015 IEEE.},
  annote          = {From Duplicate 1 (Signature-based detection of privilege-escalation attacks on Android - Niazi, R H; Shamsi, J A; Waseem, T; Khan, M M) cited By 4},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CIACS.2015.7395565},
  bytitledomenico = {yes},
  doi             = {10.1109/CIACS.2015.7395565},
  keywords        = {,Android,Android (operating system),Androids,Browsers,Google Play,Humanoid robots,Internet,Malware,Monitoring,Operating System Security,Privilege Escalation,SAndroid framework,Safety,Security,Security and Safety,Social Networks and Web Security,System Assurance,access control,authorisation,digital signatures,modular approach,privilege-escalation attacks detection,privilege-escalation vulnerability,signature-based attack detection,smart phone software arena,smart phones},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964829174{\&}doi=10.1109{\%}2FCIACS.2015.7395565{\&}partnerID=40{\&}md5=926234550889c8202dffe995ad45bc8d},
}

@InProceedings{Yu:2012:SCO:2151024.2151034,
  author          = {Yu, Tingting and Srisa-an, Witawas and Rothermel, Gregg},
  title           = {{SimTester: A Controllable and Observable Testing Framework for Embedded Systems}},
  booktitle       = {Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments},
  year            = {2012},
  series          = {VEE '12},
  pages           = {51--62},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {In software for embedded systems, the frequent use of interrupts for timing, sensing, and I/O processing can cause concurrency faults to occur due to interactions between applications, device drivers, and interrupt handlers. This type of fault is considered by many practitioners to be among the most difficult to detect, isolate, and correct, in part because it can be sensitive to execution interleavings and often occurs without leaving any observable incorrect output. As such, commonly used testing techniques that inspect program outputs to detect failures are often ineffective at detecting them. To test for these concurrency faults, test engineers need to be able to control interleavings so that they are deterministic. Furthermore, they also need to be able to observe faults as they occur instead of relying on observable incorrect outputs.

In this paper, we introduce SimTester, a framework that allows engineers to effectively test for subtle and non-deterministic concurrency faults by providing them with greater controllability and observability. We implemented our framework on a commercial virtual platform that is widely used to support hardware/software co-designs to promote ease of adoption. We then evaluated its effectiveness by using it to test for data races and deadlocks. The result shows that our framework can be effective and efficient at detecting these faults.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2151024.2151034},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2151024.2151034},
  bytitledomenico = {doubt},
  doi             = {10.1145/2151024.2151034},
  isbn            = {978-1-4503-1176-2},
  keywords        = {device drivers, kernels, testing,concurrency},
  url             = {http://doi.acm.org/10.1145/2151024.2151034},
}

@Conference{Brune2017235,
  author          = {Brune, P},
  title           = {{Simulating user interactions: A model and tool for semi-realistic load testing of social app backend web services}},
  booktitle       = {WEBIST 2017 - Proceedings of the 13th International Conference on Web Information Systems and Technologies},
  year            = {2017},
  pages           = {235--242},
  abstract        = {Many mobile apps today support interactions between their users and/or the provider within the app. Therefore, these apps commonly call a web service backend system hosted by the app provider. For the implementation of such service backends, load tests are required to ensure their performance and scalability. However, existing tools like JMeter are not able to simulate "out of the box" a load distribution with the complex time evolution of heterogeneous, real and interacting users of a social app, which e.g. would be necessary to detect critical performance bottlenecks. Therefore, in this paper a probabilistic model for simulating interacting users of a social app is proposed and evaluated by implementing it in a prototype load testing tool and using it to test a backend of new real-world social app currently under development. Copyright {\textcopyright} 2017 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.},
  annote          = {cited By 1},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85024479995%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=58033e1427ce3595493d6dd4dfae76d4},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85024479995{\&}partnerID=40{\&}md5=58033e1427ce3595493d6dd4dfae76d4},
}

@Article{WEYERS2018295,
  author          = {Weyers, Catrin and Bocklisch, Thilo},
  title           = {{Simulation-based investigation of energy management concepts for fuel cell -- battery -- hybrid energy storage systems in mobile applications}},
  journal         = {Energy Procedia},
  year            = {2018},
  volume          = {155},
  pages           = {295--308},
  issn            = {1876-6102},
  abstract        = {This paper presents the results of investigation of energy management concepts for fuel cell -- battery -- hybrid energy storage systems in mobile applications. The energy management has to control the power spilt between fuel cell and battery to guarantee the coverage of the power demand of the vehicle. First of all, the simulation tool is introduced, which enables the evaluation and comparisons of the energy management concepts. Therefore, the PEM fuel cell and the lithium-ion battery are modelled and dimensioned adequately. Performance-criteria are defined to evaluate the energy management concepts. The usage of hydrogen, the efficiency of the hybrid energy storage system and the operating conditions with regard to the life time of the components are especially considered. Three energy management concepts are implemented and analysed: a hysteresis controller, a stiffness-coefficient-model and a fuzzy-logic-controller. The two latter concepts are determining the fuel cell power according to the power demand. The main result, presuming realistic designs of fuel cell and battery, is that the general performance of the stiffness-coefficient-model and the fuzzy-logic-controller is significantly superior to the one of the hysteresis controller. An active limitation of the fuel cell power is recommended to further improve the performance of the energy management concepts.},
  annote          = {12th International Renewable Energy Storage Conference, IRES 2018, 13-15 March 2018, D{\"{u}}sseldorf, Germany},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1876610218309950},
  bdsk-url-2      = {https://doi.org/10.1016/j.egypro.2018.11.048},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.egypro.2018.11.048},
  keywords        = {PEM fuel cell, energy management, hybrid energy storage system, hydrogen, lithium-ion battery,Electric mobility},
  url             = {http://www.sciencedirect.com/science/article/pii/S1876610218309950},
}

@Article{Liu2014192,
  author          = {Liu, Z and Hu, Y and Cai, L},
  title           = {{Software quality testing model for mobile application}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2014},
  volume          = {8640 LNCS},
  pages           = {192--204},
  abstract        = {With the rapid development of the network technology, intelligent device and mobile applications has been the developed fastly. The mobile device will increasingly widely used even replace the traditional computer, the application test for mobile Internet was put on the agenda. From this paper, the characteristics of mobile applications are analyzed. The paper proposed quality model and quality attributes corresponding to testing requirements for mobile applications under mobile Internet. Also relevant properties testing techniques and methods is given to pay attention during the test from different test view, which indicating that the quality of the final model could be effective for mobile applications. {\textcopyright} 2014 Springer International Publishing.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-10359-4_16},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-10359-4_16},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906776510{\&}doi=10.1007{\%}2F978-3-319-10359-4{\_}16{\&}partnerID=40{\&}md5=c569df83fbf447d294f34f440be038d2},
}

@Article{ISI:000348907400048,
  author          = {Brutschy, Lucas and Ferrara, Pietro and Mueller, Peter},
  title           = {{Static Analysis for Independent App Developers}},
  journal         = {ACM SIGPLAN NOTICES},
  year            = {2014},
  volume          = {49},
  number          = {10},
  pages           = {847--860},
  issn            = {0362-1340},
  abstract        = {Mobile app markets have lowered the barrier to market entry for software
producers. As a consequence, an increasing number of independent app
developers offer their products, and recent platforms such as the MIT
App Inventor and Microsoft's TouchDevelop enable even lay programmers to
develop apps and distribute them in app markets.
A major challenge in this distribution model is to ensure the quality of
apps. Besides the usual sources of software errors, mobile apps are
susceptible to errors caused by the non-determinism of an event-based
execution model, a volatile environment, diverse hardware, and others.
Many of these errors are difficult to detect during testing, especially
for independent app developers, who are not supported by test teams and
elaborate test infrastructures.
To address this problem, we propose a static program analysis that
captures the specifics of mobile apps and is efficient enough to provide
feedback during the development process. Experiments involving 51,456
published TouchDevelop scripts show that our analysis analyzes 98{\%} of
the scripts in under a minute, and five seconds on average. Manual
inspection of the analysis results for a selection of all scripts shows
that most of the alarms are real errors.},
  annote          = {2014 ACM International Conference on Object-Oriented-Programming-Systems-Languages-and-Applications (OOPSLA 14), Portland, OR, OCT 20-24, 2014},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2660193.2660219},
  bytitledomenico = {doubt},
  doi             = {10.1145/2660193.2660219},
}

@Article{LI201767,
  author          = {Li, Li and Bissyand{\'{e}}, Tegawend{\'{e}} F and Papadakis, Mike and Rasthofer, Siegfried and Bartel, Alexandre and Octeau, Damien and Klein, Jacques and Traon, Le},
  title           = {{Static analysis of android apps: A systematic literature review}},
  journal         = {Information and Software Technology},
  year            = {2017},
  volume          = {88},
  pages           = {67--95},
  issn            = {0950-5849},
  abstract        = {Context
Static analysis exploits techniques that parse program source code or bytecode, often traversing program paths to check some program properties. Static analysis approaches have been proposed for different tasks, including for assessing the security of Android apps, detecting app clones, automating test cases generation, or for uncovering non-functional issues related to performance or energy. The literature thus has proposed a large body of works, each of which attempts to tackle one or more of the several challenges that program analyzers face when dealing with Android apps.
Objective
We aim to provide a clear view of the state-of-the-art works that statically analyze Android apps, from which we highlight the trends of static analysis approaches, pinpoint where the focus has been put, and enumerate the key aspects where future researches are still needed.
Method
We have performed a systematic literature review (SLR) which involves studying 124 research papers published in software engineering, programming languages and security venues in the last 5 years (January 2011--December 2015). This review is performed mainly in five dimensions: problems targeted by the approach, fundamental techniques used by authors, static analysis sensitivities considered, android characteristics taken into account and the scale of evaluation performed.
Results
Our in-depth examination has led to several key findings: 1) Static analysis is largely performed to uncover security and privacy issues; 2) The Soot framework and the Jimple intermediate representation are the most adopted basic support tool and format, respectively; 3) Taint analysis remains the most applied technique in research approaches; 4) Most approaches support several analysis sensitivities, but very few approaches consider path-sensitivity; 5) There is no single work that has been proposed to tackle all challenges of static analysis that are related to Android programming; and 6) Only a small portion of state-of-the-art works have made their artifacts publicly available.
Conclusion
The research community is still facing a number of challenges for building approaches that are aware altogether of implicit-Flows, dynamic code loading features, reflective calls, native code and multi-threading, in order to implement sound and highly precise static analyzers.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0950584917302987},
  bdsk-url-2      = {https://doi.org/10.1016/j.infsof.2017.04.001},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.infsof.2017.04.001},
  url             = {http://www.sciencedirect.com/science/article/pii/S0950584917302987},
}

@InProceedings{Wu:2016:SDE:2892208.2892218,
  author          = {Wu, Haowei and Yang, Shengqian and Rountev, Atanas},
  title           = {{Static Detection of Energy Defect Patterns in Android Applications}},
  booktitle       = {Proceedings of the 25th International Conference on Compiler Construction},
  year            = {2016},
  series          = {CC 2016},
  pages           = {185--195},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {For static analysis researchers, Android software presents a wide variety of interesting challenges. The target of our work is static detection of energy-drain defects in Android applications. The management of energy-intensive resources (e.g., GPS) creates various opportunities for software defects. Our goal is to detect statically “missing deactivation” energy-drain defects in the user interface of the application. First, we define precisely two patterns of run-time energy-drain behaviors, based on modeling of Android GUI control-flow paths and energy-related listener leaks along such paths. Next, we define a static detection algorithm targeting these patterns. The analysis considers valid interprocedural control-flow paths in a callback method and its transitive callees, in order to detect operations that add or remove listeners. Sequences of callbacks are then analyzed for possible listener leaks. Our evaluation considers the detection of GUI-related energy-drain defects reported in prior work, as well as new defects not discovered by prior approaches. In summary, the detection is very effective and precise, suggesting that the proposed analysis is suitable for practical use in static checking tools for Android.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2892208.2892218},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2892208.2892218},
  bytitledomenico = {yes},
  doi             = {10.1145/2892208.2892218},
  isbn            = {978-1-4503-4241-4},
  keywords        = {GUI analysis, energy, static analysis,Android},
  url             = {http://doi.acm.org/10.1145/2892208.2892218},
}

@Article{Jeong2019540,
  author          = {Jeong, E and Park, J and Son, B and Kim, M and Yim, K},
  title           = {{Study on signature verification process for the firmware of an android platform}},
  journal         = {Advances in Intelligent Systems and Computing},
  year            = {2019},
  volume          = {773},
  pages           = {540--545},
  abstract        = {Recently, Android is expanding its application area including vehicle infotainment system, smart TV, AI speaker as IoT devices as well as mobile terminals. To maintain and support these systems, the manufacturer distributes the firmware through the Android firmware build framework and updates after evaluating firmware integrity by a signature verification process. However, attackers potentially falsify the firmware and raise critical security problems on mobile terminals in cases that developers use the public test key or SDK key to sign the firmware for release, due to lack of security readiness of mobile manufacturers. This paper analyzes the firmware signing, verification and update process of the Android platform, introduces vulnerabilities invented when an unsafe key is used and implements an evaluation tool for signature verification to find the firmware features if signed by an unsafe key. {\textcopyright} Springer International Publishing AG, part of Springer Nature 2019.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-93554-6_52},
  bytitledomenico = {no},
  doi             = {10.1007/978-3-319-93554-6_52},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048623893{\&}doi=10.1007{\%}2F978-3-319-93554-6{\_}52{\&}partnerID=40{\&}md5=e8472eabec2c8fb696db19147345e07a},
}

@Article{Sauro:2017:SQM:3173069.3173072,
  author          = {Sauro, Jeff and Zarolia, Pareezad},
  title           = {{SUPR-Qm: A Questionnaire to Measure the Mobile App User Experience}},
  journal         = {J. Usability Studies},
  year            = {2017},
  volume          = {13},
  number          = {1},
  pages           = {17--37},
  issn            = {1931-3357},
  abstract        = {In this paper, we present the SUPR-Qm, a 16-item instrument that assesses a user's experience of a mobile application. Rasch analysis was used to assess the psychometric properties of items collected from four independent surveys (N = 1,046) with ratings on 174 unique apps. For the final instrument, estimates of internal consistency reliability were high (alpha = .94), convergent validity was also high, with significant correlations with the SUPR-Q (.71), UMUX-Lite (.74), and likelihood-to-recommend (LTR) scores (.74). Scores on the SUPR-Qm correlated with the number of app reviews in the Google Play Store and Apple's App Store (r = .38) establishing adequate predictive validity. The SUPR-Qm, along with category specific questions, can be used to benchmark the user experience of mobile applications.

},
  address         = {Bloomingdale, IL},
  bdsk-url-1      = {http://dl.acm.org/citation.cfm?id=3173069.3173072},
  bytitledomenico = {doubt},
  keywords        = {item response theory, measurement, mobile apps, questionnaire, rasch, user experience,human factors},
  publisher       = {Usability Professionals' Association},
  url             = {http://dl.acm.org/citation.cfm?id=3173069.3173072},
}

@Article{Xu2016169,
  author          = {Xu, Y.-P. and Ma, Z.-F. and Wang, Z.-H. and Niu, X.-X. and Yang, Y.-X.},
  title           = {{Survey of security for Android smart terminal}},
  journal         = {Tongxin Xuebao/Journal on Communications},
  year            = {2016},
  volume          = {37},
  number          = {6},
  pages           = {169--184},
  abstract        = {Aiming at the security, the layered security system was constructed. Firstly, the devices safety protection based on remote anti-theft, biometric identity verification and hardware security module was expounded. Secondly, network security referring to the wireless security network, virus propagation killing and anti-phishing was illustrated. Thirdly, the OS safety was introduced from the perspective of system kernel, runtime environment and application framework. Fourthly, application security was showed containing the reverse engineering static analysis, behavior dynamic analysis, safety reinforcement and safety assessment. Fifthly, the privacy data protection was summarized including tracking, encryption and backup. Finally, the future development direction was prospected on the security framework and intelligent behavior analysis. {\textcopyright} 2016, Editorial Board of Journal on Communications. All right reserved.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.11959/j.issn.1000-436x.2016127},
  bytitledomenico = {no},
  doi             = {10.11959/j.issn.1000-436x.2016127},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978410026{\&}doi=10.11959{\%}2Fj.issn.1000-436x.2016127{\&}partnerID=40{\&}md5=223f651abd8ebea44b53b3cd04c134e6},
}

@InProceedings{Adamsen:2015:SEA:2771783.2771786,
  author          = {Adamsen, Christoffer Quist and Mezzetti, Gianluca and M{\o}ller, Anders},
  title           = {{Systematic Execution of Android Test Suites in Adverse Conditions}},
  booktitle       = {Proceedings of the 2015 International Symposium on Software Testing and Analysis},
  year            = {2015},
  series          = {ISSTA 2015},
  pages           = {83--93},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Event-driven applications, such as, mobile apps, are difficult to test thoroughly. The application programmers often put significant effort into writing end-to-end test suites. Even though such tests often have high coverage of the source code, we find that they often focus on the expected behavior, not on occurrences of unusual events. On the other hand, automated testing tools may be capable of exploring the state space more systematically, but this is mostly without knowledge of the intended behavior of the individual applications. As a consequence, many programming errors remain unnoticed until they are encountered by the users. We propose a new methodology for testing by leveraging existing test suites such that each test case is systematically exposed to adverse conditions where certain unexpected events may interfere with the execution. In this way, we explore the interesting execution paths and take advantage of the assertions in the manually written test suite, while ensuring that the injected events do not affect the expected outcome. The main challenge that we address is how to accomplish this systematically and efficiently. We have evaluated the approach by implementing a tool, Thor, working on Android. The results on four real-world apps with existing test suites demonstrate that apps are often fragile with respect to certain unexpected events and that our methodology effectively increases the testing quality: Of 507 individual tests, 429 fail when exposed to adverse conditions, which reveals 66 distinct problems that are not detected by ordinary execution of the tests.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2771783.2771786},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2771783.2771786},
  bytitledomenico = {doubt},
  doi             = {10.1145/2771783.2771786},
  isbn            = {978-1-4503-3620-8},
  keywords        = {UI testing, automated testing, mobile apps,Android},
  url             = {http://doi.acm.org/10.1145/2771783.2771786},
}

@Article{KAUR2018,
  author          = {Kaur, Anureet and Kaur, Kulwant},
  title           = {{Systematic literature review of mobile application development and testing effort estimation}},
  journal         = {Journal of King Saud University - Computer and Information Sciences},
  year            = {2018},
  issn            = {1319-1578},
  abstract        = {In the recent years, the advances in mobile technology have brought an exorbitant change in daily lifestyle of individuals. Smartphones/mobile devices are rampant in all aspects of human life. This has led to an extreme demand for developing software that runs on mobile devices. The developers have to keep up with this high demand and deliver high-quality app on time and within budget. For this, estimation of development and testing of apps play a pivotal role. In this paper, a Systematic Literature Review (SLR) is conducted to highlight development and testing estimation process for software/application. The goal of the present literature survey is to identify and compare existing test estimation techniques for traditional software (desktop/laptop) and for mobile software/application. The characteristics that make mobile software/application different from traditional software are identified in this literature survey. Further, the trend for developing the software is towards agile, thus this study also presents and compares estimation techniques used in agile software development for mobile applications. The analysis of literature review suggests filling a research gap to present formal models for estimating mobile application considering specific characteristics of mobile software.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1319157818306074},
  bdsk-url-2      = {https://doi.org/10.1016/j.jksuci.2018.11.002},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.jksuci.2018.11.002},
  keywords        = {Agile, Estimation, Systematic literature review, Test effort,Mobile Applications},
  url             = {http://www.sciencedirect.com/science/article/pii/S1319157818306074},
}

@Conference{Yan2013411,
  author          = {Yan, D and Yang, S and Rountev, A},
  title           = {{Systematic testing for resource leaks in Android applications}},
  booktitle       = {2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013},
  year            = {2013},
  pages           = {411--420},
  abstract        = {The use of mobile devices and the complexity of their software continue to grow rapidly. This growth presents significant challenges for software correctness and performance. In addition to traditional defects, a key consideration are defects related to the limited resources available on these devices. Resource leaks in an application, due to improper management of resources, can lead to slowdowns, crashes, and negative user experience. Despite a large body of existing work on leak detection, testing for resource leaks remains a challenging problem. We propose a novel and comprehensive approach for systematic testing for resource leaks in Android software. Similar to existing testing techniques, the approach is based on a GUI model, but is focused specifically on coverage criteria aimed at resource leak defects. These criteria are based on neutral cycles: sequences of GUI events that should have a 'neutral' effect and should not lead to increases in resource usage. Several important categories of neutral cycles are considered in the proposed test coverage criteria. Experimental evaluation and case studies were performed on eight Android applications. The approach exposed 18 resource leak defects, 12 of which were previously unknown. These results provide motivation for future work on analysis, testing, and prevention of resource leaks in Android software. {\textcopyright} 2013 IEEE.},
  annote          = {cited By 24},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ISSRE.2013.6698894},
  bytitledomenico = {doubt},
  doi             = {10.1109/ISSRE.2013.6698894},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893274946{\&}doi=10.1109{\%}2FISSRE.2013.6698894{\&}partnerID=40{\&}md5=6645f69e14baa1b2d75f9994d41f72af},
}

@Conference{Ko2011,
  author          = {Ko, J.-W. and Sim, S.-H. and Song, Y.-J.},
  title           = {{Test based model transformation framework for mobile application}},
  booktitle       = {2011 International Conference on Information Science and Applications, ICISA 2011},
  year            = {2011},
  abstract        = {In order to easily port mobile applications suitable for each platform, that have been developed under diverse development environment for individual wireless communication service providers, or redevelop them on a specific platform, it is required to reuse them at software model level that is a software development paradigm for MDA (Model Driven Architecture). The existing model transformation tools such as UMT,MTL,ATL have focused on various transformation format supports, scalability or applicability of model transformation mechanism itself or how it is easy to understand transformation rules without verification of the transformation model generated through mainly model transformation engines. The test based model transformation framework proposed on this paper generates prediction model by defining test Oracle as model transformation rules that may conduct verification test of the generated transformation model, in order to support verification on verification of the converted model through MDA based model transformation mechanism. By comparing this prediction model with the target model, it is possible to execute verification test on the converted model. Therefore, by increasing reliability of model transformation and further applying test issues on the software development process to the software mode at software design phase, it is possible to reduce modification cost through advantage to predict or find out any system error earlier than test to be progressed after implementation of the existing source codes. {\textcopyright} 2011 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICISA.2011.5772373},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICISA.2011.5772373},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960230879{\&}doi=10.1109{\%}2FICISA.2011.5772373{\&}partnerID=40{\&}md5=24bca2661ef4005538c9a6511dcd17a2},
}

@Article{LIN201216,
  author          = {Lin, Ying-Dar and Chou, Chi-Heng and Lai, Yuan-Cheng and Huang, Tse-Yau and Chung, Simon and Hung, Jui-Tsun and Lin, Frank C},
  title           = {{Test coverage optimization for large code problems}},
  journal         = {Journal of Systems and Software},
  year            = {2012},
  volume          = {85},
  number          = {1},
  pages           = {16--27},
  issn            = {0164-1212},
  abstract        = {Abstract
Software developers frequently conduct regression testing on a series of major, minor, or bug-fix software or firmware releases. However, retesting all test cases for each release is time-consuming. For example, it takes about 36 test-bed-days to thoroughly exercise a test suite made up of 2320 test cases for the MPLS testing area that contains 57,758 functions in Cisco IOS. The cost is infeasible for a series of regression testing on the MPLS area. Thus, the test suite needs to be reduced intelligently, not just randomly, and its fault detection capability must be kept as much as possible. The mode of safe regression test selection approach is adopted for seeking a subset of modification-traversing test cases to substitute for fault-revealing test cases. The algorithms, CW-NumMin, CW-CostMin, and CW-CostCov-B, apply the safe-mode approach in selecting test cases for achieving full-modified function coverage. It is assumed that modified functions are fault-prone, and the fault distribution of the testing area is Pareto-like. Moreover, we also assume that once a subject program is getting more mature, its fault concentration will become stronger. Only function coverage criterion is adopted because of the scalability of a software system with large code. The metrics of test's function reachability and function's test intensity are defined in this study for algorithms. Both CW-CovMax and CW-CostMin algorithms are not safe-mode, but the approaches they use still attempt to obtain a test suite with a maximal amount of function coverage under certain constraints, i.e. the effective-confidence level and time restriction. We conclude that the most effective algorithm in this study can significantly reduce the cost (time) of regression testing on the MPLS testing area to 1.10{\%}, on the average. Approaches proposed here can be effectively and efficiently applied to the regression testing on bug-fix releases of a software system with large code, especially to the releases having very few modified functions with low test intensities.},
  annote          = {Dynamic Analysis and Testing of Embedded Software},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S016412121100121X},
  bdsk-url-2      = {https://doi.org/10.1016/j.jss.2011.05.021},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.jss.2011.05.021},
  keywords        = {Software maintenance, Test case selection, Test coverage, Test intensity,Regression testing},
  url             = {http://www.sciencedirect.com/science/article/pii/S016412121100121X},
}

@Conference{Rohella2018308,
  author          = {Rohella, A and Takada, S},
  title           = {{Testing android applications using multi-objective evolutionary algorithms with a stopping criteria}},
  booktitle       = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
  year            = {2018},
  volume          = {2018-July},
  pages           = {308--313},
  abstract        = {The ever increasing usage of Android devices and apps has created a demand for faster and reliable testing techniques. While the quality of test cases can be summed up based on the amount of code they cover, fault detection in applications is one of the main objectives for testing. We introduce an Android app testing approach which uses multiobjective genetic algorithm with elitism which finds optimal test cases by minimizing their length, maximizes the code coverage and fault detection capability, and minimizes the whole test suite for re-usability. In addition to that, we also incorporate a progress indicator which checks for improvements in test suite quality after subsequent generations and use it as a stopping criterion. The effectiveness of our approach is shown in our evaluation where it is able to perform better than the existing state-of-The-Art tools. {\textcopyright} 2018 Universitat zu Koln. All rights reserved.},
  annote          = {cited By 0},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056842619%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=796f10b8daa1db5ae3ebeb0df94e1fcc},
  bytitledomenico = {doubt},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056842619{\&}partnerID=40{\&}md5=796f10b8daa1db5ae3ebeb0df94e1fcc},
}

@Article{Zaragoza2018151,
  author          = {Zaragoza, M G and Kim, H.-K. and Bae, I.-H. and Lee, J.-H.},
  title           = {{Testing driven development of mobile applications using automatic bug management systems}},
  journal         = {Studies in Computational Intelligence},
  year            = {2018},
  volume          = {726},
  pages           = {151--163},
  abstract        = {Software development testing practices contain a little pragmatic evidence to support the utility of test-driven development that has been circulating for years. As testing mobile applications servs as a process by which application software developed for mobile devices are tested for its usability, functionality especially consistency. These applications require test automation for the reason of compatibility and speed. Mobile applications either come pre-installed or can be installed from mobile software distribution platforms. Increasing complexity of themobile applications system makes difficult to test and evaluate the quality properly. Resulting to the automated testing methodology that is becoming popular, resulting to a becoming outdated of manual testing. Model-DrivenTestingTechniques artifacts software engineering bases on themodel transformation principle. This implies increasing research on automation of the testing processes. In this paper, we proposed an approach to derive tests from the model of themobile applications system as well as the a diagram in using automatic bug management system. Using this technique, we can achieve more effective testing on hardware related software areas. {\textcopyright} Springer International Publishing AG 2018.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-63618-4_12},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-63618-4_12},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026320376{\&}doi=10.1007{\%}2F978-3-319-63618-4{\_}12{\&}partnerID=40{\&}md5=81f690d466f60862d108a902c9341df4},
}

@Conference{Bucerzan201630,
  author          = {Bucerzan, D and Ra{\c t}iu, C},
  title           = {{Testing methods for the efficiency of modern steganography solutions for mobile platforms}},
  booktitle       = {2016 6th International Conference on Computers Communications and Control, ICCCC 2016},
  year            = {2016},
  pages           = {30--36},
  abstract        = {Cryptography and Steganography are two commonly used techniques in modern era for ensuring confidential and private communication. These techniques complete each other offering multiple layers of safety, enhancing digital information security. In this paper we analyze Smartsteg, which is a project that implements cryptography combined with steganography on mobile devices that run Android and Windows. We evaluate the performance of this project in terms of: interoperability, security, payload capacity, speed and robustness against steganalysis. {\textcopyright} 2016 IEEE.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICCCC.2016.7496734},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICCCC.2016.7496734},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979998946{\&}doi=10.1109{\%}2FICCCC.2016.7496734{\&}partnerID=40{\&}md5=c7b93bb27e20d5950ca8c2f1943a0e32},
}

@Article{TSAI2017103,
  author          = {Tsai, Tsai-Hsuan and Tseng, Kevin C and Chang, Yung-Sheng},
  title           = {{Testing the usability of smartphone surface gestures on different sizes of smartphones by different age groups of users}},
  journal         = {Computers in Human Behavior},
  year            = {2017},
  volume          = {75},
  pages           = {103--116},
  issn            = {0747-5632},
  abstract        = {This study focuses on testing the usability of 3 different sizes of smartphones by children, adults, and the elderly. Forty-seven participants from each age group were recruited. The research consisted of two stages of experiments. In the first experiment, three existing gestures used by the Android system were evaluated: drag, pinch, and double-touch drag. In the second experiment, two additional re-design gestures were tested: multi-long press and slide down. The users' performances were measured based on their overall time, success time, accuracy, Fitts' Law values, and a subjective questionnaire. Among the five gestures, drag and multi-long press were categorized as the drag gesture, and pinch, double-touch drag and slide down were categorized as the enlarging gesture. The results show that children and adults outperformed the elderly in gesture operation. With respect to smartphone size, the subjects had faster response times and better Fitts' Law values on 6-inch phones. When comparing the subjective preference and the objective use measurement values of the two drag gestures and three enlarging gestures among the different age groups, it was found that children and adults were consistent, whereas the elderly were inconsistent. Overall, in operating the original drag and pinch gestures, the elderly exhibited better objective use measurements, but they preferred the improved gestures, such as slide down.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0747563217303254},
  bdsk-url-2      = {https://doi.org/10.1016/j.chb.2017.05.013},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.chb.2017.05.013},
  keywords        = {Children, Elderly, Fitts' law, Gestures, Usability,Smartphone size},
  url             = {http://www.sciencedirect.com/science/article/pii/S0747563217303254},
}

@InProceedings{Ming2017182,
  author          = {Ming, F and Zhou, Z and Li, Z},
  title           = {{The design and implement of the cross-platform mobile automated testing framework}},
  booktitle       = {Proceedings of 2016 5th International Conference on Computer Science and Network Technology, ICCSNT 2016},
  year            = {2016},
  pages           = {182--185},
  abstract        = {In order to improve the efficiency of software development and distribution, ensure the quality of application software, and improve the reusability of automated test scripts, based on Selenium WebDriver, combined with the current mainstream of continuous integration tool Jenkins, this paper designs and implements a cross platform Mobile Terminal Test Automation Framework. IOS and Android mobile terminal operating systems are supported by the framework. And the framework can automatically complete the entire progress of test case development, deployment, testing and log analysis. It not only reduces the threshold of testers, but also greatly improves the efficiency of development and testing, and lays a solid foundation for program sustainable development.},
  annote          = {From Duplicate 1 (The design and implement of the cross-platform mobile automated testing framework - Ming, F; Zhou, Z; Li, Z) cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICCSNT.2016.8070144},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICCSNT.2016.8070144},
  keywords        = {,Android,Android mobile terminal operating systems,Automation,Computer science,Handheld computers,IOS,Internet,Jenkins,Selenium,Selenium WebDriver,Test Automation Framework,Testing,application software quality,automated test script reusability,continuous integration tool Jenkins,cross platform,cross platform mobile terminal test automation framework,cross-platform mobile automated testing framework,iOS,iOS (operating system),log analysis,mobile computing,program sustainable development,program testing,software development efficiency,software distribution,software quality,software reusability,sustainable development,test case development},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85039897561{\&}doi=10.1109{\%}2FICCSNT.2016.8070144{\&}partnerID=40{\&}md5=f3ce21e0a2f7ecfba2be96def8060db0},
}

@Article{CAVIGLIONE201211,
  author          = {Caviglione, Luca and Merlo, Alessio},
  title           = {{The energy impact of security mechanisms in modern mobile devices}},
  journal         = {Network Security},
  year            = {2012},
  volume          = {2012},
  number          = {2},
  pages           = {11--14},
  issn            = {1353-4858},
  abstract        = {The massive uptake of mobile devices is raising concerns about their security. Yet there may be a difficult trade-off to be made between security and power consumption. Luca Caviglione of the Institute of Intelligent Systems for Automation, National Research Council of Italy and Alessio Merlo, University of Genoa and eCampus University, undertook a power consumption analysis of some security-related aspects deployed within a sample Android mobile phone and examined whether security does have an energy cost associated with it. The availability of powerful and cost-effective wireless interfaces makes the modern Internet accessible according to the `anywhere, anytime' paradigm. In addition, the explosion of Web 2.0 applications enables people to interact with an increased degree of social connectivity. And, in a simple and cost-effective manner, modern end-user devices allow people to produce and share contents, interact with the surrounding environment -- for example, via Global Positioning System (GPS) or Near Field Communication (NFC) mechanisms -- and enjoy multimedia material such as music and video. To be effective, such a rich set of features must be supported by an adequate supply of on-board power, which is mostly provided via batteries. Even though battery technology and silicon efficiency have made important advances in the past few years, excessive power drain still remains the major weakness when designing and using mobile appliances. Luca Caviglione of the Institute of Intelligent Systems for Automation, National Research Council of Italy and Alessio Merlo, University of Genoa and eCampus University, undertook a power consumption analysis of some security-related aspects deployed within a sample Android mobile phone and examined whether security does have an energy cost associated with it.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485812700156},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(12)70015-6},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1353-4858(12)70015-6},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485812700156},
}

@Conference{Cheng20161,
  author          = {Cheng, L C},
  title           = {{The mobile app usability inspection (MAUi) framework as a guide for minimal viable product (MVP) testing in lean development cycle}},
  booktitle       = {Proceedings of CHIuXiD 2016, the 2nd International Human Computer Interaction and User Experience Conference in Indonesia: Bridging the Gaps in the HCI and UX World},
  year            = {2016},
  pages           = {1--11},
  abstract        = {The Mobile App Usability Inspection (MAUi) framework is an improvised user-interface auditing technique based on the classical work of Heuristic Evaluation, pioneered by Jakob Nielsen {\&} Rolf Molich. While the method of HE has been extensively cross-examined and reported in wide arrays of usability testing activities, its potential as a highly reliable inspection procedure is yet to be systematically formalized for lean development cycle. This paper demonstrated the application of the MAUi framework to the evaluation of a high-fidelity prototype that explored touchscreen interactions between three-dimension virtual objects on a mobile device. The initial results suggested that MAUi is a much reliable usability inspection method as the findings, given by four different inspectors shared 85{\%} of true ability from user testing event. In addition, the MAUi framework can be used as a checklist for fine-Tuning the readiness of any minimal viable products on mobile device. {\textcopyright} 2016 ACM.},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2898459.2898460},
  bytitledomenico = {doubt},
  doi             = {10.1145/2898459.2898460},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84966549525{\&}doi=10.1145{\%}2F2898459.2898460{\&}partnerID=40{\&}md5=6ad79a7c1e5bb2062e85f6df23a39c29},
}

@Article{Burgdorf20188,
  author          = {Burgdorf, A and G{\"{u}}the, I and Jovanovi{\'{c}}, M and Kutafina, E and Kohlschein, C and Bitsch, J and Jonas, S M},
  title           = {{The mobile sleep lab app: An open-source framework for mobile sleep assessment based on consumer-grade wearable devices}},
  journal         = {Computers in Biology and Medicine},
  year            = {2018},
  volume          = {103},
  pages           = {8--16},
  abstract        = {Background: Sleep disorders have a prevalence of up to 50{\%} and are commonly diagnosed using polysomnography. However, polysomnography requires trained staff and specific equipment in a laboratory setting, which are expensive and limited resources are available. Mobile and wearable devices such as fitness wristbands can perform limited sleep monitoring but are not evaluated well. Here, the development and evaluation of a mobile application to record and synchronize data from consumer-grade sensors suitable for sleep monitoring is presented and evaluated for data collection capability in a clinical trial. Methods: Wearable and ambient consumer-grade sensors were selected to mimic the functionalities of clinical sleep laboratories. Then, a modular application was developed for recording, processing and visualizing the sensor data. A validation was performed in three phases: (1) sensor functionalities were evaluated, (2) self-experiments were performed in full-night experiments, and (3) the application was tested for usability in a clinical trial on primary snoring. Results: The evaluation of the sensors indicated their suitability for assessing basic sleep characteristics. Additionally, the application successfully recorded full-night sleep. The collected data was of sufficient quality to detect and measure body movements, cardiac activity, snoring and brightness. The ongoing clinical trial phase showed the successful deployment of the application by medical professionals. Conclusion: The proposed software demonstrated a strong potential for medical usage. With low costs, it can be proposed for screening, long-term monitoring or in resource-austere environments. However, further validations are needed, in particular the comparison to a clinical sleep laboratory. {\textcopyright} 2018},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1016/j.compbiomed.2018.09.025},
  bytitledomenico = {no},
  doi             = {10.1016/j.compbiomed.2018.09.025},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054424961{\&}doi=10.1016{\%}2Fj.compbiomed.2018.09.025{\&}partnerID=40{\&}md5=e6a01aa86fd8d17d3cba097394f4ad3e},
}

@InProceedings{8110056,
  author          = {Adamov, A and Carlsson, A},
  title           = {{The state of ransomware. Trends and mitigation techniques}},
  booktitle       = {2017 IEEE East-West Design Test Symposium (EWDTS)},
  year            = {2017},
  pages           = {1--8},
  abstract        = {This paper contains an analysis of the payload of the popular ransomware for Windows, Android, Linux, and MacOSX platforms. Namely, VaultCrypt (CrypVault), TeslaCrypt, NanoLocker, Trojan-Ransom.Linux.Cryptor, Android Simplelocker, OSX/KeRanger-A, WannaCry, Petya, NotPetya, Cerber, Spora, Serpent ransomware were put under the microscope. A set of characteristics was proposed to be used for the analysis. The purpose of the analysis is generalization of the collected data that describes behavior and design trends of modern ransomware. The objective is to suggest ransomware threat mitigation techniques based on the obtained information. The novelty of the paper is the analysis methodology based on the chosen set of 13 key characteristics that helps to determine similarities and differences thorough the list of ransomware put under analysis. Most of the ransomware samples presented were manually analyzed by the authors eliminating contradictions in descriptions of ransomware behavior published by different malware research laboratories through verification of the payload of the latest versions of ransomware.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/EWDTS.2017.8110056},
  bytitledomenico = {no},
  doi             = {10.1109/EWDTS.2017.8110056},
  issn            = {2472-761X},
  keywords        = {;Serpent ransomware;collected data;Malware;Encryption;Servers;Bitcoin;Tools;Elliptic curve cryptography,invasive software;Linux;program diagnostics;modern ransomware;ransomware threat mitigation techniques;analysis methodology;13 key characteristics;ransomware samples;ransomware behavior;Windows;MacOSX platforms;VaultCrypt;CrypVault;TeslaCrypt;NanoLocker;Trojan-Ransom.Linux.Cryptor;Android Simplelocker;OSX/KeRanger-A},
}

@Article{MASOOD20151818,
  author          = {Masood, Mona and Thigambaram, Menaga},
  title           = {{The Usability of Mobile Applications for Pre-schoolers}},
  journal         = {Procedia - Social and Behavioral Sciences},
  year            = {2015},
  volume          = {197},
  pages           = {1818--1826},
  issn            = {1877-0428},
  abstract        = {The purpose of this study is to investigate the importance of usability in user interface (UI) design of mobile educational applications (MEA) designed for children aged 4-5 years. Usability testing was conducted with four children to evaluate the UI design based on the children's mental model in addition to the quality of their learning experience. An eye tracking glasses was utilized to capture the children's eye movements while the usability heuristics was used to collect the descriptive data regarding the interface design. Results indicated that the usability study can be considered as a multi-stage problem solving process where it analyses and foresee how the children use a product and the actual first-time users' intuition of their design experience and learning curve. The observation, eye tracking data and usability testing of the MEA with the four children validates that the UI application was based on the developers and designers adult mental model and guideline or own assumptions. This paper ends with a suggestion of a UI design guideline of design elements and principles for designers and developers to adhere when developing MEA for children.},
  annote          = {7th World Conference on Educational Sciences},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877042815042421},
  bdsk-url-2      = {https://doi.org/10.1016/j.sbspro.2015.07.241},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.sbspro.2015.07.241},
  keywords        = {educational application, eye tracking glasses, mobile apps, tablets,usability testing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877042815042421},
}

@Article{ALIGOMBE2018235,
  author          = {Ali-Gombe, Aisha I and Saltaformaggio, Brendan and Ramanujam, J ``Ram'' and Xu, Dongyan and Richard, Golden G},
  title           = {{Toward a more dependable hybrid analysis of android malware using aspect-oriented programming}},
  journal         = {Computers {\&} Security},
  year            = {2018},
  volume          = {73},
  pages           = {235--248},
  issn            = {0167-4048},
  abstract        = {The growing threat to user privacy by Android applications (app) has tremendously increased the need for more reliable and accessible analysis techniques. This paper presents AspectDroid11A poster version of this paper appears in CODASPY 2016 (Ali-Gombe et al., 2016).---an offline app-level hybrid analysis system designed to investigate Android applications for possible unwanted activities. It leverages static bytecode instrumentation to weave in analysis routines into an existing application to provide efficient dataflow analysis, detection of resource abuse, and analytics of suspicious behaviors, which are then monitored dynamically at runtime. Unlike operating system or framework dependent approaches, AspectDroid does not require porting from one version of Android to another, nor does it depend on a particular Android runtime, making it a more adaptable and easier to use technique. We evaluate the strength of our dataflow algorithm on 105 apps from the DroidBench corpus, with experimental results demonstrating that AspectDroid can detect tagged data with 94.68{\%} accuracy. Furthermore, we compare and contrast the behavioral patterns in 100 malware samples from the Drebin dataset (Arp et al., 2014) and 100 apps downloaded from Google Play. Our results showed more traces of sensitive data exfiltration, abuse of resources, as well as suspicious use of programming concepts like reflection, native code, and dynamic classes in the malware set than the Google Play apps. In terms of runtime overhead, our experiments indicate AspectDroid can comprehensively log relevant security concerns with an approximate overhead of 1 MB memory and a 5.9{\%} average increase in CPU usage.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167404817302377},
  bdsk-url-2      = {https://doi.org/10.1016/j.cose.2017.11.006},
  bytitledomenico = {yes},
  doi             = {https://doi.org/10.1016/j.cose.2017.11.006},
  keywords        = {Android, Bytecode weaving, Dataflow, Dynamic execution, Instrumentation, Malware,Hybrid analysis},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167404817302377},
}

@Article{NAVAZ2018137,
  author          = {Navaz, Alramzana Nujum and Serhani, Mohamed Adel and Al-Qirim, Nabeel and Gergely, Marton},
  title           = {{Towards an efficient and Energy-Aware mobile big health data architecture}},
  journal         = {Computer Methods and Programs in Biomedicine},
  year            = {2018},
  volume          = {166},
  pages           = {137--154},
  issn            = {0169-2607},
  abstract        = {Background and objectives
Mobile and ubiquitous devices are everywhere, generating an exorbitant amount of data. New generations of healthcare systems are using mobile devices to continuously collect large amounts of different types of data from patients with chronic diseases. The challenge with such Mobile Big Data in general, is how to meet the growing performance demands of the mobile resources handling these tasks, while simultaneously minimizing their consumption.
Methods
This research proposes a scalable architecture for processing Mobile Big Data. The architecture is developed around three new algorithms for the effective use of resources in performing mobile data processing and analytics: mobile resources optimization, mobile analytics customization, and mobile offloading. The mobile resources optimization algorithm monitors resources and automatically switches off unused network connections and application services whenever resources are limited. The mobile analytics customization algorithm attempts to save energy by customizing the analytics processes through the implementation of some data-aware schemes. Finally, the mobile offloading algorithm uses some heuristics to intelligently decide whether to process data locally, or delegate it to a cloud back-end server.
Results
The three algorithms mentioned above are tested using Android-based mobile devices on real Electroencephalography (EEG) data streams retrieved from sensors and an online data bank. Results show that the three combined algorithms proved their effectiveness in optimizing the resources of mobile devices in handling, processing, and analyzing EEG data.
Conclusion
We developed an energy-efficient model for Mobile Big Data which addressed key limitations in mobile device processing and analytics and reduced execution time and limited battery resources. This was supported with the development of three new algorithms for the effective use of resources, energy saving, parallel processing and analytics customization.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0169260718305601},
  bdsk-url-2      = {https://doi.org/10.1016/j.cmpb.2018.10.008},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.cmpb.2018.10.008},
  keywords        = {M-health, Mobile big data, Mobile offloading, Processing, Resources optimization,Analytics customization},
  url             = {http://www.sciencedirect.com/science/article/pii/S0169260718305601},
}

@Conference{Cao2015361,
  author          = {Cao, C and Gao, N and Liu, P and Xiang, J},
  title           = {{Towards analyzing the input validation vulnerabilities associated with android system services}},
  booktitle       = {ACM International Conference Proceeding Series},
  year            = {2015},
  volume          = {7-11-December-2015},
  pages           = {361--370},
  abstract        = {Although the input validation vulnerabilities play a critical role in web application security, such vulnerabilities are so far largely neglected in the Android security research community. We found that due to the unique Framework Code layer, Android devices do need specific input validation vulnerability analysis in system services. In this work, we take the first steps to analyze Android specific input validation vulnerabilities. In particular, a) we take the first steps towards measuring the corresponding attack surface and reporting the current input validation status of Android system services. b) We developed a new input validation vulnerability scanner for Android devices. This tool fuzzes all the Android system services by sending requests with malformed arguments to them. Through comprehensive evaluation of Android system with over 90 system services and over 1,900 system service methods, we identified 16 vulnerabilities in Android system services. We have reported all the issues to Google and Google has confirmed them. {\textcopyright} 2015 ACM.},
  annote          = {cited By 8},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2818000.2818033},
  bytitledomenico = {yes},
  doi             = {10.1145/2818000.2818033},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959334018{\&}doi=10.1145{\%}2F2818000.2818033{\&}partnerID=40{\&}md5=967f72e73e5c7f659e5a9c9bb5f24c3e},
}

@Conference{Zhauniarovich2015501,
  author          = {Zhauniarovich, Y and Philippov, A and Gadyatskaya, O and Crispo, B and Massacci, F},
  title           = {{Towards black box testing of android apps}},
  booktitle       = {Proceedings - 10th International Conference on Availability, Reliability and Security, ARES 2015},
  year            = {2015},
  pages           = {501--510},
  abstract        = {Many state-of-art mobile application testing frameworks (e.g., Dynodroid, Evo Droid) enjoy Emma or other code coverage libraries to measure the coverage achieved. The underlying assumption for these frameworks is availability of the app source code. Yet, application markets and security researchers face the need to test third-party mobile applications in the absence of the source code. There exists a number of frameworks both for manual and automated test generation that address this challenge. However, these frameworks often do not provide any statistics on the code coverage achieved, or provide coarse-grained ones like a number of activities or methods covered. At the same time, given two test reports generated by different frameworks, there is no way to understand which one achieved better coverage if the reported metrics were different (or no coverage results were provided). To address these issues we designed a framework called BBox Tester that is able to generate code coverage reports and produce uniform coverage metrics in testing without the source code. Security researchers can automatically execute applications exploiting current state-of-art tools, and use the results of our framework to assess if the security-critical code was covered by the tests. In this paper we report on design and implementation of BBox Tester and assess its efficiency and effectiveness. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 11},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ARES.2015.70},
  bytitledomenico = {no},
  doi             = {10.1109/ARES.2015.70},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961639115{\&}doi=10.1109{\%}2FARES.2015.70{\&}partnerID=40{\&}md5=ffeb229136d0352b81badc96db107eaa},
}

@Article{SAHAR201928,
  author          = {Sahar, Hareem and Bangash, Abdul A and Beg, Mirza O},
  title           = {{Towards energy aware object-oriented development of android applications}},
  journal         = {Sustainable Computing: Informatics and Systems},
  year            = {2019},
  volume          = {21},
  pages           = {28--46},
  issn            = {2210-5379},
  abstract        = {Energy consumption has become a concern for developers due to the increasing complexity of applications that are to run on devices with limited battery power. Developers want to develop energy efficient applications however existing tools do not bridge the gap between understanding where energy is consumed and suggesting how the code can be modified in order to reduce energy consumption. A generalized method to relate software structure with its energy consumption is hence desirable. Previous attempts to relate change in object-oriented structure to its effects on energy consumption have been inconclusive. In this paper, we proposed a methodology to relate software structural information represented as metrics to energy consumption. Employing our methodology we empirically validated three Object Oriented (OO) metric suites; the Abreus Metrics (MOOD), Chidamber and Kemerer (CK) metrics and Martin's package metric suite and determine their relationship with energy consumption. Our results show that software structural metrics can be reliably related to energy consumption behavior of programs using a total of 63 releases from seven open-source iteratively developed android applications.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S2210537918302014},
  bdsk-url-2      = {https://doi.org/10.1016/j.suscom.2018.10.005},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.suscom.2018.10.005},
  keywords        = {Energy-aware development, Mining software repositories, Software metrics, Static analysis, Sustainable software,Energy consumption},
  url             = {http://www.sciencedirect.com/science/article/pii/S2210537918302014},
}

@Conference{Shin200987,
  author          = {Shin, W and Kiyomoto, S and Fukushima, K and Tanaka, T},
  title           = {{Towards formal analysis of the permission-based security model for Android}},
  booktitle       = {5th International Conference on Wireless and Mobile Communications, ICWMC 2009},
  year            = {2009},
  pages           = {87--92},
  abstract        = {Since the source code of Android was released to the public, people have concerned about the security of the Android system. Whereas the insecurity of a system can be easily exaggerated even with few minor vulnerabilities, the security is not easily demonstrated. Formal methods have been favorably applied for the purpose of ensuring security in different contexts to attest whether the system meets the security goals or not by relying on mathematical proofs. In order to commence the security analysis of Android, we specify the permission mechanism for the system. We represent the system in terms of a state machine, elucidate the security needs, and show that the specified system is secure over the specified states and transitions. We expect that this work will provide the basis for assuring the security of the Android system. The specification and verification were carried out using the Coq proof assistant. {\textcopyright} 2009 IEEE.},
  annote          = {cited By 26},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICWMC.2009.21},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICWMC.2009.21},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-72349098599{\&}doi=10.1109{\%}2FICWMC.2009.21{\&}partnerID=40{\&}md5=9b5eb5e44c267221f1a35aff78a9e7fd},
}

@Conference{Betarte20171,
  author          = {Betarte, G and Campo, J and Cristi{\'{a}}, M and Gorostiaga, F and Luna, C and Sanz, C},
  title           = {{Towards formal model-based analysis and testing of Android's security mechanisms}},
  booktitle       = {2017 43rd Latin American Computer Conference, CLEI 2017},
  year            = {2017},
  volume          = {2017-January},
  pages           = {1--10},
  abstract        = {This article reports on our experiences in applying formal methods to verify the security mechanisms of Android. We have developed a comprehensive formal specification of Android's permission model, which has been used to state and prove properties that establish expected behavior of the procedures that enforce the defined access control policy. We are also interested in providing guarantees concerning actual implementations of the mechanisms. Therefore we are following a verification approach that combines the use of idealized models on which fundamental properties are formally verified with testing of actual implementations using lightweight model-based techniques. We describe the formalized model, present security properties that have been verified using the Coq proof assistant and discuss a testing technique that relies on the use of certified algorithms. {\textcopyright} 2017 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CLEI.2017.8226404},
  bytitledomenico = {doubt},
  doi             = {10.1109/CLEI.2017.8226404},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046474653{\&}doi=10.1109{\%}2FCLEI.2017.8226404{\&}partnerID=40{\&}md5=a92f0bf240bedcfe53031f0adb189830},
}

@Article{ISI:000435335100005,
  author          = {Bai, Guangdong and Ye, Quanqi and Wu, Yongzheng and Botha, Heila and Sun, Jun and Liu, Yang and Dong, Jin Song and Visser, Willem},
  title           = {{Towards Model Checking Android Applications}},
  journal         = {IEEE TRANSACTIONS ON SOFTWARE ENGINEERING},
  year            = {2018},
  volume          = {44},
  number          = {6},
  pages           = {595--612},
  issn            = {0098-5589},
  abstract        = {As feature-rich Android applications (apps for short) are increasingly popularized in security-sensitive scenarios, methods to verify their security properties are highly desirable. Existing approaches on verifying Android apps often have limited effectiveness. For instance, static analysis often suffers from a high false-positive rate, whereas approaches based on dynamic testing are limited in coverage. In this work, we propose an alternative approach, which is to apply the software model checking technique to verify Android apps. We have built a general framework named DroidPF upon Java PathFinder (JPF), towards model checking Android apps. In the framework, we craft an executable mock-up Android OS which enables JPF to dynamically explore the concrete state spaces of the tested apps; we construct programs to generate user interaction and environmental input so as to drive the dynamic execution of the apps; and we introduce Android specific reduction techniques to help alleviate the state space explosion. DroidPF focuses on common security vulnerabilities in Android apps including sensitive data leakage involving a non-trivial flow- and context-sensitive taint-style analysis. DroidPF has been evaluated with 131 apps, which include real-world apps, third-party libraries, malware samples and benchmarks for evaluating app analysis techniques like ours. DroidPF precisely identifies nearly all of the previously known security issues and nine previously unreported vulnerabilities/bugs.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/TSE.2017.2697848},
  bytitledomenico = {yes},
  doi             = {10.1109/TSE.2017.2697848},
  keywords        = {,Android (operating system),Android OS,Android apps verification,Android specific reduction techniques,Androids,DroidPF,Humanoid robots,Java,Java PathFinder,Libraries,Model checking,Security,Software,Software model checking,android application,app analysis techniques,concrete state spaces,context-sensitive taint-style analysis,dynamic execution,environmental input,feature-rich Android applications,invasive software,malware samples,mobile computing,model checking,nontrivial flow-style analysis,program diagnostics,program verification,public domain software,real-world apps,security properties,security verification,security-sensitive scenarios,sensitive data leakage,state space explosion,tested apps,third-party libraries,user interaction},
}

@InProceedings{7345261,
  author          = {Weiss, R and Reznik, L and Zhuang, Y and Hoffman, A and Pollard, D and Rafetseder, A and Li, T and Cappos, J},
  title           = {{Trust Evaluation in Mobile Devices: An Empirical Study}},
  booktitle       = {2015 IEEE Trustcom/BigDataSE/ISPA},
  year            = {2015},
  volume          = {1},
  pages           = {25--32},
  abstract        = {Mobile devices today, such as smartphones and tablets, have become both more complex and diverse. This paper presents a framework to evaluate the trustworthiness of the individual components in a mobile system, as well as the entire system. The major components are applications, devices and networks of devices. Given this diversity and multiple levels of a mobile system, we develop a hierarchical trust evaluation methodology, which enables the combination of trust metrics and allows us to verify the trust metric for each component based on the trust metrics for others. The paper first demonstrates this idea for individual applications and Android-based smartphones. The methodology involves two stages: initial trust evaluation and trust verification. In the first stage, an expert rule system is used to produce trust metrics at the lowest level of the hierarchy. In the second stage, the trust metrics are verified by comparing data from components and a trust evaluation is produced for the combined system. This paper presents the results of two empirical studies, in which this methodology is applied and tested. The first study involves monitoring resource utilization and evaluating trust based on resource consumption patterns. We measured battery voltage, CPU utilization and network communication for individual apps and detected anomalous behavior that could be indicative of malicious code. The second study involves verification of the trust evaluation by comparing the data from two different devices: the GPS location from an Android smartphone in an automobile and the data from an on-board diagnostics (OBD) sensor of the same vehicle.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/Trustcom.2015.353},
  bytitledomenico = {yes},
  doi             = {10.1109/Trustcom.2015.353},
  keywords        = {Android (operating system);expert systems;mobile computing;power aware computing;program verification;resource allocation;smart phones;system monitoring;trusted computing;voltage measurement;mobile devices;tablets;trustworthiness evaluation;hierarchical trust evaluation methodology;trust metrics;Android-based smartphones;trust verification;expert rule system;resource utilization monitoring;resource consumption patterns;battery voltage measurement;CPU utilization;network communication;anomalous behavior detection;GPS location;Android smartphone;onboard diagnostics sensor;OBD sensor;Measurement;Security;Smart phones;Electronic mail;Computer science;Privacy;trust metrics;security;mobile computing},
}

@InProceedings{7999579,
  author          = {Martinelli, F and Mercaldo, F and Nardone, V and Santone, A},
  title           = {{Twinkle twinkle little DroidDream, How I wonder what you are?}},
  booktitle       = {2017 IEEE International Workshop on Metrology for AeroSpace (MetroAeroSpace)},
  year            = {2017},
  pages           = {21--25},
  abstract        = {Android is the most diffused environment for embedded systems. Not only mobile devices are Android powered, as matter of fact also in automotive and robotics fields, customized Android versions are currently employed. While Android offers several pro, from the stable kernel to the no usage of royalties, there are also cons, one of the most serious is related to the security of the operating systems. In particular, the official market has shown that is not able to block promptly the publication of malicious software. In this paper we discuss a model checking based approach to detect malware related to Android environment. In the evaluation we focus on the DroidDream threat, a malware able to evade the security mechanism provided by the Android official market, obtaining encouraging results.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/MetroAeroSpace.2017.7999579},
  bytitledomenico = {no},
  doi             = {10.1109/MetroAeroSpace.2017.7999579},
  keywords        = {Android (operating system);embedded systems;formal verification;invasive software;mobile computing;DroidDream;Android;embedded systems;mobile devices;operating systems security;malicious software;model checking;malware;Malware;Smart phones;Androids;Humanoid robots;Model checking;Payloads;Security},
}

@Article{Su2019389,
  author          = {Su, X and Lin, J and Shen, F and Zheng, Y},
  title           = {{Two-phases detection scheme: Detecting android malware in android markets}},
  journal         = {Advances in Intelligent Systems and Computing},
  year            = {2019},
  volume          = {842},
  pages           = {389--399},
  abstract        = {Recently, Android application becomes popular and important in human's daily work, life, entertainment. However, because of open source of Android application, more and more malware aim to this platform and launch various malicious attacks to threaten Android users' security. Previous research works focus on using static behavioral analysis to detect Android malware, which cannot capture dynamic behaviors and in-efficiency to detect Android malware. In this paper, we present a Android application two-stage detection scheme that using two kinds of dynamic behavioral characteristics to detect Android malware. This framework first uses system call statistics to identify potential malicious apps. After verification, if the software is clean, the application will then be released to the relevant markets. To mitigate against false negative cases, users who run new apps can invoke our network traffic monitoring (NTM) tool which triggers network traffic capture upon detecting some suspicious behaviors e.g. detecting sensitive data being sent to output stream of an open socket. The network traffic will be analyzed to see if it matches network characteristics observed from malware apps. If suspicious network traffic is observed, the relevant Android markets will be notified to remove the application from the repository. We trained our system call and network traffic classifiers using 32 families of known Android malware families and some typical normal apps. Later, we evaluated our framework using other malware and normal apps that used in the training set. Our experimental results using 120 test apps (which consist of 50 malware and 70 normal apps) indicate that we can achieve a 94.2{\%} and 99.2{\%} accuracy with J.48 and Random forest classifier respectively using our framework. {\textcopyright} Springer Nature Switzerland AG 2019.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-98776-7_41},
  bytitledomenico = {yes},
  doi             = {10.1007/978-3-319-98776-7_41},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056839530{\&}doi=10.1007{\%}2F978-3-319-98776-7{\_}41{\&}partnerID=40{\&}md5=920df0e8e09f8285606529a17eea3300},
}

@Conference{Feng2016398,
  author          = {Feng, H and Shin, K G},
  title           = {{Understanding and defending the binder attack surface in android}},
  booktitle       = {ACM International Conference Proceeding Series},
  year            = {2016},
  volume          = {5-9-December-2016},
  pages           = {398--409},
  abstract        = {In Android, communications between apps and system services are supported by a transaction-based Inter-Process Communication (IPC) mechanism. Binder, as the cornerstone of this IPC mechanism, separates two communicating parties as client and server. As with any client-server model, the server should not make any assumption on the validity (sanity) of client-side transaction. To our surprise, we find this principle has frequently been overlooked in the implementation of Android system services. In this paper, we try to answer why developers keep making this seemingly simple mistake by studying more than 100 vulnerabilities on this attack surface. We analyzed these vulnerabilities to find that most of them are rooted at a common confusion of where the actual security boundary is among system developers. We thus highlight the deficiency of testing only on client-side public APIs and argue for the necessity of testing and protection on the Binder interface - the actual security boundary. Specifically, we design and implement BinderCracker, an automatic testing framework that supports context-aware fuzzing and actively manages the dependency between transactions. It does not require the source codes of the component under test, is compatible with services in different layers, and performs much more effectively than simple black-box fuzzing. We also call attention to the attack attribution problem for IPC-based attacks. The lack of OS-level support makes it very difficult to identify the culprit apps even for developers with adb access. We address this issue by providing an informative runtime diagnostic tool that tracks the origin, schema, content, and parsing details of each failed transaction. This brings transparency into the IPC process and provides an essential step for other in-depth analysis or forensics. {\textcopyright} 2016 ACM.},
  annote          = {cited By 1},
  bdsk-url-1      = {http://dx.doi.org/10.1145/2991079.2991120},
  bytitledomenico = {yes},
  doi             = {10.1145/2991079.2991120},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007557397{\&}doi=10.1145{\%}2F2991079.2991120{\&}partnerID=40{\&}md5=1368f91f407112e2d758370bdc5d4a52},
}

@Conference{Kochhar2015,
  author          = {Kochhar, P S and Thung, F and Nagappan, N and Zimmermann, T and Lo, D},
  title           = {{Understanding the test automation culture of app developers}},
  booktitle       = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation, ICST 2015 - Proceedings},
  year            = {2015},
  abstract        = {Smartphone applications (apps) have gained popularity recently. Millions of smartphone applications (apps) are available on different app stores which gives users plethora of options to choose from, however, it also raises concern if these apps are adequately tested before they are released for public use. In this study, we want to understand the test automation culture prevalent among app developers. Specifically, we want to examine the current state of testing of apps, the tools that are commonly used by app developers, and the problems faced by them. To get an insight on the test automation culture, we conduct two different studies. In the first study, we analyse over 600 Android apps collected from F- Droid, one of the largest repositories containing information about open-source Android apps. We check for the presence of test cases and calculate code coverage to measure the adequacy of testing in these apps. We also survey developers who have hosted their applications on GitHub to understand the testing practices followed by them. We ask developers about the tools that they use and ''pain points'' that they face while testing Android apps. For the second study, based on the responses from Android developers, we improve our survey questions and resend it to Windows app developers within Microsoft. We conclude that many Android apps are poorly tested - only about 14{\%} of the apps contain test cases and only about 9{\%} of the apps that have executable test cases have coverage above 40{\%}. Also, we find that Android app developers use automated testing tools such as JUnit, Monkeyrunner, Robotium, and Robolectric, however, they often prefer to test their apps manually, whereas Windows app developers prefer to use in-house tools such as Visual Studio and Microsoft Test Manager. Both Android and Windows app developers face many challenges such as time constraints, compatibility issues, lack of exposure, cumbersome tools, etc. We give suggestions to improve the test automation culture in the growing app community. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 39},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICST.2015.7102609},
  bytitledomenico = {no},
  doi             = {10.1109/ICST.2015.7102609},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935144721{\&}doi=10.1109{\%}2FICST.2015.7102609{\&}partnerID=40{\&}md5=a403ac10f41eb788589434e50e7b91aa},
}

@InProceedings{Xu:2016:UDA:2851581.2892404,
  author          = {Xu, Jing and Ding, Xiang and Huang, Ke and Chen, Guanling},
  title           = {{Unsupervised Detection of Abnormal Moments for Usability Testing of Mobile Apps}},
  booktitle       = {Proceedings of the 2016 CHI Conference Extended Abstracts on Human Factors in Computing Systems},
  year            = {2016},
  series          = {CHI EA '16},
  pages           = {3247--3254},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {In this paper, we explore the idea of mining unexpected user interactions with mobile apps, as a way to detect usability problems through an unsupervised learning approach. We consider an interaction (or UI event) during task execution as the detection target, and derive novel features from the perspectives of transition probabilities, dwell time distribution, and context-related statistics. We propose an unsupervised learning approach to differentiate between normal and abnormal interactions through clustering on these features. Experimental results validate that the proposed method is effective in detecting different types of abnormal interactions and identifying usability issues.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2851581.2892404},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2851581.2892404},
  bytitledomenico = {doubt},
  doi             = {10.1145/2851581.2892404},
  isbn            = {978-1-4503-4082-3},
  keywords        = {dwell time, usability testing, user interactions,clustering},
  url             = {http://doi.acm.org/10.1145/2851581.2892404},
}

@Conference{Xing2014393,
  author          = {Xing, L and Pan, X and Wang, R and Yuan, K and Wang, X F},
  title           = {{Upgrading your Android, elevating my malware: Privilege escalation through mobile OS updating}},
  booktitle       = {Proceedings - IEEE Symposium on Security and Privacy},
  year            = {2014},
  pages           = {393--408},
  abstract        = {Android is a fast evolving system, with new updates coming out one after another. These updates often completely overhaul a running system, replacing and adding tens of thousands of files across Android's complex architecture, in the presence of critical user data and applications (apps for short). To avoid accidental damages to such data and existing apps, the upgrade process involves complicated program logic, whose security implications, however, are less known. In this paper, we report the first systematic study on the Android updating mechanism, focusing on its Package Management Service (PMS). Our research brought to light a new type of security-critical vulnerabilities, called Pileup flaws, through which a malicious app can strategically declare a set of privileges and attributes on a low-version operating system (OS) and wait until it is upgraded to escalate its privileges on the new system. Specifically, we found that by exploiting the Pileup vulnerabilities, the app can not only acquire a set of newly added system and signature permissions but also determine their settings (e.g., protection levels), and it can further substitute for new system apps, contaminate their data (e.g., cache, cookies of Android default browser) to steal sensitive user information or change security configurations, and prevent installation of critical system services. We systematically analyzed the source code of PMS using a program verification tool and confirmed the presence of those security flaws on all Android official versions and over 3000 customized versions. Our research also identified hundreds of exploit opportunities the adversary can leverage over thousands of devices across different device manufacturers, carriers and countries. To mitigate this threat without endangering user data and apps during an upgrade, we also developed a new detection service, called SecUP, which deploys a scanner on the user's device to capture the malicious apps designed to exploit Pileup vulnerabilities, based upon the vulnerability-related information automatically collected from newly released Android OS images. {\textcopyright} 2014 IEEE.},
  annote          = {cited By 52},
  bdsk-url-1      = {http://dx.doi.org/10.1109/SP.2014.32},
  bytitledomenico = {yes},
  doi             = {10.1109/SP.2014.32},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914140121{\&}doi=10.1109{\%}2FSP.2014.32{\&}partnerID=40{\&}md5=017fa059652d68dec9a89ce0084a3e2e},
}

@Article{MATTSON20151,
  author          = {Mattson, Donald C},
  title           = {{Usability assessment of a mobile app for art therapy}},
  journal         = {The Arts in Psychotherapy},
  year            = {2015},
  volume          = {43},
  pages           = {1--6},
  issn            = {0197-4556},
  abstract        = {Art therapists recently assembled a list of desirable features for an art therapy app. The Art Therapy Draw! app includes two of them in its design: a portfolio option, and stronger security. Five art therapists evaluated the app through a System Usability Scale (SUS). The evaluation revealed both positive qualities of the program and areas requiring improvement. Overall, the layout of the app proved easy to navigate and required little knowledge to operate. It offered more security measures than other apps. In addition, the expert users commented that the app would likely be suitable for use with disabled persons or those allergic to conventional art materials. This study marks a step toward instituting design considerations for emerging mobile art therapy.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0197455615000088},
  bdsk-url-2      = {https://doi.org/10.1016/j.aip.2015.02.005},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.aip.2015.02.005},
  keywords        = {Computer, Digital, Drawing, Mobile,App},
  url             = {http://www.sciencedirect.com/science/article/pii/S0197455615000088},
}

@InProceedings{Mathur:2018:UEF:3210459.3210480,
  author          = {Mathur, Neeraj and Karre, Sai Anirudh and Reddy, Y Raghu},
  title           = {{Usability Evaluation Framework for Mobile Apps Using Code Analysis}},
  booktitle       = {Proceedings of the 22Nd International Conference on Evaluation and Assessment in Software Engineering 2018},
  year            = {2018},
  series          = {EASE'18},
  pages           = {187--192},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {The increasing usage of smart-phones has resulted in mobile applications replacing or supplementing traditional web-based applications. Given the limitations of the form factor in smartphones, usability can be considered as one of the important attributes that determine the success of a mobile application. The measures available for assessing the usability of mobile applications tend to focus more on human aspects and less on the functional aspects of usability. As part of this paper, we propose a usability evaluation framework to identify functional usability issues specific to mobile applications. This framework uses usability guidelines and code analysis to improve the usability of a mobile application. As a proof of concept, we have built an end-to-end system using the framework to validate and verify usability issues in Android mobile applications. We also generate code recommendations to implement failed usability guidelines.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3210459.3210480},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3210459.3210480},
  bytitledomenico = {yes},
  doi             = {10.1145/3210459.3210480},
  isbn            = {978-1-4503-6403-4},
  keywords        = {Code Analysis, Mobile Apps, Mobile Usability, Usability Evaluation, Usability Guidelines,Automation},
  url             = {http://doi.acm.org/10.1145/3210459.3210480},
}

@Article{Abubakar201653,
  author          = {Abubakar, H I and Hashim, N L and Hussain, A},
  title           = {{Usability evaluation model for mobile banking applications interface: Model evaluation process using experts' panel}},
  journal         = {Journal of Telecommunication, Electronic and Computer Engineering},
  year            = {2016},
  volume          = {8},
  number          = {10},
  pages           = {53--57},
  abstract        = {Many of the existing usability evaluation models for mobile applications have not been evaluated to determine its usefulness, accuracy and applicability in to the real world environment. This may not provide confidence on the side of the evaluator and the results may not be comprehensive and valid. A model for evaluating the usability of mobile banking applications interface is developed in response to usability practitioners and m-banking applications developers' needs. The experts implemented the model using various m-banking application platforms through heuristic evaluation method. A list of predefined validation measures were used by the experts' in order to determine the accuracy and applicability of the proposed model. The results show that the model is useful, accurate and can be used for evaluating the usability of m-banking applications interface. Therefore, this paper will benefit both the research community and the usability practitioners towards better understanding of model validation process.},
  annote          = {cited By 1},
  bdsk-url-1      = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011411611%7B%5C&%7DpartnerID=40%7B%5C&%7Dmd5=e5dec85b0d598ee1aa87874a0d8e2e4b},
  bytitledomenico = {yes},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011411611{\&}partnerID=40{\&}md5=e5dec85b0d598ee1aa87874a0d8e2e4b},
}

@Article{IQBAL20172185,
  author          = {Iqbal, Muhammad Waseem and Ahmad, Nadeem and Shahzad, Syed Khuram},
  title           = {{Usability evaluation of adaptive features in smartphones}},
  journal         = {Procedia Computer Science},
  year            = {2017},
  volume          = {112},
  pages           = {2185--2194},
  issn            = {1877-0509},
  abstract        = {This paper presents a usability study that aims to analyze effectiveness, efficiency, and satisfaction based on the existing adaptive features in smartphones. The adaptive features include screen rotation, voice commands, LED notifications and kid mode for android and iOS platforms. The effectiveness and efficiency are measured by considering task completion within a specific time while satisfaction is measured through After Scenario Questionnaire (ASQ) technique. The experiment is carried out with the involvement of 128 participants. The study shows interesting patterns in usability where screen rotation and voice commands resulted in lower usability. Whereas, LED notifications is a dominant feature having almost 88{\%} effectiveness comparing to a non-adaptive environment. Finally, the study suggests that the adaptive features must be applied after careful analysis of user tasks and context.},
  annote          = {Knowledge-Based and Intelligent Information {\&} Engineering Systems: Proceedings of the 21st International Conference, KES-20176-8 September 2017, Marseille, France},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1877050917316678},
  bdsk-url-2      = {https://doi.org/10.1016/j.procs.2017.08.258},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.procs.2017.08.258},
  keywords        = {adaptive mobile feature, smartphone, user experience, user interface, user satisfaction,Usability patterns},
  url             = {http://www.sciencedirect.com/science/article/pii/S1877050917316678},
}

@InProceedings{ISI:000366872700026,
  author          = {Weinlich, Petr and Semeradova, Tereza},
  title           = {{Usability Testing of Early Warning Mobile Applications with Eye Tracking}},
  booktitle       = {INNOVATION MANAGEMENT AND SUSTAINABLE ECONOMIC COMPETITIVE ADVANTAGE: FROM REGIONAL DEVELOPMENT TO GLOBAL GROWTH, VOLS I - VI, 2015},
  year            = {2015},
  editor          = {{Soliman, KS}},
  pages           = {248--254},
  organization    = {Int Business Informat Management Assoc},
  abstract        = {The fallowing paper explores the possibilities of implementing eye
tracking technology during the design of an early warning mobile
application. The authors using two available mobile applications related
to crises management apply eye tracker testing in order to identify
possible insufficiencies in the applications' design from the user
perspective. However, the main aim of the paper does not consist in
proposing optimizations for the presented applications, the authors
focus rather on designing a suitable testing method that could be used
for the assessment of a future early warning application adjusted to
fulfill user design (UX) requirements.},
  annote          = {26th International-Business-Information-Management-Association Conference, Madrid, SPAIN, NOV 11-12, 2015},
  bytitledomenico = {doubt},
  isbn            = {978-0-9860419-5-2},
}

@Article{BASTIEN2010e18,
  author          = {Bastien, J M Christian},
  title           = {{Usability testing: a review of some methodological and technical aspects of the method}},
  journal         = {International Journal of Medical Informatics},
  year            = {2010},
  volume          = {79},
  number          = {4},
  pages           = {e18 -- e23},
  issn            = {1386-5056},
  abstract        = {The aim of this paper is to review some work conducted in the field of user testing that aims at specifying or clarifying the test procedures and at defining and developing tools to help conduct user tests. The topics that have been selected were considered relevant for evaluating applications in the field of medical and health care informatics. These topics are: the number of participants that should take part in a user test, the test procedure, remote usability evaluation, usability testing tools, and evaluating mobile applications.},
  annote          = {Human Factors Engineering for Healthcare Applications Special Issue},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1386505608002098},
  bdsk-url-2      = {https://doi.org/10.1016/j.ijmedinf.2008.12.004},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.ijmedinf.2008.12.004},
  keywords        = {Automatic capture, Diary, Empirical user test, Log files, Mobile applications, Remote usability evaluation, Usability testing, Usability testing tools, User events, User testing, User traces, Users,User centered design},
  url             = {http://www.sciencedirect.com/science/article/pii/S1386505608002098},
}

@Article{Bollini2014652,
  author          = {Bollini, L and {De Palma}, R and Nota, R and Pietra, R},
  title           = {{User experience {\&} usability for mobile geo-referenced apps. A case study applied to cultural heritage field}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2014},
  volume          = {8580 LNCS},
  number          = {PART 2},
  pages           = {652--662},
  abstract        = {The mobile revolution has become the main access gate to Internet in a diffused communication ecosystems. Consequently the apps become the interface mediation between the user and the real/virtual space of information. The opportunity of associating data to a physical position requires deeper thought: this means the interweaving between perception of the real-world, representation in digital systems and the mental model of users. The research presented proposes an extension of user testing methodologies - of the user-centered design - applied to user interaction with mobile app in which the geo-referenced feature is the focus of the user experience. In particular, the case study The Bethroted 2.0 becomes the experimental research field. Using a mixed methodology approach - qualitative interviews, in-field research and spatial user tests according to both ambient psychology and user-centered design - the prototype is tested. The experimental activities were addressed analyze both the environmental interactions and with the app trying to better understand the relations between real and digital space and the mental model of the users. {\textcopyright} 2014 Springer International Publishing.},
  annote          = {cited By 4},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-09129-7_47},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-09129-7_47},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904861828{\&}doi=10.1007{\%}2F978-3-319-09129-7{\_}47{\&}partnerID=40{\&}md5=f173380d47c4667ed0c93c6f9bad6905},
}

@Article{Forte2017614,
  author          = {Forte, J and Darin, T},
  title           = {{User experience evaluation for user interface redesign: A case study on a bike sharing application}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10290 LNCS},
  pages           = {614--631},
  abstract        = {Mobile application redesign requires the accurate use of design methods and guidelines, as well as detailed evaluation. In the context of alternative and environmentally friendly transportation supported by mobile applications, the redesign process can help enhancing the user experience resulting in a greater adherence of the citizen. To illustrate this scenario and inspire designers to further consider the user experience aspects, we present a case study of the redesign of Bicicletar, a Brazilian bike-sharing application. Our main goal is to analyze how the User Experience (UX) with this outdoor mobility application may affect the design choices in the User Interface. Overall, our iterative redesign process comprised: (1) UX evaluation of the application in the real usage context; (2) redesign of the application through a high-fidelity prototype; and (3) prototype validation. The results showed that the user experience problems regarding the identification and interaction with the main features of Bicicletar affected the perceived usability of the application. On the other hand, the redesigned prototype improvements on the user interface positively affected not only the user experience but also how the users trust the application. The present research is a starting point for the implementation of improvements in Bicicletar and in over 10 variations of this application in other Brazilian states, benefiting the local community, and serving as a reference for the redesign of other mobile applications. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-58640-3_44},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-58640-3_44},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025135856{\&}doi=10.1007{\%}2F978-3-319-58640-3{\_}44{\&}partnerID=40{\&}md5=2e665c43a2cab1e77e3d8bf4e9cbb0b9},
}

@InProceedings{Yang:2018:UEM:3227696.3227698,
  author          = {Yang, Shu-Chen and Lee, Tzu-Ling and Feng, Tzu-Ting},
  title           = {{User Experience of Mobile Application's Interface: Measurement Development}},
  booktitle       = {Proceedings of the 5th Multidisciplinary International Social Networks Conference},
  year            = {2018},
  series          = {MISNC '18},
  pages           = {2:1----2:5},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {With the rapid development of wireless network technology, mobile devices offer better and versatile functions and services than ever before. As the part that users can frequently interact with in whole system, user interface allows the users to experience the system directly. To improve the users' appraisal and satisfaction with the system, it is important to understand the user experiences from the interaction between the users and the interface. However, due to the characteristics of mobile devices, such as the small screen size, mobility and user's short-term memory, mobile devices are significantly different from personal computer. It is not suitable to apply the existing scales directly to the mobile application interface. Thus, this study combined the exiting scales with the "cognitive load" construct which is an important concept of the mobile application interface, to develop a scale which can be employed to measure user experience of mobile application's interface.

Through the literature review, expert reviews and exploratory factor analysis based on 581 valid questionnaire responses, the study extracts five constructs, namely, information quality, cognitive load, error resolution, visual aesthetic and system attitude, a total of 43 measurement items. This new scale can be reference for interface design of mobile application for practitioners to improve the user mobile experience. The study also established a research model and tried to investigate the relationship among above five constructs. The analysis based on 581 valid data shows that cognitive load and error resolution play full mediators of the relationship between information quality and system attitude. The result provides a new direction for this line of research.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3227696.3227698},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3227696.3227698},
  bytitledomenico = {doubt},
  doi             = {10.1145/3227696.3227698},
  isbn            = {978-1-4503-6465-2},
  keywords        = {Scale Development, User Experience, User Interface,Mobile Application Interface},
  url             = {http://doi.acm.org/10.1145/3227696.3227698},
}

@InProceedings{ISI:000327761500132,
  author          = {Wang, You-ying and Shen, Ye and Yang, Yang and Ma, Jie and Ma, En-ping and Shi, Xun-zhi},
  title           = {{User interface usability studies on different operating systems}},
  booktitle       = {PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON COMPUTER, NETWORKS AND COMMUNICATION ENGINEERING (ICCNCE 2013)},
  year            = {2013},
  editor          = {{Zheng, D and Shi, J and Zhang, L}},
  volume          = {30},
  series          = {Advances in Intelligent Systems Research},
  pages           = {533--537},
  abstract        = {This article abstractly introduces the relevant technologies about user
interface software testing, and focuses on mobile terminals' design
requirements for user interface and usability guidelines for further
exploration. On this basis, using intelligent we apply manual testing
methods in aspects of user-friendliness, information platform of Urban
Construction Group as the example, content and table, form, navigation
and interface aesthetics and coordination testing for analyzing the web
applications' interface usability on Windows, Android and ios operating
systems. According to outcomes of our experiment, the UI usability of
the program conform to design requirement and turn out effective},
  annote          = {International Conference on Computer, Networks and Communication Engineering (ICCNCE), Beijing, PEOPLES R CHINA, MAY 23-24, 2013},
  bytitledomenico = {doubt},
  isbn            = {978-90-78677-67-3},
  issn            = {1951-6851},
}

@InProceedings{6825641,
  author          = {Vilkomir, S and Amstutz, B},
  title           = {{Using Combinatorial Approaches for Testing Mobile Applications}},
  booktitle       = {2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops},
  year            = {2014},
  pages           = {78--83},
  abstract        = {Device-specific faults are very common for mobile software applications. To avoid such faults and guarantee the reliability and quality of mobile applications, sufficient testing is required on different mobile devices, which is expensive and time-consuming. This makes the task of the optimal selection of mobile devices for testing important and interesting from both practical and theoretical points of view. The suggested approach in this paper is based on combinatorial methods for coverage of each device characteristics. The initial results of the experimental investigation using comparisons with a random selection of devices are provided and show that the proposed approach is effective and promising.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/ICSTW.2014.9},
  bytitledomenico = {doubt},
  doi             = {10.1109/ICSTW.2014.9},
  keywords        = {mobile computing;program testing;software fault tolerance;software quality;combinatorial approach;mobile software applications testing;device specific faults;software reliability;software quality;random mobile devices selection;Testing;Smart phones;Mobile communication;Androids;Humanoid robots;Random access memory;testing;mobile applications;device-specific failures;combinatorial coverage},
}

@InProceedings{7983091,
  author          = {Malik, N and Chandramouli, J and Suresh, P and Fairbanks, K and Watkins, L and Robinson, W H},
  title           = {{Using network traffic to verify mobile device forensic artifacts}},
  booktitle       = {2017 14th IEEE Annual Consumer Communications Networking Conference (CCNC)},
  year            = {2017},
  pages           = {114--119},
  abstract        = {This paper presents a method of device type verification via network behavior examination. This work is compared to methods and applications like nMap or xProbe, because it is capable of discerning mobile operating systems (OS) by using both active and passive network traffic. Our approach, which is based on repeatable experiments, suggests that the three major mobile OS vendors (i.e., Android, iOS, and Microsoft) down throttle the network response of some network traffic sent to them (e.g., ICMP pings) or requested by them (e.g., streaming TCP/IP) in different ways, likely to conserve battery power. Consequently, it affects the network behavior of the devices and how they handle certain events. We took the following steps as a proof-of-concept: (1) ICMP packets are actively sent to (i.e., ping) or (2) passively received by (i.e., streaming video) Android, iOS, and Microsoft mobile devices, (3) the resulting network traffic is analyzed, and (4) machine learning methods are trained to discern among the three OS types. We demonstrate that this method works well using either actively or passively generated network traffic. This method is more flexible than methods that rely solely on MAC addresses or other historical analysis methods for the identification of mobile OS type.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CCNC.2017.7983091},
  bytitledomenico = {doubt},
  doi             = {10.1109/CCNC.2017.7983091},
  issn            = {2331-9860},
  keywords        = {Android (operating system);computer network security;digital forensics;learning (artificial intelligence);mobile computing;telecommunication traffic;mobile device forensic artifact verification;device type verification method;network behavior examination;nMap;xProbe;mobile operating systems;passive network traffic;active network traffic;mobile OS vendors;ICMP packets;Android;iOS;Microsoft mobile devices;machine learning methods;MAC addresses;mobile OS type identification;Mobile handsets;Androids;Humanoid robots;TCPIP;Telecommunication traffic;Portable computers;Android;iPhone;mobile device forensics;security;network forensics;application fingerprinting},
}

@InProceedings{ISI:000366212700028,
  author          = {Betarte, Gustavo and {Diego Campo}, Juan and Luna, Carlos and Romano, Agustin},
  title           = {{Verifying Android's Permission Model}},
  booktitle       = {THEORETICAL ASPECTS OF COMPUTING - ICTAC 2015},
  year            = {2015},
  editor          = {{Leucker, M and Rueda, C and Valencia, FD}},
  volume          = {9399},
  series          = {Lecture Notes in Computer Science},
  pages           = {485--504},
  organization    = {Microsoft Res Ctr; Inria; CNRS; CLEI; Colombian Computat Soc},
  abstract        = {In the Android platform application security is built primarily upon a
system of permissions which specify restrictions on the operations a
particular process can perform. Several analyses have recently been
carried out concerning the security of the Android system. Few of them,
however, pay attention to the formal aspects of the permission enforcing
framework. In this work we present a comprehensive formal specification
of an idealized formulation of Android's permission model and discuss
several security properties that have been verified using the proof
assistant Coq.},
  annote          = {12th International Colloquium on Theoretical Aspects of Computing (ICTAC), Univ Javeriana Cali, Cali, COLOMBIA, OCT 29-31, 2015},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-25150-9_28},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-25150-9_28},
  isbn            = {978-3-319-25150-9; 978-3-319-25149-3},
  issn            = {0302-9743},
}

@Conference{Gilbert201121,
  author          = {Gilbert, P and Chun, B.-G. and Cox, L P and Jung, J},
  title           = {{Vision: Automated security validation of mobile apps at app markets}},
  booktitle       = {MobiSys'11 - Compilation Proceedings of the 9th Int. Conf. on Mobile Systems, Applications, and Services and Co-located Workshops - 2011 Workshop on Mobile Cloud Computing and Services, MCS'11},
  year            = {2011},
  pages           = {21--25},
  abstract        = {Smartphones and "app" markets are raising concerns about how third-party applications may misuse or improperly handle users' privacy-sensitive data. Fortunately, unlike in the PC world, we have a unique opportunity to improve the security of mobile applications thanks to the centralized nature of app distribution through popular app markets. Thorough validation of apps applied as part of the app market admission process has the potential to significantly enhance mobile device security. In this paper, we propose AppInspector, an automated security validation system that analyzes apps and generates reports of potential security and privacy violations. We describe our vision for making smartphone apps more secure through automated validation and outline key challenges such as detecting and analyzing security and privacy violations, ensuring thorough test coverage, and scaling to large numbers of apps. {\textcopyright} 2011 ACM.},
  annote          = {cited By 98},
  bdsk-url-1      = {http://dx.doi.org/10.1145/1999732.1999740},
  bytitledomenico = {doubt},
  doi             = {10.1145/1999732.1999740},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79961080173{\&}doi=10.1145{\%}2F1999732.1999740{\&}partnerID=40{\&}md5=b80d7c3623901b420ba759f1eb7f27b2},
}

@Article{Qian201544,
  author          = {Qian, C and Luo, X and Le, Y and Gu, G},
  title           = {{VulHunter: Toward discovering vulnerabilities in android applications}},
  journal         = {IEEE Micro},
  year            = {2015},
  volume          = {35},
  number          = {1},
  pages           = {44--53},
  abstract        = {With the prosperity of the Android app economy, many apps have been published and sold in various markets. However, short development cycles and insufficient security development guidelines have led to many vulnerable apps. Although some systems have been developed for automatically discovering specific vulnerabilities in apps, their effectiveness and efficiency are usually restricted because of the exponential growth of paths to examine and simplified assumptions. In this article, the authors propose a new static-analysis framework for facilitating security analysts to detect vulnerable apps from three aspects. First, they propose an app property graph (APG), a new data structure containing detailed and precise information from apps. Second, by modeling app-related vulnerabilities as graph traversals, the authors conduct graph traversals over APGs to identify vulnerable apps for easing the identification process. Third, they reduce the workload of manual verification by removing infeasible paths and generating attack inputs whenever possible. They have implemented the framework in a system named VulHunter with 9,145 lines of Java code and modeled five types of vulnerabilities. Checking 557 popular apps that are randomly collected from Google Play and have at least 1 million installations, the authors found that 375 apps (67.3 percent) have at least one vulnerability. {\textcopyright} 2015 IEEE.},
  annote          = {cited By 14},
  bdsk-url-1      = {http://dx.doi.org/10.1109/MM.2015.25},
  bytitledomenico = {yes},
  doi             = {10.1109/MM.2015.25},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925070537{\&}doi=10.1109{\%}2FMM.2015.25{\&}partnerID=40{\&}md5=289f2cd69ab31fe96cc3c4fb64a1f4d6},
}

@InProceedings{Wang:2015:VAO:2818000.2818024,
  author          = {Wang, Hui and Zhang, Yuanyuan and Li, Juanru and Liu, Hui and Yang, Wenbo and Li, Bodong and Gu, Dawu},
  title           = {{Vulnerability Assessment of OAuth Implementations in Android Applications}},
  booktitle       = {Proceedings of the 31st Annual Computer Security Applications Conference},
  year            = {2015},
  series          = {ACSAC 2015},
  pages           = {61--70},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Enforcing security on various implementations of OAuth in Android apps should consider a wide range of issues comprehensively. OAuth implementations in Android apps differ from the recommended specification due to the provider and platform factors, and the varied implementations often become vulnerable. Current vulnerability assessments on these OAuth implementations are ad hoc and lack a systematic manner. As a result, insecure OAuth implementations are still widely used and the situation is far from optimistic in many mobile app ecosystems.

To address this problem, we propose a systematic vulnerability assessment framework for OAuth implementations on Android platform. Different from traditional OAuth security analyses that are experiential with a restrictive three-party model, our proposed framework utilizes an systematic security assessing methodology that adopts a five-party, three-stage model to detect typical vulnerabilities of popular OAuth implementations in Android apps. Based on this framework, a comprehensive investigation on vulnerable OAuth implementations is conducted at the level of an entire mobile app ecosystem. The investigation studies the Chinese mainland mobile app markets (e.g., Baidu App Store, Tencent, Anzhi) that covers 15 mainstream OAuth service providers. Top 100 relevant relying party apps (RP apps) are thoroughly assessed to detect vulnerable OAuth implementations, and we further perform an empirical study of over 4,000 apps to validate how frequently developers misuse the OAuth protocol. The results demonstrate that 86.2% of the apps incorporating OAuth services are vulnerable, and this ratio of Chinese mainland Android app market is much higher than that (58.7%) of Google Play.},
  bdsk-url-1      = {http://doi.acm.org/10.1145/2818000.2818024},
  bdsk-url-2      = {http://dx.doi.org/10.1145/2818000.2818024},
  bytitledomenico = {doubt},
  doi             = {10.1145/2818000.2818024},
  isbn            = {978-1-4503-3682-6},
  url             = {http://doi.acm.org/10.1145/2818000.2818024},
}

@InProceedings{6740256,
  author          = {Wu, J and Wu, Y and Yang, M and Wu, Z and Wang, Y},
  title           = {{Vulnerability Detection of Android System in Fuzzing Cloud}},
  booktitle       = {2013 IEEE Sixth International Conference on Cloud Computing},
  year            = {2013},
  pages           = {954--955},
  abstract        = {The rapid growth of Android system has encountered enormous security challenges. The vulnerabilities caused by the limited security models, coarse permission system and code flaws lead to private information leakage, deny of service, potential costs, etc. To detect these vulnerabilities, some analysis and security testing methods have been presented. However, most of these methods focus on certain aspects, for example, applications, permission, or capability leakage. In this paper, we propose a new detection paradigm named Fuzzing Cloud to detect vulnerabilities in Android system. Firstly, the architecture of fuzzing cloud is introduced, and the fuzzing nodes are investigated. Then, each layer of the Android system is decomposed into separated modules, and the fuzzing test cases are created with the endless capacity of processing power and storage in fuzzing cloud. Finally, the prototype of fuzzing cloud has been implemented, and some separated modules have been tested. The experiment results show that some vulnerabilities can be detected by the fuzzing cloud. It is also believed that after small extension, fuzzing cloud can detect vulnerabilities in other systems.},
  bdsk-url-1      = {http://dx.doi.org/10.1109/CLOUD.2013.143},
  bytitledomenico = {doubt},
  doi             = {10.1109/CLOUD.2013.143},
  issn            = {2159-6190},
  keywords        = {Android (operating system);cloud computing;program testing;security of data;vulnerability detection;Android system;fuzzing cloud;limited security models;coarse permission system;code flaws;private information leakage;deny of service;potential costs;security testing method;fuzzing test cases;Androids;Humanoid robots;Security;Computer crashes;Cloud computing;Kernel;Android;Fuzzing;Cloud Computing;Vulnerability Detection;Security Detection},
}

@InProceedings{Villanes:2017:SEA:3131151.3131157,
  author          = {Villanes, Isabel K and Ascate, Silvia M and Gomes, Josias and Dias-Neto, Arilo Claudio},
  title           = {{What Are Software Engineers Asking About Android Testing on Stack Overflow?}},
  booktitle       = {Proceedings of the 31st Brazilian Symposium on Software Engineering},
  year            = {2017},
  series          = {SBES'17},
  pages           = {104--113},
  address         = {New York, NY, USA},
  publisher       = {ACM},
  abstract        = {Software testing represents an important activity to achieve quality during mobile application development. The constant evolution of mobile applications in previous years relating to size and complexity entails the need to improve testing techniques and tools. In this context, developers/testers often resort to specialized communities or Question & Answer repositories to clarity doubts regarding testing in a practical and efficient way. Thus, these repositories become a popular source of data to understand the current context of software testing practices. In this paper, we present a study using the Stack Overflow repository for analyzing and clustering the main topics on Android testing. We employed the LDA algorithm to summarize the mobile testing related questions. Our findings show that topics such as testing tools, functional testing, and unit testing are often discussed when compared to other topics. We also analyzed the evolution of the interest of Android testing tools. Results show that developers are more interested in Appium, Espresso, Monkey, and Robotium tools.

},
  bdsk-url-1      = {http://doi.acm.org/10.1145/3131151.3131157},
  bdsk-url-2      = {http://dx.doi.org/10.1145/3131151.3131157},
  bytitledomenico = {doubt},
  doi             = {10.1145/3131151.3131157},
  isbn            = {978-1-4503-5326-7},
  keywords        = {Model Topics, Stack Overflow,Mobile Testing},
  url             = {http://doi.acm.org/10.1145/3131151.3131157},
}

@Article{Alavi2017100,
  author          = {Alavi, A and Quach, A and Zhang, H and Marsh, B and {Ul Haq}, F and Qian, Z and Lu, L and Gupta, R},
  title           = {{Where is the weakest link? A study on security discrepancies between android apps and their website counterparts}},
  journal         = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year            = {2017},
  volume          = {10176 LNCS},
  pages           = {100--112},
  abstract        = {As we move into the mobile era, many functionalities in standard web services are being re-implemented in mobile apps and services, including many security-related functionalities. However, it has been observed that security features that are standardized in the PC and web space are often not implemented correctly by app developers resulting in serious security vulnerabilities. For instance, prior work has shown that the standard SSL/TLS certificate validation logic in browsers is not implemented securely in mobile apps. In this paper, we study a related question: given that many web services are offered both via browsers/webpages and mobile apps, are there any discrepancies between the security policies of the two? To answer the above question, we perform a comprehensive study on 100 popular app-web pairs. Surprisingly, we find many discrepancies -- we observe that often the app security policies are much weaker than their website counterparts. We find that one can perform unlimited number of login attempts at a high rate (e.g., 600 requests per second) from a single IP address by following the app protocol whereas the website counterpart typically blocks such attempts. We also find that the cookies used in mobile apps are generally more valuable as they do not expire as quickly as the ones used for websites and they are often stored in plain-text on mobile devices. In addition, we find that apps often do not update the libraries they use and hence vulnerabilities are often left unpatched. Through a study of 6400 popular apps, we identify 31 apps that use one or more vulnerable (unpatched) libraries. We responsibly disclosed all of our findings to the corresponding vendors and have received positive acknowledgements from them. This result is a vivid demonstration of ``security is only as good as its weakest link''. {\textcopyright} Springer International Publishing AG 2017.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-54328-4_8},
  bytitledomenico = {no},
  doi             = {10.1007/978-3-319-54328-4_8},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015928385{\&}doi=10.1007{\%}2F978-3-319-54328-4{\_}8{\&}partnerID=40{\&}md5=5f27921199a279a5c59f86f90e7eec48},
}

@InProceedings{ISI:000389470200002,
  author          = {{Feijo Filho}, Jackson and Prata, Wilson and Oliveira, Juan},
  title           = {{Where-How-What Am I Feeling: User Context Logging in Automated Usability Tests for Mobile Software}},
  booktitle       = {Design, User Experience, and Usability: Technological Contexts, Pt III},
  year            = {2016},
  volume          = {9748},
  series          = {Lecture Notes in Computer Science},
  pages           = {14--23},
  abstract        = {This work proposes the use of a system to implement user context and
emotional feedback and logging in automated usability tests for mobile
devices. Our proposal augments the traditional methods of software
usability evaluation by monitoring users' location, weather conditions,
moving/ stationary status, data connection availability and spontaneous
facial expressions automatically. This aims to identify the moment of
negative and positive events. Identifying those situations and
systematically associating them to the context of interaction, assisted
software creators to overcome design flaws and enhancing interfaces'
strengths.
The validation of our approach include post-test questionnaires with
test subjects. The results indicate that the automated user-context
logging can be a substantial supplement to mobile software usability
tests.},
  annote          = {5th International Conference on Design, User Experience, and Usability (DUXU) held as part of 18th International Conference on Human-Computer Interaction (HCI International), Toronto, CANADA, JUL 17-22, 2016},
  bdsk-url-1      = {http://dx.doi.org/10.1007/978-3-319-40406-6_2},
  bytitledomenico = {doubt},
  doi             = {10.1007/978-3-319-40406-6_2},
  isbn            = {978-3-319-40406-6; 978-3-319-40405-9},
  issn            = {0302-9743},
}

@Article{TOMASONI2018193,
  author          = {Tomasoni, Mattia and Capponi, Andrea and Fiandrino, Claudio and Kliazovich, Dzmitry and Granelli, Fabrizio and Bouvry, Pascal},
  title           = {{Why energy matters? Profiling energy consumption of mobile crowdsensing data collection frameworks}},
  journal         = {Pervasive and Mobile Computing},
  year            = {2018},
  volume          = {51},
  pages           = {193--208},
  issn            = {1574-1192},
  abstract        = {Mobile Crowdsensing (MCS) has emerged in the last years and has become one of the most prominent paradigms for urban sensing. The citizens actively participate in the sensing process by contributing data with their mobile devices. To produce data, citizens sustain costs, i.e., the energy consumed for sensing and reporting operations. Hence, devising energy efficient data collection frameworks (DCFs) is essential to foster participation. In this work, we investigate from an energy-perspective the performance of different DCFs. Our methodology is as follows: (i) we developed an Android application that implements the DCFs, (ii) we profiled the energy and network performance with a power monitor and Wireshark, (iii) we included the obtained traces into CrowdSenSim simulator for large-scale evaluations in city-wide scenarios such as Luxembourg City, Turin and Washington DC. The amount of collected data, energy consumption and fairness are the performance indexes evaluated. The results unveil that DCFs with continuous data reporting require particular adjustments to be more energy-effective in harvesting data from the crowd than DCFs with probabilistic reporting. The latter exhibit high variability of energy consumption, i.e., to produce the same amount of data, the associated energy cost of different users can vary significantly.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1574119217305965},
  bdsk-url-2      = {https://doi.org/10.1016/j.pmcj.2018.10.002},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/j.pmcj.2018.10.002},
  keywords        = {Data collection, Energy consumption,Mobile crowdsensing},
  url             = {http://www.sciencedirect.com/science/article/pii/S1574119217305965},
}

@Article{MANSFIELDDEVINE201614,
  author          = {Mansfield-Devine, Steve},
  title           = {{Your life in your hands: the security issues with healthcare apps}},
  journal         = {Network Security},
  year            = {2016},
  volume          = {2016},
  number          = {4},
  pages           = {14--18},
  issn            = {1353-4858},
  abstract        = {Mobile applications have crept into every part of our lives. The marketing phrase `There's an app for that' may seem trite, but it's starting to seem like it's true. But like all software, mobile apps have security issues. And one area where this is particularly worrisome -- as Stephen McCarney, VP of marketing at Arxan Technologies explains in this interview -- is in the area of healthcare. Mobile applications have crept into every part of our lives. But like all software, mobile apps have security issues. One area where this is particularly worrisome -- as Stephen McCarney at Arxan Technologies explains in this interview -- is in the area of healthcare. Many healthcare providers are issuing mobile apps to make their services more responsive. But the data they work with is both highly attractive to hackers and also vulnerable to attack.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S1353485816300381},
  bdsk-url-2      = {https://doi.org/10.1016/S1353-4858(16)30038-1},
  bytitledomenico = {no},
  doi             = {https://doi.org/10.1016/S1353-4858(16)30038-1},
  url             = {http://www.sciencedirect.com/science/article/pii/S1353485816300381},
}

@Article{ATKINSON2018546,
  author          = {Atkinson, John S and Mitchell, John E and Rio, Miguel and Matich, George},
  title           = {{Your WiFi is leaking: What do your mobile apps gossip about you?}},
  journal         = {Future Generation Computer Systems},
  year            = {2018},
  volume          = {80},
  pages           = {546--557},
  issn            = {0167-739X},
  abstract        = {This paper describes how mobile device apps can inadvertently broadcast personal information through their use of wireless networks despite the correct use of encryption. Using a selection of personas we illustrate how app usage can be tied to personal information. Users would likely assume the confidentiality of personal information (including age, religion, sexuality and gender) when using an encrypted network. However, we demonstrate how encrypted traffic pattern analysis can allow a remote observer to infer potentially sensitive data passively and undetectably without any network credentials. Without the ability to read encrypted WiFi traffic directly, we process the limited side-channel data available (timings and frame sizes) to enable remote app detection. These side-channel data measurements are represented as histograms and used to construct a Random Forest classifier capable of accurately identifying mobile apps from the encrypted traffic they cause. The Random Forest algorithm was able to correctly identify apps with a mean accuracy of ∼99{\%} within the training set. The classifier was then adapted to form the core of a detection program that could monitor multiple devices in real-time. Tests in a closed-world scenario showed 84{\%} accuracy and demonstrated the ability to overcome the data limitations imposed by WiFi encryption. Although accuracy suffers greatly (67{\%}) when moving to an open-world scenario, a high recall rate of 86{\%} demonstrates that apps can unwittingly broadcast personal information openly despite using encrypted WiFi. The open-world false positive rate (38{\%} overall, or 72{\%} for unseen activity alone) leaves much room for improvement but the experiment demonstrates a plausible threat nevertheless. Finally, avenues for improvement and the limitations of this approach are identified. We discuss potential applications, strategies to prevent these leaks, and consider the effort required for an observer to present a practical privacy threat to the everyday WiFi user. This paper presents and demonstrates a nuanced and difficult to solve privacy vulnerability that cannot not be mitigated without considerable changes to current- and next-generation wireless communication protocols.},
  bdsk-url-1      = {http://www.sciencedirect.com/science/article/pii/S0167739X16301480},
  bdsk-url-2      = {https://doi.org/10.1016/j.future.2016.05.030},
  bytitledomenico = {doubt},
  doi             = {https://doi.org/10.1016/j.future.2016.05.030},
  keywords        = {Data protection, Information inference, Mobile apps, Privacy, Security,WiFi},
  url             = {http://www.sciencedirect.com/science/article/pii/S0167739X16301480},
}

@Conference{Deka2017727,
  author          = {Deka, B and Huang, Z and Franzen, C and Nichols, J and Li, Y and Kumar, R},
  title           = {{ZIPT: Zero-integration performance testing of mobile app designs}},
  booktitle       = {UIST 2017 - Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology},
  year            = {2017},
  pages           = {727--736},
  abstract        = {To evaluate the performance of mobile app designs, designers Andresearchers employ techniques such as A/B, usability, and analytics-driven testing. While these are all useful strategies for evaluating known designs, comparing many divergent solutions to identify the most performant remains a costly and difficult problem. This paper introduces a design performance testing approach that leverages existing app implementations and crowd workers to enable comparative testing at scale. This approach is manifest in ZIPT, a zero-integration performance testing platform that allows designers to collect detailed design and interaction data over any android app -including apps they do not own and did not build. Designers can deploy scripted tests via ZIPT to collect aggregate user performance metrics (e.g., completion rate, time on task) and qualitative feedback over third-party apps. Through case studies, we demonstrate that designers can use ZIPT's aggregate data and visualizations to understand the relative performance of interaction patterns found in the wild, and identify usability issues in existing android apps. {\textcopyright} 2017 Copyright held by the owner/author(s).},
  annote          = {cited By 2},
  bdsk-url-1      = {http://dx.doi.org/10.1145/3126594:3126647},
  bytitledomenico = {yes},
  doi             = {10.1145/3126594:3126647},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041520399{\&}doi=10.1145{\%}2F3126594{\%}3A3126647{\&}partnerID=40{\&}md5=94feddecc1f241bf1410ae7abf0dae85},
}

@Conference{VanDerLee20181,
  author          = {{Van Der Lee}, W and Verwer, S},
  title           = {{Vulnerability Detection on Mobile Applications Using State Machine Inference}},
  booktitle       = {Proceedings - 3rd IEEE European Symposium on Security and Privacy Workshops, EURO S and PW 2018},
  year            = {2018},
  pages           = {1--10},
  abstract        = {Although the importance of mobile applications grows every day, recent vulnerability reports argue the application's deficiency to meet modern security standards. Testing strategies alleviate the problem by identifying security violations in software implementations. This paper proposes a novel testing methodology that applies state machine learning of mobile Android applications in combination with algorithms that discover attack paths in the learned state machine. The presence of an attack path evidences the existence of a vulnerability in the mobile application. We apply our methods to real-life apps and show that the novel methodology is capable of identifying vulnerabilities. {\textcopyright} 2018 IEEE.},
  annote          = {cited By 0},
  bdsk-url-1      = {http://dx.doi.org/10.1109/EuroSPW.2018.00008},
  bytitledomenico = {yes},
  doi             = {10.1109/EuroSPW.2018.00008},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050925614{\&}doi=10.1109{\%}2FEuroSPW.2018.00008{\&}partnerID=40{\&}md5=3c0fa1edb79ac21dc1b192cffe982a52},
}

@Comment{jabref-meta: databaseType:bibtex;}
